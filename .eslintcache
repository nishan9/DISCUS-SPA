[{"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx":"1","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx":"2","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx":"3","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx":"4","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx":"5","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx":"6","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx":"7","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx":"8","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx":"9","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx":"10","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx":"11","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx":"12","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx":"13","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx":"14","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx":"15","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx":"16","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx":"17","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx":"18","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx":"19","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx":"20","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx":"21","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx":"22","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx":"23","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx":"24","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx":"25","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx":"26","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx":"27","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx":"28","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx":"29","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx":"30","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx":"31","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUser.tsx":"32","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/SelectedUserContext.tsx":"33","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/UserTheme.tsx":"34","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/HtmlTooltip.tsx":"35","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/SearchTheme.tsx":"36","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/AntSwitch.tsx":"37","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/EventsTheme.tsx":"38","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/NotFoundPlayer.tsx":"39"},{"size":1210,"mtime":1617466276277,"results":"40","hashOfConfig":"41"},{"size":442,"mtime":1616311427495,"results":"42","hashOfConfig":"41"},{"size":2443,"mtime":1616267610934,"results":"43","hashOfConfig":"41"},{"size":838,"mtime":1616079789554,"results":"44","hashOfConfig":"41"},{"size":1466,"mtime":1616079789554,"results":"45","hashOfConfig":"41"},{"size":25872,"mtime":1618231779243,"results":"46","hashOfConfig":"41"},{"size":1463,"mtime":1616336247238,"results":"47","hashOfConfig":"41"},{"size":2040,"mtime":1616091229348,"results":"48","hashOfConfig":"41"},{"size":5026,"mtime":1616236507556,"results":"49","hashOfConfig":"41"},{"size":1403,"mtime":1617466746879,"results":"50","hashOfConfig":"41"},{"size":2121,"mtime":1616335054930,"results":"51","hashOfConfig":"41"},{"size":10514,"mtime":1618226818919,"results":"52","hashOfConfig":"41"},{"size":13131,"mtime":1617787111024,"results":"53","hashOfConfig":"41"},{"size":15414,"mtime":1618231091121,"results":"54","hashOfConfig":"41"},{"size":26792,"mtime":1618226384020,"results":"55","hashOfConfig":"41"},{"size":8364,"mtime":1618231232391,"results":"56","hashOfConfig":"41"},{"size":1513,"mtime":1618231813359,"results":"57","hashOfConfig":"41"},{"size":1399,"mtime":1616248167311,"results":"58","hashOfConfig":"41"},{"size":475,"mtime":1616153521383,"results":"59","hashOfConfig":"41"},{"size":466,"mtime":1614962382516,"results":"60","hashOfConfig":"41"},{"size":151,"mtime":1614962382516,"results":"61","hashOfConfig":"41"},{"size":9445,"mtime":1618226786939,"results":"62","hashOfConfig":"41"},{"size":10394,"mtime":1616855730490,"results":"63","hashOfConfig":"41"},{"size":4354,"mtime":1618226637349,"results":"64","hashOfConfig":"41"},{"size":17807,"mtime":1616253620798,"results":"65","hashOfConfig":"41"},{"size":10155,"mtime":1617785159776,"results":"66","hashOfConfig":"41"},{"size":4746,"mtime":1618231879218,"results":"67","hashOfConfig":"41"},{"size":5943,"mtime":1618226506760,"results":"68","hashOfConfig":"41"},{"size":3891,"mtime":1618231827453,"results":"69","hashOfConfig":"41"},{"size":258,"mtime":1615994412957,"results":"70","hashOfConfig":"41"},{"size":1509,"mtime":1618231832729,"results":"71","hashOfConfig":"41"},{"size":26657,"mtime":1618226806222,"results":"72","hashOfConfig":"41"},{"size":1494,"mtime":1616146344723,"results":"73","hashOfConfig":"41"},{"size":1216,"mtime":1616168737083,"results":"74","hashOfConfig":"41"},{"size":314,"mtime":1616227611979,"results":"75","hashOfConfig":"41"},{"size":1181,"mtime":1616309435170,"results":"76","hashOfConfig":"41"},{"size":913,"mtime":1616250751224,"results":"77","hashOfConfig":"41"},{"size":1064,"mtime":1616272033232,"results":"78","hashOfConfig":"41"},{"size":598,"mtime":1616270349041,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1k7wfi0",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx",[],["167","168"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx",["169","170","171","172","173","174"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx",["175"],"import { useAuth0 } from '@auth0/auth0-react';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Auth0Context } from './context/Auth0Context';\nimport Dashboard from './components/Dashboard'\nimport EnrichProfile from './components/EnrichProfile';\nimport EditUserProfile from './components/EditUserProfile';\n\n\nfunction WelcomeScreen() {\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const AuthContext = useContext(Auth0Context)\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n\n    useEffect(() => {\n        fetchData();\n        console.log(accessToken); \n        console.log(Auth0.getIdTokenClaims)\n    }, [accessToken])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    return (\n        <>\n            { AuthContext.data.user_metadata === null ? \n                 <EnrichProfile/>\n                : AuthContext.edit === false ?\n                 <Dashboard/>\n                :\n                 <EditUserProfile/>\n            }\n        </>\n    )}\n\n\nexport default WelcomeScreen","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx",["176"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx",["177","178","179"],"import { Avatar, Box, Button, Chip, Grid, Hidden, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect } from 'react'\nimport Auth0user from '../models/Auth0user';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Auth0Context } from '../context/Auth0Context'\nimport IsAvailable from './IsAvailable';\nimport Loading from '../config/Loading';\nimport EmailIcon from '@material-ui/icons/Email';\nimport SchoolIconScout from '../assets/school.svg';\nimport CareerStageIconScout from '../assets/briefcase.svg'; \nimport PersonIcon from '@material-ui/icons/Person';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport SchoolIcon from '@material-ui/icons/School';\nimport uosLogo from '../assets/logo.svg'; \nimport EditUser from './EditUser';\nimport { SelectedUserContext } from '../context/SelectedUserContext';\nimport UserTheme from '../themes/UserTheme';\nimport Moment from 'react-moment';\n\nfunction ViewUser(props : any) {\n\n    const UserContext = useContext(SelectedUserContext); \n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/${props.match.params.user_id}`);\n        UserContext.setData(await response.json());\n    }\n\n    function changeEdit(){\n        UserContext.setEdit(true); \n    }\n\n    const classes = UserTheme();\n    \n    return (\n        <>\n        {UserContext.edit ? <EditUser/> : \n            <>\n            {UserContext.data ? \n                              <>\n                              <Box my={4}>\n                              </Box>\n                              <Hidden xsDown>\n                                  <Box my={7}>\n                                  </Box>\n                              </Hidden>\n                              <div className={classes.root}>\n                                  <Grid container justify=\"center\" className={classes.centerMobile}>\n                                  <Grid item xs={12} lg={9}>\n                                      <Box borderRadius={5} className={classes.glass}>\n                                      <Grid container className={classes.centerMobile}>\n                                      <Grid item lg={4} xs={9}>\n                                          <Grid container justify = \"center\">\n                                              <Box m={2}>\n                                                  <Box className=\"small\" borderRadius=\"borderRadius\">\n                                                  <Avatar alt=\"Profile Picture\" className={classes.large} src={UserContext.data ? UserContext.data.picture : \"\"}/>\n                                                  </Box>\n                                              </Box>\n                                              <Hidden only={['md', 'lg', 'xl', 'sm']}>\n                                              <Button onClick={changeEdit}> <EditIcon/> </Button>\n                                              </Hidden>\n                                          </Grid>\n                  \n                                      </Grid>\n                  \n                                      <Grid item lg={8} xs={8} className={classes.centerMobile}>\n                                          <Box borderRadius={2}>\n                                          <Grid container className={classes.centerMobile}>\n                                          <Grid item xs={11} className={classes.centerMobile}>\n                                          <Grid container className={classes.centerMobile}>\n                                          <Box my={1}>\n                                              <Typography variant=\"h4\"> {UserContext.data.name} </Typography>\n                                          </Box>\n                                          <Box m={2} >\n                                              {UserContext.data.user_metadata.education.available === 'true' ? <IsAvailable/> : \"\"}\n                                          </Box>\n                                          </Grid>\n                                          \n                  \n                                          </Grid>\n                                          <Hidden xsDown>\n                                              <Grid item lg={1} xs={1}>\n                                                  <Box m={2}><Button onClick={changeEdit}> <EditIcon/> </Button></Box>\n                                              </Grid>\n                                          </Hidden>\n                                          <Grid container className={classes.centerMobile}>\n                                          <div className={classes.centerSVG}>\n                                          {\n                                          UserContext.data.user_metadata.social.sussex === \"\" ? \n                                              <></>\n                                              :\n                                              <a href={UserContext.data.user_metadata.social.sussex} target=\"_blank\" rel=\"noopener noreferrer\">\n                                              <Box mr={2}><img src={uosLogo} alt=\"UoS Logo\"  height='25px' width='30px' /></Box> \n                                          </a>\n                                          }                        \n                              \n                                          {UserContext.data.user_metadata.social.linkedIn === \"\" ?  \n                                              <></> \n                                              :\n                                              <Box mr={2}>\n                                                  <a href={UserContext.data.user_metadata.social.linkedIn} target=\"_blank\" rel=\"noopener noreferrer\"> \n                                                      <LinkedInIcon/>\n                                                  </a>\n                                              </Box>\n                                          }\n                                          <Box my={1}><SchoolIcon/></Box>\n                                          <Box m={1}><Moment format=\"MMMM Do YYYY\">{UserContext.data.user_metadata.education.graduationDate.toString()}</Moment></Box>\n                                          </div>\n                                          </Grid>\n                                          </Grid>\n                                          </Box>\n                                      </Grid>\n                                      </Grid>\n                                      <Grid container>\n                                          <Grid item xs={12} lg={4}>\n                                              <Grid container justify=\"center\">\n                                                  <Grid item xs={9}>\n                                                      <Box pb={2}>\n                                                        <Box  m={1} p={3} bgcolor=\"primary.main\" borderRadius=\"borderRadius\" textAlign=\"center\">\n                                                        <Typography>{UserContext.data.user_metadata.events.length} Experience</Typography>\n                                                        </Box>                                                     \n                                                    </Box>\n                                                  </Grid>\n                                              </Grid>\n                                          </Grid>\n                                          <Grid item xs={12} lg={8}>\n                                                  <Box mx={3} p={4} borderRadius={8} bgcolor=\"secondary.main\">\n                                                      <Grid container>\n                                                          <Grid item lg={5} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <img src={CareerStageIconScout} alt=\"School Icon\"  height='25px' width='25px' />\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.user_metadata.education.careerStage}</Typography>\n                                                              </Box>  \n                                                          </Grid>\n                                                          <Grid item lg={7} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <EmailIcon/>\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.email}</Typography>\n                                                              </Box> \n                                                          </Grid>\n                                                          <Grid item lg={5} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <PersonIcon/>\n                                                                  <Box mx={0.5}>\n                                                                      <Typography>{UserContext.data.user_metadata.education.department}</Typography>\n                                                                  </Box>\n                                                              </Box> \n                                                          </Grid>\n                                                          <Grid item lg={7} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <img src={SchoolIconScout} alt=\"School Icon\"  height='25px' width='25px' />\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.user_metadata.education.school}</Typography>\n                                                              </Box> \n                                                          </Grid>\n                                                      </Grid>\n                                                  </Box>\n                                          </Grid>\n                                      </Grid>\n                                      <Grid container>\n                                          <Grid item xs={11} lg={6}>\n                                              <Box mt={2} className={classes.mobilePadding}>\n                                                  <Typography>Expertise : {UserContext.data.user_metadata.expertise.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                              </Box>\n                                          </Grid>\n                                          <Grid item xs={11} lg={6}>\n                                              <Box mt={2} className={classes.mobilePadding}>\n                                                  <Typography>Interest : {UserContext.data.user_metadata.interest.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                              </Box>\n                                          </Grid>\n                                      </Grid>\n                                      </Box>\n                                          <Grid item xs={12}  className={classes.mobilePadding}>\n                                              <Box borderRadius={5} className={classes.glass} my={4} >\n                                                  <Box p={2}>\n                                                      <Typography variant=\"h6\" gutterBottom > Research from {UserContext.data.name}</Typography>\n                                                      <Box bgcolor=\"#FAFAFA\" p={1} borderRadius={3}>\n                                                          <Typography>{UserContext.data.user_metadata.research}</Typography>\n                                                      </Box>\n                                                  </Box>\n                                              </Box>\n                                          </Grid>\n                                      </Grid>\n                                  </Grid>\n                              </div>\n                          </>\n            :\n                <Loading/>\n            }\n            </>\n            }\n        </>\n    )\n}\n\nexport default ViewUser\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx",["180","181","182"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx",["183","184","185","186","187","188"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx",["189","190","191","192","193","194"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx",["195"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx",["196"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx",["197"],"import { Box, Button, Checkbox, FormControl, FormControlLabel, Grid, MenuItem, Select, Tooltip } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Auth0Context } from '../../../context/Auth0Context';\nimport { AllSubjects } from '../../../config/TagSystem';\nimport { InputLabel } from '@material-ui/core';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Autocomplete } from '@material-ui/lab';\nimport { useSnackbar } from 'notistack';\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/date-fns';\n\ninterface CreateEventProps {\n    dialog : Function\n}\n\nfunction CreateEvent(props : CreateEventProps) {\n    const Auth0 = useAuth0();    \n    const [event, setEvent] = useState({title:\"\", dateTime: new Date() , finishedDateTime: new Date(), type:\"\", url:\"\", description:\"\",isDISCUS:true, isApproved : false, tags : \"\" }); \n    const [accessToken, setAccessToken] = useState(\"\");\n    const AuthContext = useContext(Auth0Context)\n    const [tags, setTags] = useState<string[]>([])\n    const { enqueueSnackbar } = useSnackbar();\n    const [validated, setValidated] = useState(true); \n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        fetchData(); \n    },[Auth0]);\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function publishEvent(){\n        \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n\n        const newEvent = {...event}\n            if(AuthContext.data.app_metadata !== null){\n                newEvent.isApproved = true;\n                setEvent(newEvent)\n        }\n\n        const newEventTags = {...event}\n        newEvent.tags = Alltags.slice(0,-1);\n        setEvent(newEventTags); \n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity`, {\n            method:\"POST\", \n            body: JSON.stringify(newEvent),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            if (AuthContext.data.app_metadata !== null)\n            {\n                enqueueSnackbar('Event has been created!', { variant : \"success\" });\n            } \n                else \n            {\n                enqueueSnackbar('Event will be published once authorised!', { variant : \"info\" });\n            }\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    const handleStartDate = (date: Date) => {\n        setEvent({...event, dateTime : date})\n    };\n\n    const handleFinishDate = (date: Date) => {\n        setEvent({...event, finishedDateTime : date})\n    };\n\n    return (\n        <>\n        <form noValidate autoComplete=\"off\">\n            <div>\n            <TextField\n                required\n                error={!validated}\n                label=\"Title\"\n                fullWidth={true} \n                variant=\"outlined\"\n                defaultValue=\"\"\n                onChange={(e) => setEvent({...event,title: String(e.target.value)})}\n                helperText={validated ? \"\" : \"Title cannot be blank.\"}\n            />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Box p={1}> \n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            disablePast\n                            label=\"Pick a Start Date\"\n                            value={event.dateTime}\n                            onChange={(e : any) => handleStartDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        </Box>\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Start Time\"\n                                value={event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n                    <Box p={1}> \n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"yyyy-MM-dd\"\n                        disablePast\n                        margin=\"normal\"\n                        minDate={event.dateTime}\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Finish Date\"\n                        value={event.finishedDateTime}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    </Box>\n                    <Box p={1}> \n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"Finish Time\"\n                            value={event.finishedDateTime}\n                            onChange={(e : any) => handleFinishDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change time',\n                            }}\n                        />\n                    </Box>\n                </Grid>\n            </Grid>\n            </MuiPickersUtilsProvider>\n\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                    <FormControl variant=\"outlined\">\n                        <InputLabel>Type</InputLabel>\n                        <Select\n                        style={{minWidth: 220}}\n                        onChange={(e) => setEvent({...event,type:String(e.target.value)})}\n                        label=\"Event Type\"\n                        >\n                        <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                        <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                        <MenuItem value=\"Networking\">Networking</MenuItem>\n                        <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12}>\n                    <Box m={1}>\n                        <FormControlLabel \n                            control={ <Checkbox \n                                    checked={event.isDISCUS} name=\"isDiscus\" \n                                    onChange={(e) => setEvent({...event,isDISCUS:Boolean(e.target.checked)})}\n                                    /> }\n                            label=\"A discus event\"/>\n                   </Box>\n                </Grid>\n            </Grid>\n\n            <Box>\n\n            </Box>\n            <Box my={1}>\n                <TextField \n                    margin=\"normal\" \n                    label=\"Registration URL\" \n                    variant=\"outlined\" \n                    fullWidth={true}\n                    type=\"text\" \n                    onChange={(e) => setEvent({...event,url:e.target.value})}/>\n            </Box>\n            <Box my={1} >\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Description\"\n                    multiline\n                    fullWidth={true}\n                    rows={4}\n                    onChange={(e) => setEvent({...event,description:String(e.target.value)})}\n                    variant=\"outlined\"/>\n            </Box>\n\n            <Box my={2}>\n                <Tooltip title=\"Add tags for users to be matched for events\">\n                    <Autocomplete\n                        multiple\n                        limitTags={5}\n                        id=\"set Interest\"\n                        onChange={(obj,value,reason) => setTags(value)}\n                        options={AllSubjects}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => (\n                        <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Add tags\" />\n                    )}\n                    />\n                </Tooltip>\n            </Box>\n            \n            <Box mb={2}>\n            <Button disabled={AuthContext.data === null} variant=\"contained\" value=\"Submit\" color=\"secondary\" \n                onClick = \n                    {() => {\n                            if (event.title === \"\") \n                            {\n                                setValidated(false);\n                            } \n                            else \n                            {\n                                setValidated(true);\n                                publishEvent(); \n                            }\n                        }\n                    }\n            >Submit</Button>\n            </Box>\n        </div>\n        </form>\n        </>\n    );\n}\n\nexport default CreateEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx",["198"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx",["199","200","201"],"import { useAuth0 } from '@auth0/auth0-react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Box, FormControl, Grid, Checkbox, InputLabel, MenuItem, Select, Typography, TextField, Button, Tooltip, Theme, withStyles } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { AllSubjects } from '../config/TagSystem'\nimport signup from '../assets/scientist.svg'; \nimport { Auth0Context } from '../context/Auth0Context';\nimport { useSnackbar } from 'notistack';\nimport DepartmentObj from '../config/Department'; \nimport validator from 'validator';\nimport HtmlTooltip from '../themes/HtmlTooltip';\n\n\nfunction EnrichProfile() {\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const [metadata, setMetada] = useState({sussex : \"\", linkedin : \"\", school:\"\",department:\"\",careerstage:\"\", research : \"\", expertise: [], intersts : [], available : \"false\", GraduationDate : new Date()}); \n    const [interests, setInterests] = useState<String[]>([]); \n    const [expertise, setExpertise] = useState<String[]>([]);\n    const context = useContext(Auth0Context)\n    const CHARACTER_LIMIT = 499; \n    const { enqueueSnackbar } = useSnackbar();\n    const [validatedSP, setValidatedSP] = useState(true); \n    const [validatedLP, setValidatedLP] = useState(true); \n\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n    \n    const handleDateChange = (date: Date ) => {\n        setMetada({...metadata, GraduationDate : date});\n    };\n\n    async function SaveMetada() {\n        const gradDate = metadata.GraduationDate.toString();\n        const postreq = (\n            { \"user_metadata\" : {\n                \"social\": {\n                    \"sussex\": metadata.sussex,\n                    \"linkedIn\" : metadata.linkedin, \n                  },\n                  \"education\": {\n                    \"School\": metadata.school,\n                    \"Department\": metadata.department,\n                    \"CareerStage\": metadata.careerstage,\n                    \"GraduationDate\": gradDate,\n                    \"Available\": metadata.available\n                  },\n                  \"research\": metadata.research,\n                  \"expertise\": expertise,\n                  \"interest\": interests, \n                  \"events\" : [], \n                }\n            }\n        )\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            method:\"PATCH\", \n            body: JSON.stringify(postreq),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            enqueueSnackbar('User has been updated', { variant : \"success\" });\n            fetchData(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        context.setData(await response.json());  \n    }\n      \n\n    return (\n        <form noValidate autoComplete=\"off\">\n        <Grid container justify=\"center\">\n        <Grid item lg={6} xs={12}>\n            <Grid container justify=\"center\">\n                <Box mt={7}>\n                    <Typography variant={\"h4\"}> Enrich your profile! </Typography> \n                </Box>\n                <Box display=\"flex\" mt={11} flexDirection=\"column-reverse\" width=\"100%\">\n                    <img src={signup} height='auto' width='100%' alt=\"SignupImage\"/>\n                </Box>\n            </Grid>\n        </Grid>\n        <Grid item lg={6} xs={12}>\n                <Box mt={6} >\n                <Box m={3} p={3} px={4} border={1} borderRadius={15} borderColor=\"primary.light\">   \n                <Box my={2}>\n                    <Typography variant={'h4'}>Sign up now...</Typography>\n                </Box>\n            <Grid container direction=\"row\" alignItems=\"center\">\n                <Box my={2} mr={3}>\n                    <FormControl variant=\"outlined\" style={{minWidth: 120}}>\n                        <InputLabel>School</InputLabel>\n                        <Select onChange={(e) => setMetada({...metadata,school: String(e.target.value)})} label=\"School\" >\n                            <MenuItem value=\"University of Sussex Business School\">University of Sussex Business School</MenuItem>\n                            <MenuItem value=\"School of Education and Social Work\">School of Education and Social Work</MenuItem>\n                            <MenuItem value=\"School of Engineering and Informatics\">School of Engineering and Informatics</MenuItem>\n                            <MenuItem value=\"School of Global Studies\">School of Global Studies</MenuItem>\n                            <MenuItem value=\"School of Law, Politics and Sociology\">School of Law, Politics and Sociology</MenuItem>\n                            <MenuItem value=\"School of Life Sciences\">School of Life Sciences</MenuItem>\n                            <MenuItem value=\"School of Mathematical and Physical Sciences\">School of Mathematical and Physical Sciences</MenuItem>\n                            <MenuItem value=\"School of Media, Arts and Humanities\">School of Media, Arts and Humanities</MenuItem>\n                            <MenuItem value=\"School of Psychology\">School of Psychology</MenuItem>\n                            <MenuItem value=\"Brighton and Sussex Medical School\">Brighton and Sussex Medical School</MenuItem>\n                            <MenuItem value=\"Doctoral School and research groups\">Doctoral School and research groups</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Box>\n\n                { metadata.school === \"\" ? \n                    <FormControl variant=\"outlined\" style={{minWidth: 200}} disabled>\n                    <InputLabel>Department</InputLabel>\n                    <Select /> \n                    </FormControl> \n                    :\n                    <Box my={2}> \n                    <FormControl variant=\"outlined\" style={{minWidth: 200}}>\n                    <InputLabel>Department</InputLabel>\n                        <Select\n                        onChange={(e : any) => setMetada({...metadata,department: e.target.value})}\n                        label=\"Department\"\n                        >\n                        {   metadata.school === \"University of Sussex Business School\" ?  \n                        (DepartmentObj['University of Sussex Business School'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem> \n                        ))\n                        : metadata.school === \"School of Education and Social Work\" ?  \n                        (DepartmentObj['School of Education and Social Work'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : metadata.school === \"School of Engineering and Informatics\" ?  \n                        (DepartmentObj['School of Engineering and Informatics'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : metadata.school === \"School of Global Studies\" ?  \n                        (DepartmentObj['School of Global Studies'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : metadata.school === \"School of Law, Politics and Sociology\" ?  \n                        (DepartmentObj['School of Law, Politics and Sociology'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : metadata.school === \"School of Life Sciences\" ?  \n                        (DepartmentObj['School of Life Sciences'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : metadata.school === \"School of Mathematical and Physical Sciences\" ?  \n                        (DepartmentObj['School of Mathematical and Physical Sciences'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))                                \n                        : metadata.school === \"School of Media, Arts and Humanities\" ?\n                        (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))  \n                        : metadata.school === \"School of Psychology\" ?\n                        (DepartmentObj['School of Psychology'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))  \n                        : metadata.school === \"Brighton and Sussex Medical School\" ?\n                        (DepartmentObj['Brighton and Sussex Medical School'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))  \n                        : metadata.school === \"Doctoral School and Research groups\" ?\n                        (DepartmentObj['Doctoral School and Research groups'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))  \n                        : <p></p>\n                        }\n                        </Select>\n                    </FormControl>\n                    </Box>\n                }\n                </Grid>\n     \n                <Grid container direction=\"row\" alignItems=\"center\">\n\n                <div style={{ width : '100%'}}>\n                    <Box my={2}>\n                        <FormControl variant=\"outlined\" style={{minWidth: 150}}>\n                        <InputLabel>CareerStage</InputLabel>\n                        <Select onChange={(e) => setMetada({...metadata,careerstage: String(e.target.value)})} label=\"Career Stage\" >\n                        <MenuItem value=\"UG\">UG</MenuItem>\n                        <MenuItem value=\"MSc\">MSc</MenuItem>\n                        <MenuItem value=\"PhD\">PhD</MenuItem>\n                        <MenuItem value=\"Postdoc\">Postdoc</MenuItem>\n                        <MenuItem value=\"Faculty\">Faculty</MenuItem>\n                        <MenuItem value=\"Professional Services\">Professional Services</MenuItem>\n                        </Select>\n                        </FormControl>\n                    </Box>\n                </div>\n\n                <div style={{ width : '100%'}}>\n                <Box>\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                        <KeyboardDatePicker\n                            margin=\"normal\"\n                            id=\"date-picker-dialog\"\n                            label=\"Graduation Date\"\n                            format=\"MM/dd/yyyy\"\n                            value={metadata.GraduationDate}\n                            onChange={(e : any) => handleDateChange(e)}\n                            KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                            }}\n                        />\n                    </MuiPickersUtilsProvider>\n                </Box>\n                </div>\n\n                <Box my={2}>\n                    <Typography>Available for ad Hoc project work? <Checkbox onChange={(e) => setMetada({...metadata,available: String(e.target.checked)})}/> </Typography>\n                </Box>\n               \n                </Grid> \n                    <TextField\n                        id=\"outlined-multiline-static\"\n                        label=\"Research\"\n                        multiline\n                        fullWidth\n                        onChange={(e) => setMetada({...metadata,research: String(e.target.value)})}\n                        rows={5}\n                        variant=\"outlined\"\n                        inputProps={{\n                            maxlength: CHARACTER_LIMIT\n                        }}\n                        helperText={`${metadata.research.length}/${CHARACTER_LIMIT}`}\n                    />\n                    <Box my={2}>\n                        <HtmlTooltip title={\n                                <React.Fragment>\n                                    <Typography color=\"inherit\">Put your sussex Profile URL to link your sussex profile.</Typography>\n                                    <em>{\"For example\"}</em> <b>{'https://profiles.sussex.ac.uk/p131073-david-hendy'}</b>\n                                </React.Fragment>\n                            }>                        \n                            <TextField \n                            fullWidth \n                            error={!validatedSP}\n                            helperText={validatedSP ? \"\" : \"Must be a valid URL or blank\"}\n                            onChange={(e) => setMetada({...metadata, sussex: String(e.target.value)})} \n                            label=\"Sussex Profile URL\" \n                            variant=\"outlined\" />\n                        </HtmlTooltip>\n                    </Box>\n\n                    <Box my={2}>\n                        <HtmlTooltip title={\n                                <React.Fragment>\n                                    <Typography color=\"inherit\">Put your LinkedIn URL to link your LinkedIn profile.</Typography>\n                                    <em>{\"For example\"}</em> <b>{'https://www.linkedin.com/in/m-nishan/'}</b>\n                                </React.Fragment>\n                            }>\n                        <TextField \n                            fullWidth               \n                            error={!validatedLP}\n                            helperText={validatedLP ? \"\" : \"Must be a valid URL or blank\"}\n                            onChange={(e) => setMetada({...metadata, linkedin: String(e.target.value)})} label=\"LinkedIn URL\" variant=\"outlined\" />\n                        </HtmlTooltip>\n                    </Box>\n\n                    <Box my={2}>\n                        <Autocomplete\n                            multiple\n                            limitTags={5}\n                            id=\"set Interest\"\n                            onChange={(obj,value,reason) => setInterests(value)}\n                            options={AllSubjects}\n                            getOptionLabel={(option) => option}\n                            renderInput={(params) => (\n                            <TextField {...params} variant=\"outlined\" label=\"Expertise\" placeholder=\"Favorites\" />\n                        )}\n                        />\n                    </Box>\n                    <Box>\n                        <Autocomplete\n                            multiple\n                            limitTags={5}\n                            id=\"set Expertise\"\n                            options={AllSubjects}\n                            onChange={(obj,value,reason) => setExpertise(value)}\n                            getOptionLabel={(option) => option}\n                            renderInput={(params) => (\n                            <TextField {...params} variant=\"outlined\" label=\"Interests\" placeholder=\"Favorites\" />\n                        )}\n                        />\n                    </Box>\n                    <Grid justify= \"center\" container alignItems=\"center\" alignContent=\"center\">\n                        <Box my={2}>\n                            <Button variant=\"contained\" \n                                color=\"secondary\"\n                                onClick=\n                                { () => {\n                                    if ((metadata.sussex === \"\" || validator.isURL(metadata.sussex)) && (metadata.linkedin  === \"\" ||  validator.isURL(metadata.linkedin))) \n                                    {\n                                        setValidatedSP(true);\n                                        setValidatedLP(true);\n                                        SaveMetada();\n                                    } \n                                    else if (metadata.sussex === \"\" || validator.isURL(metadata.sussex) )\n                                    {\n                                        setValidatedSP(true);\n                                        if (metadata.linkedin  !== \"\" ||  !validator.isURL(metadata.linkedin)){\n                                            setValidatedLP(false);\n                                        }\n                                    }\n                                    else if (metadata.linkedin  === \"\" ||  validator.isURL(metadata.linkedin))\n                                    {\n                                        setValidatedLP(true);\n                                        if (metadata.sussex  !== \"\" ||  !validator.isURL(metadata.sussex)){\n                                            setValidatedSP(false);\n                                        }\n                                    }\n                                    else {\n                                        setValidatedSP(false);\n                                        setValidatedLP(false);\n                                    }\n                                }} \n                                value=\"Submit\">Submit</Button>\n                        </Box>\n                    </Grid>\n                </Box>\n                </Box>\n                </Grid>\n        </Grid>\n        </form>   \n    )\n}\n\nexport default EnrichProfile\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx",["202","203"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx",["204"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx",["205","206"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx",["207"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUser.tsx",["208","209","210"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/SelectedUserContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/UserTheme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/HtmlTooltip.tsx",["211"],"import { Theme, Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport React from 'react'\n\nconst HtmlTooltip = withStyles((theme: Theme) => ({\n    tooltip: {\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n    },\n  }))(Tooltip);\n\nexport default HtmlTooltip\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/SearchTheme.tsx",["212","213","214"],"import React from 'react'\nimport theme from '../theme';\nimport { Accordion, makeStyles, withStyles,} from '@material-ui/core';\n\nconst SearchTheme = makeStyles({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n        margin : '15px'\n    },\n    box: {\n      textAlign: 'center', \n      padding : 4,\n      borderRadius : 4,\n      background : \"white\", \n    }, \n    search : {\n        display: 'inline-flex',\n        VerticalAlign: 'text-bottom',\n        BoxSizing: 'inherit',\n        textAlign: 'center',\n        AlignItems: 'center', \n    },\n    color : {\n        padding : '15px',\n        backgroundColor : '#EBEBEB',\n    }, \n    large: {\n        width: 90, \n        height: 90, \n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n      },\n      iconButton: {\n        padding: 10,\n      },\n      divider: {\n        height: 28,\n        margin: 4,\n      },\n      accordian : {\n        backgroundColor : \"#24CAC3\", \n        borderRadius : 10\n      },\n      MuiAccordionroot: {\n        \"&.MuiAccordion-root:before\": {\n          backgroundColor: \"#FAFAFA\"\n    }},\n});\n\nexport default SearchTheme","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/AntSwitch.tsx",["215"],"import { createStyles, Switch, Theme, withStyles } from '@material-ui/core';\nimport React from 'react'\n\nconst AntSwitch = withStyles((theme: Theme) =>\n    createStyles({\n    root: {\n     width: 28,\n     height: 16,\n     padding: 0,\n     display: 'flex',\n    },\n    switchBase: {\n     padding: 2,\n     color: theme.palette.grey[500],\n     '&$checked': {\n        transform: 'translateX(12px)',\n        color: theme.palette.common.white,\n        '& + $track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main,\n        },\n     },\n    },\n    thumb: {\n     width: 12,\n     height: 12,\n     boxShadow: 'none',\n    },\n     track: {\n     border: `1px solid ${theme.palette.grey[500]}`,\n     borderRadius: 16 / 2,\n     opacity: 1,\n     backgroundColor: theme.palette.common.white,\n    },\n    checked: {},\n    }),\n)(Switch);\n\nexport default AntSwitch","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/EventsTheme.tsx",["216","217"],"import { makeStyles } from '@material-ui/core';\nimport React from 'react'\nimport events from '../assets/eventsBackground.svg'; \n\nconst EventsTheme = makeStyles(theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    paper: {\n        overflowY: 'unset',\n    },\n\n    customizedButton: {\n        padding: \"10px\",\n        position: \"absolute\",\n        right: -26,\n        top: -27,\n    }, \n    box : {\n        position : \"relative\", \n        backgroundColor : 'white', \n        border : '1px solid rgba(0,0,0,0.1)', \n    }, \n    eventContainer : {\n        backgroundColor : \"lightblue\", \n    },\n    centerSVG : {\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        },\n    leftButtons : {\n        textAlign :'center',\n        padding : '4px',\n        [theme.breakpoints.down('xs')]: {\n            paddingLeft : 0,\n            paddingRight : 0,\n            PaddingTop : 0,\n            paddingBottom : '2px', \n        },\n    },\n\n}));\n\nexport default EventsTheme\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/NotFoundPlayer.tsx",[],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":66,"column":7,"nodeType":"224","endLine":66,"endColumn":89,"suggestions":"225"},{"ruleId":"222","severity":1,"message":"223","line":73,"column":7,"nodeType":"224","endLine":73,"endColumn":27,"suggestions":"226"},{"ruleId":"227","severity":1,"message":"228","line":149,"column":30,"nodeType":"229","messageId":"230","endLine":149,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":171,"column":30,"nodeType":"229","messageId":"230","endLine":171,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":175,"column":30,"nodeType":"229","messageId":"230","endLine":175,"endColumn":31},{"ruleId":"231","severity":1,"message":"232","line":265,"column":22,"nodeType":"233","messageId":"234","endLine":265,"endColumn":24},{"ruleId":"222","severity":1,"message":"235","line":22,"column":8,"nodeType":"224","endLine":22,"endColumn":21,"suggestions":"236"},{"ruleId":"222","severity":1,"message":"237","line":41,"column":8,"nodeType":"224","endLine":41,"endColumn":10,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":3,"column":8,"nodeType":"229","messageId":"241","endLine":3,"endColumn":17},{"ruleId":"239","severity":1,"message":"242","line":5,"column":10,"nodeType":"229","messageId":"241","endLine":5,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":26,"column":8,"nodeType":"224","endLine":26,"endColumn":10,"suggestions":"243"},{"ruleId":"222","severity":1,"message":"223","line":45,"column":8,"nodeType":"224","endLine":45,"endColumn":35,"suggestions":"244"},{"ruleId":"222","severity":1,"message":"245","line":49,"column":8,"nodeType":"224","endLine":49,"endColumn":21,"suggestions":"246"},{"ruleId":"231","severity":1,"message":"232","line":104,"column":29,"nodeType":"233","messageId":"234","endLine":104,"endColumn":31},{"ruleId":"239","severity":1,"message":"247","line":1,"column":107,"nodeType":"229","messageId":"241","endLine":1,"endColumn":119},{"ruleId":"239","severity":1,"message":"248","line":1,"column":121,"nodeType":"229","messageId":"241","endLine":1,"endColumn":131},{"ruleId":"239","severity":1,"message":"249","line":1,"column":133,"nodeType":"229","messageId":"241","endLine":1,"endColumn":138},{"ruleId":"239","severity":1,"message":"250","line":1,"column":179,"nodeType":"229","messageId":"241","endLine":1,"endColumn":192},{"ruleId":"239","severity":1,"message":"251","line":41,"column":27,"nodeType":"229","messageId":"241","endLine":41,"endColumn":43},{"ruleId":"222","severity":1,"message":"252","line":48,"column":8,"nodeType":"224","endLine":48,"endColumn":10,"suggestions":"253"},{"ruleId":"239","severity":1,"message":"240","line":9,"column":8,"nodeType":"229","messageId":"241","endLine":9,"endColumn":17},{"ruleId":"239","severity":1,"message":"254","line":20,"column":18,"nodeType":"229","messageId":"241","endLine":20,"endColumn":25},{"ruleId":"239","severity":1,"message":"255","line":21,"column":20,"nodeType":"229","messageId":"241","endLine":21,"endColumn":29},{"ruleId":"239","severity":1,"message":"256","line":24,"column":11,"nodeType":"229","messageId":"241","endLine":24,"endColumn":23},{"ruleId":"222","severity":1,"message":"223","line":36,"column":8,"nodeType":"224","endLine":36,"endColumn":35,"suggestions":"257"},{"ruleId":"222","severity":1,"message":"245","line":40,"column":8,"nodeType":"224","endLine":40,"endColumn":21,"suggestions":"258"},{"ruleId":"222","severity":1,"message":"259","line":16,"column":8,"nodeType":"224","endLine":16,"endColumn":28,"suggestions":"260"},{"ruleId":"222","severity":1,"message":"261","line":29,"column":8,"nodeType":"224","endLine":29,"endColumn":15,"suggestions":"262"},{"ruleId":"222","severity":1,"message":"223","line":31,"column":7,"nodeType":"224","endLine":31,"endColumn":14,"suggestions":"263"},{"ruleId":"222","severity":1,"message":"264","line":24,"column":8,"nodeType":"224","endLine":24,"endColumn":15,"suggestions":"265"},{"ruleId":"239","severity":1,"message":"266","line":3,"column":105,"nodeType":"229","messageId":"241","endLine":3,"endColumn":112},{"ruleId":"239","severity":1,"message":"249","line":3,"column":114,"nodeType":"229","messageId":"241","endLine":3,"endColumn":119},{"ruleId":"239","severity":1,"message":"267","line":3,"column":121,"nodeType":"229","messageId":"241","endLine":3,"endColumn":131},{"ruleId":"239","severity":1,"message":"268","line":12,"column":12,"nodeType":"229","messageId":"241","endLine":12,"endColumn":23},{"ruleId":"222","severity":1,"message":"269","line":20,"column":8,"nodeType":"224","endLine":20,"endColumn":28,"suggestions":"270"},{"ruleId":"222","severity":1,"message":"259","line":24,"column":8,"nodeType":"224","endLine":24,"endColumn":15,"suggestions":"271"},{"ruleId":"222","severity":1,"message":"272","line":17,"column":8,"nodeType":"224","endLine":17,"endColumn":28,"suggestions":"273"},{"ruleId":"231","severity":1,"message":"232","line":34,"column":43,"nodeType":"233","messageId":"234","endLine":34,"endColumn":45},{"ruleId":"222","severity":1,"message":"259","line":15,"column":8,"nodeType":"224","endLine":15,"endColumn":28,"suggestions":"274"},{"ruleId":"239","severity":1,"message":"250","line":1,"column":146,"nodeType":"229","messageId":"241","endLine":1,"endColumn":159},{"ruleId":"239","severity":1,"message":"251","line":44,"column":27,"nodeType":"229","messageId":"241","endLine":44,"endColumn":43},{"ruleId":"222","severity":1,"message":"252","line":51,"column":8,"nodeType":"224","endLine":51,"endColumn":10,"suggestions":"275"},{"ruleId":"239","severity":1,"message":"276","line":3,"column":8,"nodeType":"229","messageId":"241","endLine":3,"endColumn":13},{"ruleId":"239","severity":1,"message":"276","line":1,"column":8,"nodeType":"229","messageId":"241","endLine":1,"endColumn":13},{"ruleId":"239","severity":1,"message":"277","line":3,"column":10,"nodeType":"229","messageId":"241","endLine":3,"endColumn":19},{"ruleId":"239","severity":1,"message":"267","line":3,"column":33,"nodeType":"229","messageId":"241","endLine":3,"endColumn":43},{"ruleId":"239","severity":1,"message":"276","line":2,"column":8,"nodeType":"229","messageId":"241","endLine":2,"endColumn":13},{"ruleId":"239","severity":1,"message":"276","line":2,"column":8,"nodeType":"229","messageId":"241","endLine":2,"endColumn":13},{"ruleId":"239","severity":1,"message":"278","line":3,"column":8,"nodeType":"229","messageId":"241","endLine":3,"endColumn":14},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["281"],["282"],"@typescript-eslint/no-redeclare","'i' is already defined.","Identifier","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'Auth0.getIdTokenClaims' and 'fetchData'. Either include them or remove the dependency array.",["283"],"React Hook useEffect has missing dependencies: 'Auth0', 'getEventAttendance', and 'getEventInfo'. Either include them or remove the dependency array.",["284"],"@typescript-eslint/no-unused-vars","'Auth0user' is defined but never used.","unusedVar","'Auth0Context' is defined but never used.",["285"],["286"],"React Hook useEffect has a missing dependency: 'fetchEventData'. Either include it or remove the dependency array.",["287"],"'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'DialogContent' is defined but never used.","'setValidatedName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'LoadStates'. Either include it or remove the dependency array.",["288"],"'setOpen' is assigned a value but never used.","'setOpenNE' is assigned a value but never used.","'EventContext' is assigned a value but never used.",["289"],["290"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["291"],"React Hook useEffect has a missing dependency: 'EventContext.event.tags'. Either include it or remove the dependency array.",["292"],["293"],"React Hook useEffect has missing dependencies: 'formatter' and 'getRecipents'. Either include them or remove the dependency array.",["294"],"'Tooltip' is defined but never used.","'withStyles' is defined but never used.","'activeUsers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetStats'. Either include it or remove the dependency array.",["295"],["296"],"React Hook useEffect has a missing dependency: 'GetData'. Either include it or remove the dependency array.",["297"],["298"],["299"],"'React' is defined but never used.","'Accordion' is defined but never used.","'events' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"310","fix":"316"},{"desc":"312","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"318","fix":"332"},{"desc":"314","fix":"333"},"Update the dependencies array to be: [searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, Auth0, fetchData]",{"range":"334","text":"335"},"Update the dependencies array to be: [Auth0, accessToken, fetchData]",{"range":"336","text":"337"},"Update the dependencies array to be: [Auth0.getIdTokenClaims, accessToken, fetchData]",{"range":"338","text":"339"},"Update the dependencies array to be: [Auth0, getEventAttendance, getEventInfo]",{"range":"340","text":"341"},"Update the dependencies array to be: [fetchData]",{"range":"342","text":"343"},"Update the dependencies array to be: [accessToken, openNE, open, fetchData]",{"range":"344","text":"345"},"Update the dependencies array to be: [AuthContext, fetchEventData]",{"range":"346","text":"347"},"Update the dependencies array to be: [LoadStates]",{"range":"348","text":"349"},{"range":"350","text":"345"},{"range":"351","text":"347"},"Update the dependencies array to be: [Auth0, accessToken, getData]",{"range":"352","text":"353"},"Update the dependencies array to be: [Auth0, EventContext.event.tags]",{"range":"354","text":"355"},"Update the dependencies array to be: [Auth0, fetchData]",{"range":"356","text":"357"},"Update the dependencies array to be: [Auth0, formatter, getRecipents]",{"range":"358","text":"359"},"Update the dependencies array to be: [Auth0, GetStats, accessToken]",{"range":"360","text":"361"},"Update the dependencies array to be: [Auth0, getData]",{"range":"362","text":"363"},"Update the dependencies array to be: [Auth0, GetData, accessToken]",{"range":"364","text":"365"},{"range":"366","text":"353"},{"range":"367","text":"349"},[2840,2922],"[searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, Auth0, fetchData]",[3117,3137],"[Auth0, accessToken, fetchData]",[736,749],"[Auth0.getIdTokenClaims, accessToken, fetchData]",[2009,2011],"[Auth0, getEventAttendance, getEventInfo]",[1067,1069],"[fetchData]",[2045,2072],"[accessToken, openNE, open, fetchData]",[2130,2143],"[AuthContext, fetchEventData]",[2257,2259],"[LoadStates]",[1539,1566],[1624,1637],[503,523],"[Auth0, accessToken, getData]",[1192,1199],"[Auth0, EventContext.event.tags]",[1466,1473],"[Auth0, fetchData]",[1062,1069],"[Auth0, formatter, getRecipents]",[832,852],"[Auth0, GetStats, accessToken]",[1139,1146],"[Auth0, getData]",[598,618],"[Auth0, GetData, accessToken]",[499,519],[2322,2324]]