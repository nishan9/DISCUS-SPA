[{"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx":"1","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx":"2","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx":"3","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx":"4","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx":"5","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx":"6","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx":"7","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx":"8","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx":"9","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx":"10","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx":"11","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx":"12","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx":"13","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx":"14","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx":"15","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx":"16","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx":"17","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx":"18","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx":"19","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx":"20","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx":"21","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx":"22","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx":"23","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx":"24","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx":"25","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx":"26","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx":"27","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx":"28","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx":"29","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx":"30","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx":"31"},{"size":1056,"mtime":1615117129212,"results":"32","hashOfConfig":"33"},{"size":364,"mtime":1614962382518,"results":"34","hashOfConfig":"33"},{"size":2442,"mtime":1614962382499,"results":"35","hashOfConfig":"33"},{"size":774,"mtime":1614962382517,"results":"36","hashOfConfig":"33"},{"size":1455,"mtime":1614962382516,"results":"37","hashOfConfig":"33"},{"size":22853,"mtime":1615204352851,"results":"38","hashOfConfig":"33"},{"size":1538,"mtime":1615117129208,"results":"39","hashOfConfig":"33"},{"size":1522,"mtime":1615201801780,"results":"40","hashOfConfig":"33"},{"size":4960,"mtime":1615133700555,"results":"41","hashOfConfig":"33"},{"size":1323,"mtime":1614962382500,"results":"42","hashOfConfig":"33"},{"size":1236,"mtime":1614962382499,"results":"43","hashOfConfig":"33"},{"size":5235,"mtime":1615122876513,"results":"44","hashOfConfig":"33"},{"size":10448,"mtime":1614962382514,"results":"45","hashOfConfig":"33"},{"size":9227,"mtime":1615128961963,"results":"46","hashOfConfig":"33"},{"size":17719,"mtime":1615295143953,"results":"47","hashOfConfig":"33"},{"size":5812,"mtime":1615295718533,"results":"48","hashOfConfig":"33"},{"size":1390,"mtime":1614962382510,"results":"49","hashOfConfig":"33"},{"size":1390,"mtime":1614962382516,"results":"50","hashOfConfig":"33"},{"size":496,"mtime":1614962382514,"results":"51","hashOfConfig":"33"},{"size":466,"mtime":1614962382516,"results":"52","hashOfConfig":"33"},{"size":151,"mtime":1614962382516,"results":"53","hashOfConfig":"33"},{"size":9115,"mtime":1614962382515,"results":"54","hashOfConfig":"33"},{"size":9736,"mtime":1615218441962,"results":"55","hashOfConfig":"33"},{"size":3186,"mtime":1614962382514,"results":"56","hashOfConfig":"33"},{"size":12211,"mtime":1615116661294,"results":"57","hashOfConfig":"33"},{"size":7095,"mtime":1615294778690,"results":"58","hashOfConfig":"33"},{"size":4056,"mtime":1615141795916,"results":"59","hashOfConfig":"33"},{"size":4165,"mtime":1615141925682,"results":"60","hashOfConfig":"33"},{"size":2853,"mtime":1615141559212,"results":"61","hashOfConfig":"33"},{"size":258,"mtime":1614962382514,"results":"62","hashOfConfig":"33"},{"size":1393,"mtime":1615044477992,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"5iryfj",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx",[],["138","139"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx",["140","141","142","143","144","145","146"],"import ExtensionIcon from '@material-ui/icons/Extension';\nimport { Accordion, AccordionDetails, AccordionSummary, Avatar, Box, ButtonBase, Checkbox, Chip, createStyles, Divider, FormControlLabel, FormGroup, Grid, Hidden, IconButton, InputBase, makeStyles, Paper, Switch, TextField, Theme, Typography, withStyles } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport Auth0userList from './models/Auth0userList';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Autocomplete, AutocompleteChangeReason, Pagination } from '@material-ui/lab';\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\nimport LabelIcon from '@material-ui/icons/Label';\nimport LabelOffIcon from '@material-ui/icons/LabelOff';\nimport ApartmentIcon from '@material-ui/icons/Apartment';\nimport SchoolIcon from '@material-ui/icons/School';\nimport { Link } from 'react-router-dom';\nimport Tags from './config/Tags.json'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport theme from './theme';\nconst JsonFind = require('json-find');\n\nfunction SearchUsers() {\n    const [data, setData] = useState<Auth0userList>(); \n    const [Pagetotal, setPagetotal] = useState(0); \n    const [searchTerm, setSearchTerm] = useState(\"\"); \n    const [currPage, setCurrPage] = useState(1); \n    const [DepArray, setDepArray] = useState<string[]>([]);\n    const [CareerStage, setCareerStage] = useState<string[]>([]);\n    const [tags, setTags] = useState(true)\n    const [checked, setChecked] = useState(false);\n    const [tagsArray, setTagsArray] = useState<String[]>([]); \n    const [newArr, setnewArr] = useState<String[]>([]); \n    const [IncludeAll, setIncludeAll] = useState(false); \n\n      function handleChangeCareer (checkbocName: string, state: boolean) {\n        if (state === true){\n            setCareerStage(theArray => [...theArray, checkbocName])\n        } else {\n            const result = CareerStage.filter(dep => dep !== `${checkbocName}`);\n            setCareerStage(result); \n        }\n      }\n\n      function handleChange (checkbocName: string, state: boolean) {\n        if (state === true){\n            setDepArray(theArray => [...theArray, checkbocName])\n        } else {\n            const result = DepArray.filter(dep => dep !== `${checkbocName}`);\n            setDepArray(result); \n        }\n      }\n\n      const Subjects = [\n        { Subject: 'Computer Stuff'},\n        { Subject: 'Natural Language Engineering'},\n        { Subject: 'Data Structures and Algorithms'},\n        { Subject: 'Chemistry'},\n        { Subject: 'Computer Stuff'},\n        { Subject: 'Physics'},\n\n      ];\n      \n    useEffect(() => {\n        fetchData();\n    },[searchTerm,currPage,DepArray, tagsArray, checked, IncludeAll, CareerStage]);\n\n\n    function checkChildTagsTwo(Term : String){\n        const keyify : any = (obj : any, prefix = '') => \n\n            Object.keys(obj).reduce((res :any, el) => {\n                if( Array.isArray(obj[el]) ) {\n                } else if( typeof obj[el] === 'object' && obj[el] !== null ) {\n                    return [...res, ...keyify(obj[el], prefix + el + '.')];\n                }\n                    return [...res, prefix + el];\n            }, []);\n\n        const result = keyify(JsonFind(Tags).checkKey(Term));\n        const arr = result.map( (val : string) => { return ( val.split(\".\").map( (item) => { return item}))})\n        const subjectList = ([].concat.apply([], arr))\n        return subjectList; \n    }\n\n\n    async function fetchData(){\n        \n        let filter = \"ALL\"; \n        if (DepArray.length > 0){\n            filter = \"\"; \n            for (var i = 0; i < DepArray.length; i++) {\n                if (i === 0){\n                  filter = filter.concat('user_metadata.education.school:\"' + DepArray[i] + '\"')\n                }else {\n                  filter = filter.concat( ' OR user_metadata.education.school:\"' + DepArray[i] + '\"')\n                }\n            }\n        }\n        let careerfilter = \"\"; \n        if (CareerStage.length > 0){\n            for (var i = 0; i < CareerStage.length; i++) {\n                if (i === 0){\n                    careerfilter = careerfilter.concat('user_metadata.education.CareerStage:\"' + CareerStage[i] + '\"')\n                  }else {\n                    careerfilter = careerfilter.concat( ' OR user_metadata.education.CareerStage:\"' + CareerStage[i] + '\"')\n                  } \n            }\n        }\n\n        if (searchTerm.length > 2){\n            let FinalQuery = \"\"\n\n            if (DepArray.length > 0){\n                FinalQuery = \"name:*\" + searchTerm + \"* AND \"+ filter; \n            }else {\n                FinalQuery = \"name:*\" + searchTerm + \"*\"; \n            }\n\n            if (CareerStage.length > 0){\n                FinalQuery = \"AND \" + careerfilter; \n            }\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Search/${FinalQuery}/${currPage - 1}`);\n            const data : Auth0userList = await response.json();\n            setData(data);\n            setPagetotal(Math.ceil(data.total/10))\n\n        } else if (tagsArray.length > 0){\n            let tagfilter = \"\"\n            if (checked === true){\n                //Interests \n                for (var i = 0; i < tagsArray.length; i++) {\n                    if (i === 0){\n                        tagfilter = tagfilter.concat('user_metadata.interest:\"' + tagsArray[i] + '\"')\n                    }else {\n                        tagfilter = tagfilter.concat(' AND user_metadata.interset:\"' + tagsArray[i] + '\"')\n                    }\n                }\n            }else {\n                //Expertise \n                for (var i = 0; i < tagsArray.length; i++) {\n                    if (i === 0){\n                        tagfilter = tagfilter.concat('user_metadata.expertise:\"' + tagsArray[i] + '\"')\n                    }else {\n                        tagfilter = tagfilter.concat(' AND user_metadata.expertise:\"' + tagsArray[i] + '\"')\n                    }\n                }\n            }\n\n            let newstring = \"\"\n            if (IncludeAll === true){\n                if (checked === true){\n                    newstring = newstring.concat(' OR user_metadata.interest:\"' + newArr[i] + '\"')\n                } \n                else{\n                    for (var i = 0; i < newArr.length; i++) {\n                        newstring = newstring.concat(' OR user_metadata.expertise:\"' + newArr[i] + '\"')\n                    }\n                }\n            }\n\n            tagfilter = tagfilter.concat(newstring); \n\n            if (DepArray.length > 0){\n                tagfilter = tagfilter.concat(\" AND \"); \n                tagfilter = tagfilter.concat(filter); \n            }\n\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Search/${tagfilter}/${currPage - 1}`);\n            const data : Auth0userList = await response.json();\n            setData(data);\n            setPagetotal(Math.ceil(data.total/10))\n        }\n        \n        else {\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Page/${currPage - 1}/${filter}`);\n            const data : Auth0userList = await response.json();\n            setData(data);\n            setPagetotal(Math.ceil(data.total/10))\n        }\n    }\n\n        \n    function Changetag(){\n        setTags(false)\n    }\n    function Untag(){\n        setTags(true);\n    }\n\n    const toggleChecked = () => {\n        setChecked((prev) => !prev);\n      };\n\n    function addtoState(value : { Subject : string}[], reason : AutocompleteChangeReason){\n        let newTags : string [] = []; \n        value.map( x => {\n            const tempArr : string []= checkChildTagsTwo(x.Subject); \n            tempArr.map( item => newTags.push(item))\n        })\n        setnewArr(newTags); \n        setTagsArray(value.map ( x => x.Subject)); \n    }\n\n\n\n    const useStyles = makeStyles({\n        root: {\n            padding: '2px 4px',\n            display: 'flex',\n            alignItems: 'center',\n            width: 400,\n            margin : '15px'\n        },\n        box: {\n          textAlign: 'center', \n          padding : 4,\n          borderRadius : 4,\n          background : \"white\", \n        }, \n        search : {\n            display: 'inline-flex',\n            VerticalAlign: 'text-bottom',\n            BoxSizing: 'inherit',\n            textAlign: 'center',\n            AlignItems: 'center', \n        },\n        color : {\n            padding : '15px',\n            backgroundColor : '#EBEBEB',\n        }, \n        large: {\n            width: 90, \n            height: 90, \n        },\n        input: {\n            marginLeft: theme.spacing(1),\n            flex: 1,\n          },\n          iconButton: {\n            padding: 10,\n          },\n          divider: {\n            height: 28,\n            margin: 4,\n          },\n          accordian : {\n            backgroundColor : \"transparent\", \n            borderRadius : 10\n          },\n          MuiAccordionroot: {\n            \"&.MuiAccordion-root:before\": {\n              backgroundColor: \"#FAFAFA\"\n        }},\n    });\n\n    const AntSwitch = withStyles((theme: Theme) =>\n        createStyles({\n        root: {\n        width: 28,\n        height: 16,\n        padding: 0,\n        display: 'flex',\n        },\n        switchBase: {\n        padding: 2,\n        color: theme.palette.grey[500],\n        '&$checked': {\n            transform: 'translateX(12px)',\n            color: theme.palette.common.white,\n            '& + $track': {\n            opacity: 1,\n            backgroundColor: theme.palette.primary.main,\n            borderColor: theme.palette.primary.main,\n            },\n        },\n        },\n        thumb: {\n        width: 12,\n        height: 12,\n        boxShadow: 'none',\n        },\n        track: {\n        border: `1px solid ${theme.palette.grey[500]}`,\n        borderRadius: 16 / 2,\n        opacity: 1,\n        backgroundColor: theme.palette.common.white,\n        },\n        checked: {},\n    }),\n    )(Switch);\n\n    const classes = useStyles();\n\n    return (\n        <Grid container>\n            <Grid container justify=\"center\" className={classes.color}>                    \n                    <Paper component=\"form\" className={classes.root}>\n                        {tags ?\n                        <>\n                            <InputBase\n                             className={classes.input}\n                             placeholder=\"Search\"\n                             inputProps={{ 'aria-label': 'Search' }} />\n                            <IconButton disabled className={classes.iconButton} aria-label=\"search\">\n                                <SearchIcon />\n                            </IconButton>\n                            <Divider className={classes.divider} orientation=\"vertical\" />\n                            <ButtonBase onClick={Changetag}  className={classes.iconButton} aria-label=\"directions\">\n                                    <LabelIcon/>\n                            </ButtonBase>\n                        </>\n                        :\n                        <>\n                            <Autocomplete\n                                multiple fullWidth onChange={(event, value, reason) => addtoState(value, reason)}\n                                className={classes.input} options={Subjects}\n                                getOptionLabel={(option) => option.Subject}\n                                renderInput={(params) => (\n                                    <TextField {...params} variant=\"outlined\" size=\"small\" placeholder=\"Search Tags\" />\n                                )}\n                            />\n                            <IconButton disabled className={classes.iconButton} aria-label=\"search\">\n                                <SearchIcon />\n                            </IconButton>\n                            <Divider className={classes.divider} orientation=\"vertical\" />\n                            <ButtonBase onClick={Untag}  className={classes.iconButton} aria-label=\"directions\">\n                                    <LabelOffIcon/>\n                            </ButtonBase>\n                        </>\n                        }\n                    </Paper>\n\n                    {tags ?  \" \" : \n                        <Grid container justify=\"center\"> \n                            <>\n                                <Box alignContent=\"flex-start\">\n                                <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n                                    <Grid item>Expertise</Grid>\n                                    <Grid item>\n                                        <AntSwitch checked={checked} onChange={toggleChecked} name=\"checkedC\" />\n                                    </Grid>\n                                    <Grid item>Interests</Grid>\n                                </Grid>\n                                </Box>\n                            </>\n                        </Grid>\n                    }\n\n            </Grid>\n\n            <Grid container spacing={10} justify=\"center\">\n                <Grid item xs={12} lg={3}>\n                \n                <Grid container justify=\"center\">\n\n                { tags ? \"\" :\n                    <>\n                        <FormControlLabel\n                        value=\"start\"\n                        control={\n                            <Switch\n                             checked={IncludeAll}\n                             onChange={(e) => setIncludeAll(e.target.checked)}\n                             name=\"Search\"\n                             inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        }\n                        label=\"Search within tag heirachy\"\n                        labelPlacement=\"start\"\n                        />\n                        \n                        \n                    </>\n                }\n\n                        <Accordion\n                            defaultExpanded\n                            elevation={0}\n                            classes={{\n                                root: classes.MuiAccordionroot\n                            }}\n                            className={classes.accordian}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                            <Box style={{ display: \"flex\" , width : \"100%\" }} m=\"auto\" px={1} fontSize={25} > <AssignmentIndIcon  fontSize={\"large\"} /> Departments </Box>\n\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <FormGroup>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"University of Sussex Business School\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\" >University of Sussex Business School</Typography>} />\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Education and Social Work\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Education and Social Work</Typography>} />    \n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Engineering and Informatics\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Engineering and Informatics</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Global Studies\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Global Studies</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Law, Policitics and Sociology\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Law, Policitics and Sociology</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Life Sciences\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Life Sciences</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Mathematical and Physical Sciences\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Mathematical and Physical Sciences</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Media, Arts and Humanities\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Media, Arts and Humanities</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"School of Psychology\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">School of Psychology</Typography>}/>\n                                    <FormControlLabel control={ <Checkbox onChange={(e) => handleChange(\"Brighton and Sussex Medical School\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">Brighton and Sussex Medical School</Typography>}/>\n                                </FormGroup> \n                            </AccordionDetails>\n                        </Accordion>\n\n                        <Accordion \n                            elevation={0}\n                            classes={{\n                                root: classes.MuiAccordionroot\n                            }}\n                        className={classes.accordian}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n\n                        <Box style={{ display: \"flex\" , width : \"100%\" }} m=\"auto\" px={1} fontSize={25} > <ExtensionIcon  fontSize={\"large\"} /> Career Stage</Box>\n\n                        </AccordionSummary>\n                        <AccordionDetails>\n                        <FormGroup>\n                            <FormControlLabel control={<Checkbox onChange={(e) => handleChangeCareer(\"UG\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\" >UG</Typography>} />\n                            <FormControlLabel control={<Checkbox onChange={(e) => handleChangeCareer(\"Msc\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">Msc</Typography>}/>\n                            <FormControlLabel control={<Checkbox onChange={(e) => handleChangeCareer(\"PhD\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">PhD</Typography>} />    \n                            <FormControlLabel control={<Checkbox onChange={(e) => handleChangeCareer(\"Postdoc\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">Postdoc</Typography>}/>\n                            <FormControlLabel control={<Checkbox onChange={(e) => handleChangeCareer(\"Professional Services\", e.target.checked)} />} label={<Typography variant=\"body2\" color=\"textPrimary\">Professional Services</Typography>}/>\n                        </FormGroup>\n                        </AccordionDetails>\n                    </Accordion>\n                    </Grid>\n                </Grid>\n                \n                <Hidden only=\"sm\">\n                    <Grid item lg={1}></Grid>\n                </Hidden>\n\n                <Grid item xs={11} lg={7}>\n                <Grid container>\n                            <Grid item> \n                                {data ? data.users.map( e => (\n                                <>\n                                {e.user_metadata !== null ?\n                                <Grid container direction=\"row\" alignItems=\"center\">\n                                    <Link to={`/users/${e.user_id}`} style={{ textDecoration: 'none', color : 'black' }}>\n                                        <Box style={{ display : \"flex\"}} >\n                                        <Box my={6} >\n                                            <Avatar alt=\"Cindy Baker\" src={e.picture} className={classes.large} />\n                                        </Box>\n                                        <Box m={5} mt={7} style={{ display : \"flex\", flexDirection : \"column\" }} >\n                                            <Typography variant=\"h5\"> {e.name}</Typography>\n                                            <Grid container direction=\"row\" alignItems=\"center\">\n                                                <Box pt={5}></Box>\n                                                <Box pr={1}><SchoolIcon /></Box>  {e.user_metadata.education.school}\n                                                <Box pr={3}></Box><ApartmentIcon /> {e.user_metadata.education.department}\n                                            </Grid>\n                                            <Box> \n                                            {e.user_metadata.research} \n                                                <Box>\n                                                    <Typography>Expertise</Typography> - {e.user_metadata.expertise.map(e => <Chip style={{backgroundColor:'#24CAC3', margin : 3}} label={e}></Chip>)}\n                                                    <Typography>Interest</Typography>  - {e.user_metadata.interest.map(e => <Chip style={{backgroundColor:'#24CAC3', margin : 3}} label={e}></Chip>)}\n                                                </Box>\n                                            </Box>\n                                        </Box>\n                                        </Box>\n                                        <Divider />\n                                    </Link>\n                                </Grid> \n                                : \"\"\n                                }\n                                </>\n                                )) : <> </>}\n                                \n                            </Grid>\n                        </Grid>\n                        <Box my={3}>\n                            <Pagination \n                            count={Pagetotal} \n                            color=\"primary\" \n                            page={currPage}\n                            onChange={(event, page) => setCurrPage(page)}\n                            />\n                        </Box>\n                </Grid>\n            </Grid>\n          \n        </Grid>\n    ); \n}\n\n\nexport default SearchUsers","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx",["147","148","149","150"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport { Box, ButtonBase, Grid } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport PeopleIcon from '@material-ui/icons/People';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport EventIcon from '@material-ui/icons/Event';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart';\nimport discus from './assets/discus.svg'; \n\nconst drawerWidth = 120;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    uirotate : {\n      transition : '0.5s', \n      '&:hover' : {\n        transform : \"rotate(60deg)\",\n      },\n    },\n\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    ButtonBase : {\n      paddingTop : '30px',\n      paddingBottom : '30px' \n    },\n    GridStack : {\n      height :`calc(100vh - ${drawerWidth}px)`\n    }\n  }),\n);\n\ninterface Props {\n  window?: () => Window;\n}\n\nexport default function ResponsiveDrawer(props: Props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const history = useHistory(); \n  const Auth0 = useAuth0();\n\n  \n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      \n      <Grid\n          container\n          spacing={1}\n          justify=\"center\"\n          direction=\"column\"\n          className={classes.GridStack}\n      > \n        <ButtonBase className={classes.ButtonBase} color=\"inherit\" onClick={() => history.push(\"/\")}>\n          <img className={classes.uirotate} src={discus} height='auto' width='60px' alt=\"DISCUS Logo\"/>\n        </ButtonBase>\n\n        <ButtonBase className={classes.ButtonBase} color=\"inherit\" onClick={() => history.push(\"/searchUsers\")}><PeopleIcon style={{ fontSize: 50 }}/>\n        </ButtonBase>\n\n        <ButtonBase className={classes.ButtonBase} color=\"inherit\" onClick={() => history.push(\"/Events\")}><EventIcon style={{ fontSize: 50 }}/>\n        </ButtonBase>\n\n        <ButtonBase className={classes.ButtonBase} color=\"inherit\" onClick={() => history.push(\"/AdminPanel\")}><BubbleChartIcon style={{ fontSize: 50 }}/>\n        </ButtonBase>\n\n        <ButtonBase className={classes.ButtonBase} color=\"inherit\" onClick={() => Auth0.logout()}><ExitToAppIcon style={{ fontSize: 50 }}/>\n        </ButtonBase>\n\n      </Grid>\n    </div>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"secondary\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n    </>\n  );\n}\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx",["151"],"import { useAuth0 } from '@auth0/auth0-react';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Auth0Context } from './context/Auth0Context';\nimport Dashboard from './components/Dashboard'\nimport EnrichProfile from './components/EnrichProfile';\nimport EditUserProfile from './components/EditUserProfile';\n\nfunction WelcomeScreen() {\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const AuthContext = useContext(Auth0Context)\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n\n    useEffect(() => {\n        fetchData();\n    }, [accessToken])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    return (\n        <>\n            { AuthContext.data.user_metadata === null ? \n                 <EnrichProfile/>\n                : AuthContext.edit === false ?\n                 <Dashboard/>\n                :\n                 <EditUserProfile/>\n            }\n        </>\n    )}\n\n\nexport default WelcomeScreen","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx",["152","153"],"import { useAuth0 } from '@auth0/auth0-react';\nimport { Avatar, Box, createStyles, Grid, makeStyles, Theme, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport EventAttendance from '../../models/EventAttendance';\nimport { CSVLink } from \"react-csv\";\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core'\nimport MailIcon from '@material-ui/icons/Mail';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SendEmail from '../SendEmail';\nimport events from '../../assets/events.svg'; \nimport Moment from 'react-moment';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\nfunction ViewEventEntity(props : any) {\n\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n    const Auth0 = useAuth0();\n    const [eventAttendance,setEventAttendance ] = useState<EventAttendance>(); \n    const headers = [ { label:'Name',key:'name'},{label:'Email Address',key:'email'},{label:'Expertise',key:'user_metadata.expertise'}, {label:'Interests',key:'user_metadata.interest' },];\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        getEventInfo(); \n        getEventAttendance(); \n    }, [])\n\n    const handleOpen = () => {\n        setOpen(true);        \n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    async function getEventInfo(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${props.match.params.event_id}`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        EventContext.setEvent(await response.json()); \n    }\n\n    async function getEventAttendance(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/EventAttendance/${props.match.params.event_id}`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        setEventAttendance(await response.json()); \n    }\n\n    const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            minHeight : '100vh', \n            backgroundImage: `url(${events})`, \n            backgroundRepeat : \"no-repeat\",\n            backgroundSize: '40%', \n            backgroundPosition : 'right bottom',\n            opacity : '0.9'\n        },\n        large: {\n            width: theme.spacing(20),\n            height: theme.spacing(20),\n        },\n        glass : {\n            backgroundColor: 'rgba(255,255,255,0.9)',  \n        }\n        }),\n    );\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n        <p>Event ID : {EventContext.event.id} </p>\n            <Grid\n             container\n             spacing={0}\n             direction=\"column\"\n             alignItems=\"center\"\n             justify=\"center\"\n             style={{ minHeight: '100vh' }}\n             >\n            <Grid item xs={6}>\n              <Box className={classes.glass} p={1} border={3} borderRadius={4}>\n                <Typography>{EventContext.event.title}</Typography>\n                <Typography>Start Time -  <Moment format=\"DD/MM/YYYY HH:mm\">{EventContext.event.dateTime}</Moment></Typography>\n                <Typography>Finish Time - <Moment format=\"DD/MM/YYYY HH:mm\">{EventContext.event.finishedDateTime}</Moment> </Typography>\n                <Typography> Tags - {EventContext.event.tags}</Typography>\n                <Typography variant=\"body2\">{EventContext.event.url}</Typography>\n                <Typography variant=\"body2\"> Is DISCUS : {EventContext.event.isDISCUS.toString()}</Typography>  \n                <Typography variant=\"h4\"> Attendees</Typography>   \n                {eventAttendance?.users.map (e => \n                <Grid container>  \n                <Avatar alt=\"Cindy Baker\" src={e.picture} />\n                <Typography>{e.name}</Typography>\n                </Grid>\n                )}\n                <Box>\n                    Total users {eventAttendance?.total}\n                </Box>\n\n                <Button onClick={handleOpen}><MailIcon/>Email Users</Button>\n                {eventAttendance ? <CSVLink filename={EventContext.event.title} headers = {headers} data={eventAttendance.users}><GetAppIcon/></CSVLink>  : \"\"}\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"id\">\n                <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1}> <Typography variant=\"h4\">Send Emails</Typography></Box>\n                <Box>\n                <IconButton onClick={handleClose}> <CancelIcon /> </IconButton>\n                </Box>\n                </Box>\n                </DialogTitle>\n                    <DialogContent>\n                        <SendEmail/>\n                    </DialogContent>\n                </Dialog>\n\n            </Box>\n              \n            </Grid>  \n\n\n\n \n\n\n            </Grid> \n        </Grid>\n    )\n}\n\nexport default ViewEventEntity\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx",["154","155","156","157","158","159"],"import { Avatar, Box, Button, Chip, createStyles, FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, TextField, Theme, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react'\nimport Auth0user from '../models/Auth0user';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Autocomplete, AutocompleteChangeReason } from '@material-ui/lab';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { Auth0Context } from '../context/Auth0Context'\nimport DepartmentObj from '../config/Department';\n\nfunction ViewUser(props : any) {\n    const [loginPressed, setLoginPressed] = useState(false);\n    const [data, setData] = useState<Auth0user>()\n    const user_id = props.match.params.user_id; \n    const [editMode, setEditMode] = useState(false);\n    const [interests, setInterests] = useState<string[]>([])\n    const AuthContext = useContext(Auth0Context)\n\n    console.log(props)\n    console.log(\"fdsfds\")\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    async function fetchData(){\n        console.log(`${process.env.REACT_APP_API_URL}/UserSearch/${user_id}`); \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/${user_id}`);\n        setData(await response.json());\n    }\n\n    function changeEdit(){\n        if (data !== undefined){\n            setInterests(data?.user_metadata.interest)\n        }\n        setEditMode(true); \n    }\n\n    function Cancel(){\n        setEditMode(false); \n    }\n\n    async function saveData(e : any){\n        e.preventDefault();\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/User/`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"POST\", \n            body: JSON.stringify(data),\n        })\n        if(response.ok){\n            alert(\"Success\"); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function handleDelete(e : string){\n        console.log(e)\n    }\n\n\n    function addtoState(value : { Subject : string}[], reason : AutocompleteChangeReason){\n        let newTags : string [] = []; \n        setInterests(newTags); \n        setInterests(value.map ( x => x.Subject)); \n    }\n    \n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n        root: {\n            display: 'flex',\n            '& > *': {\n            margin: theme.spacing(1),\n            },\n        },\n        large: {\n            width: theme.spacing(35),\n            height: theme.spacing(35),\n        },\n        }),\n    );\n\n    const classes = useStyles();\n    \n    return (\n        <div>\n        {editMode ? \n            <div>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Box pt={3} >\n                        <Typography variant=\"h3\">{data?.name}</Typography>\n                    </Box>\n                </Grid>\n            <Grid item xs={3}>\n                <Box className=\"small\" m={2} p={6} borderRadius=\"borderRadius\">\n                    <Avatar alt=\"Remy Sharp\" className={classes.large} src={data ? data?.picture : \"\"}/>\n                </Box>\n                <Box m={1} p={2} bgcolor=\"info.main\" borderRadius=\"borderRadius\">\n                    <Typography variant=\"h3\">Points</Typography>\n                    <Typography variant=\"h4\">5 Points</Typography>\n                </Box>\n            </Grid>\n        <Grid item xs={9} >\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}> \n            <div>                \n                <Button onClick={changeEdit}> <SaveIcon/> </Button>\n                <Button onClick={Cancel}> <CancelIcon/> </Button>\n                <Typography variant=\"body1\">Name <TextField defaultValue={data?.name}/></Typography>\n                <Typography variant=\"body1\">\n                    <TextField \n                        defaultValue={data?.email}\n                    />\n                </Typography>\n\n                <Box my={3}>\n            <FormControl variant=\"outlined\" style={{minWidth: 120}}>\n                <InputLabel>School</InputLabel>\n                <Select \n                defaultValue={data?.user_metadata.education.school}\n                label=\"School\" >\n                    <MenuItem value=\"University of Sussex Business School\">University of Sussex Business School</MenuItem>\n                    <MenuItem value=\"School of Education and Social Work\">School of Education and Social Work</MenuItem>\n                    <MenuItem value=\"School of Engineering and Informatics\">School of Engineering and Informatics</MenuItem>\n                    <MenuItem value=\"School of Global Studies\">School of Global Studies</MenuItem>\n                </Select>\n            </FormControl>\n        </Box>\n\n        <Box my={3}> \n            <FormControl variant=\"outlined\" style={{minWidth: 200}}>\n            <InputLabel>Department</InputLabel>\n                <Select\n                label=\"Department\"\n                >\n                {   data?.user_metadata.education.school === \"University of Sussex Business School\" ?  \n                (DepartmentObj['University of Sussex Business School'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem> \n                ))\n                : data?.user_metadata.education.school === \"School of Education and Social Work\" ?  \n                (DepartmentObj['School of Education and Social Work'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Engineering and Informatics\" ?  \n                (DepartmentObj['School of Engineering and Informatics'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Global Studies\" ?  \n                (DepartmentObj['School of Global Studies'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Law, Politics and Sociology\" ?  \n                (DepartmentObj['School of Law, Politics and Sociology'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Life Sciences\" ?  \n                (DepartmentObj['School of Life Sciences'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Media, Arts and Humanities\" ?  \n                (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))                                \n                : data?.user_metadata.education.school === \"School of Media, Arts and Humanities\" ?\n                (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))  \n                : <p></p>\n                }\n                </Select>\n            </FormControl>\n            </Box>\n\n                <Autocomplete\n                    multiple\n                    fullWidth\n                    onChange={(event, value, reason) => addtoState(value, reason)}\n                    id=\"multiple-limit-tags\"\n                    options={Subjects}\n                    getOptionLabel={(option) => option.Subject}\n                    renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" placeholder=\"Add Tags\" />\n                    )}\n                />\n\n                {data?.user_metadata.expertise.map(e => <Chip label={e} ></Chip>)}\n                \n            </div>\n        </Box>\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}>\n            <div >\n                <Typography variant=\"body1\"></Typography>\n                <Typography variant=\"body1\"></Typography>\n                \n                <TextField id=\"outlined-basic\"           \n                    multiline\n                    rows={4} \n                    fullWidth\n                    label=\"Research\" \n                    variant=\"outlined\" \n                    defaultValue={data?.user_metadata.research}/>\n                    \n                {data?.user_metadata.interest.map(e => <Chip label={e}></Chip>)}\n            </div>\n        </Box>\n    </Grid>\n</Grid>\n</div>\n        :\n        \n        <Grid>\n<div>\n<Grid container spacing={3}>\n    <Grid item xs={12}>\n        <Box pt={3} >\n            <Typography variant=\"h3\">{data?.name}</Typography>\n        </Box>\n    </Grid>\n    <Grid item xs={3}>\n        <Box className=\"small\" m={2} p={6} borderRadius=\"borderRadius\">\n            <Avatar alt=\"Remy Sharp\" className={classes.large} src={data ? data?.picture : \"\"}/>\n        </Box>\n        <Box m={1} p={2} bgcolor=\"info.main\" borderRadius=\"borderRadius\">\n            <Typography variant=\"h3\">Points</Typography>\n            <Typography variant=\"h4\">5 Points</Typography>\n        </Box>\n    </Grid>\n    <Grid item xs={8} >\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}> \n            <div>\n                {AuthContext?.data.app_metadata === null ? <></> : <p> <Button onClick={changeEdit}> <EditIcon/> </Button> </p>}\n                <Typography variant=\"body1\">Name {data?.name}</Typography>\n                <Typography variant=\"body1\">{data?.email}</Typography>\n                <Typography>{data?.user_metadata.education.school}</Typography>\n                <Typography>{data?.user_metadata.education.department}</Typography>\n                {data?.user_metadata.expertise.map(e => <Chip label={e}></Chip>)}\n            </div>\n        </Box>\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}>\n        <Typography variant=\"h4\">Academic</Typography>\n            <div >\n            <Typography variant=\"body1\"></Typography>\n            <Typography variant=\"body1\"></Typography>\n            <Typography>{data?.user_metadata.research}</Typography>\n                {data?.user_metadata.interest.map(e => <Chip label={e}></Chip>)}\n            </div>\n        </Box>\n    </Grid>\n</Grid>\n</div>\n</Grid>\n\n        }\n        </div>\n    )\n}\n\nconst Subjects = [\n    { Subject: 'Computer Stuff'},\n    { Subject: 'Natural Language Engineering'},\n  ];\n\nexport default ViewUser\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx",["160","161"],"import { Box, Button, Checkbox, Dialog, DialogContent, DialogTitle, Fab, Grid, IconButton, makeStyles, Typography } from '@material-ui/core';\nimport React, {useState, useEffect, useContext} from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport AddIcon from '@material-ui/icons/Add';\nimport CreateEvent from './forms/CreateEvent'\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Auth0Context } from '../../context/Auth0Context';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Link } from 'react-router-dom';\nimport EditEvent from './EditEvent'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport Metadata from '../../models/Metadata';\nimport Auth0user from '../../models/Auth0user';\nimport Loading from '../../config/Loading'; \nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\nimport Moment from 'react-moment';\n\nfunction UpcomingEvents() {\n    const [data, setData] = useState<EventEntity[]>([]);\n    const [open, setOpen] = useState(false);\n    const [openNE, setOpenNE] = useState(false); \n    const Auth0 = useAuth0();\n    const AuthContext = useContext(Auth0Context);\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n\n\n\n    useEffect(() => {\n        fetchData();\n        fetchEventData();\n    }, [openNE, open])\n\n    async function fetchData(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${token}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function fetchEventData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Upcoming`);\n        const recieved = await response.json();\n        setData(recieved);\n    }\n\n    const handleOpen = (i : number) => {\n        EventContext.setEvent(data[i]); \n        setOpen(true);        \n    };\n\n    const handleOpenNE = () => {\n        setOpenNE(true);\n    }\n\n    async function deleteEvent(i : number){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${i}`, {\n            method : \"DELETE\"\n        });\n        console.log(response);\n        fetchEventData(); \n    }\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleCloseNE = () => {\n        setOpenNE(false);\n        fetchEventData(); \n    };\n\n\n    async function updateStatus(stat : any, id : number){\n        let obj; \n        if (stat === true){\n            obj = {...AuthContext.data, user_metadata : {...AuthContext.data.user_metadata, events : AuthContext.data.user_metadata.events.concat([id])} }\n            AuthContext.setData(obj)\n        }else{\n            obj = {...AuthContext.data, user_metadata : {...AuthContext.data.user_metadata, events : AuthContext.data.user_metadata.events.filter(item => item !== id)} }\n            AuthContext.setData(obj)\n        }\n        sendreq(obj!);\n    }\n\n    async function sendreq(obj : Auth0user){\n\n        const newEvent : Metadata = { user_metadata : obj.user_metadata }\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, {\n            headers : {\n                'Authorization': `Bearer ${accessToken}`,\n                \"Content-Type\" : \"application/json\" \n            }, \n            method:\"PATCH\", \n            body: JSON.stringify(newEvent),\n        })\n\n        if(response.ok){\n            console.log(\"succ add\")\n        }else{\n            console.error(\"Publishing failed\");\n        }\n        fetchEventData();\n    }\n\n\n    const useStyles = makeStyles(theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    paper: {\n        overflowY: 'unset',\n    },\n\n    customizedButton: {\n        padding: \"10px\",\n        position: \"absolute\",\n        right: -26,\n        top: -27,\n    }, \n    box : {\n        position : \"relative\", \n    }, \n    eventContainer : {\n        backgroundColor : \"yellow\", \n    }\n\n    }));\n    const classes = useStyles();\n\n    return (\n        <div>\n            {data.length > 0 ? \n            <Grid container>\n\n            {data?.map ((e,i) => \n            <Grid item xs={12} md={4}>\n                <Box borderRadius=\"borderRadius\" border={2} m={3} py={2} className={classes.box}>              \n                    {AuthContext.data.app_metadata !== null ? \n                    <div className={classes.customizedButton} >\n                        <Button style={{ borderRadius: 50 }}variant=\"contained\" onClick={() => { handleOpen(i)}} color=\"secondary\" type=\"submit\" value=\"Submit\"> <EditIcon/> </Button>\n                        <Button style={{ borderRadius: 50 }} variant=\"contained\" onClick={() => { deleteEvent(e.id)}} color=\"primary\" type=\"submit\" value=\"Submit\"> <DeleteIcon /> </Button>\n                    </div>\n                    : \"\" }\n                        <Grid container>\n                            <Grid item xs={10}>\n                                <Link to={`/events/${e.id}`} style={{ textDecoration: 'none', color : 'black' }}>\n                                    <Grid container>\n                                        <Grid item xs={5}>\n                                            <Box className={classes.eventContainer} borderRadius={3} p={1} mx={2}>\n                                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                                                    <Grid item><Typography><Moment format=\"MMMM\">{e.dateTime.toString()}</Moment> </Typography></Grid>\n                                                    <Grid item><Typography><Moment format=\"Do\">{e.dateTime.toString()}</Moment></Typography></Grid>\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n                                        <Grid item xs={7}>\n                                            <Typography gutterBottom>{e.title}</Typography>\n                                            <Grid container>\n                                                <ScheduleIcon/><Typography><Moment format=\"LT\">{e.dateTime.toString()}</Moment></Typography>  -  <Typography><Moment format=\"LT\">{e.finishedDateTime.toString()}</Moment></Typography>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Link> \n                            </Grid>\n                            <Grid item xs={2}>\n                                <Typography>Going?</Typography> \n                                <Checkbox\n                                    icon={<CheckCircleOutlinedIcon  \n                                    style={{ fill: '#8BC34A'}} />}\n                                    checkedIcon={<CheckCircleIcon style={{ fill: '#8BC34A' }} />}\n                                    onChange={status => updateStatus(status.target.checked, e.id)}\n                                    inputProps={{ 'aria-label': 'primary checkbox' }}\n                                    checked={AuthContext.data.user_metadata.events.includes(e.id)}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>\n            )} \n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">Edit the Event</DialogTitle>\n                        <DialogContent>\n                               <EditEvent dialog={() => setOpen(false)}/>\n                        </DialogContent>\n                    </Dialog> \n\n            </Grid>\n            : <Loading/>  }\n                            \n            <Dialog open={openNE} onClose={handleCloseNE} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"id\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1}> <Typography variant=\"h4\">Create an event</Typography></Box>\n                    <Box>\n                        <IconButton onClick={handleCloseNE}> <CancelIcon /> </IconButton>\n                    </Box>\n                </Box>\n                </DialogTitle>\n                <DialogContent>\n                    <CreateEvent dialog={() => setOpenNE(false)}/>\n                </DialogContent>\n            </Dialog>\n\n            <Fab size=\"large\" color=\"primary\" aria-label=\"add\" className={classes.fab}>\n                <Button onClick={(e) => handleOpenNE()} > <AddIcon/> </Button>\n            </Fab>\n            \n        </div>\n    )\n}\n\nexport default UpcomingEvents","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx",["162","163"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx",["164","165","166"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx",["167"],"import DateFnsUtils from '@date-io/date-fns'\nimport { TextField, FormControl, InputLabel, Select, MenuItem, Grid, FormControlLabel, Checkbox, Box, Chip, Button } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useSnackbar } from 'notistack'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext'; \nimport { AllSubjects } from '../../config/TagSystem'\n\ninterface EditEventProps{\n    dialog : Function\n}\n\nfunction EditEvent(props : EditEventProps) {\n    const EventContext = useContext(EditEventContext)\n    const [tags, setTags] = useState<string[]>([]);\n    const { enqueueSnackbar } = useSnackbar();\n    let mes = \"\"\n\n    useEffect(() => {\n        setTags(EventContext.event.tags.split(',')); \n    }, [])\n\n    function changeTags(value : string | null){\n        mes = \"\"\n        if (value !== null ){\n            if (tags.includes(value)){   \n            }else{\n                setTags(state => [...state, value])\n            }\n        }\n    }\n    async function UpdateEvent(e : any){\n        e.preventDefault();\n    \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n        Alltags = Alltags.slice(0,-1)\n        EventContext.event.tags = Alltags; \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${EventContext.event.id}`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"POST\", \n            body: JSON.stringify(EventContext.event),\n        })\n        if(response.ok){\n            enqueueSnackbar('Event has been updated', { variant : \"success\" });\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function changeChips(e : String){\n        setTags(tags.filter(subject => subject !== e))\n    }\n\n    const handleStartDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, dateTime: date}); \n    };\n\n    const handleFinishDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, finishedDateTime : date}); \n    };\n\n    return (\n        <div>\n            <Box my={2}>\n                <TextField\n                    autoFocus\n                    variant=\"outlined\" \n                    fullWidth\n                    defaultValue={EventContext.event.title}\n                    onChange={(e) => {EventContext.setEvent({...EventContext.event, title : e.target.value})}}\n                    margin=\"normal\" \n                    label=\"Title\"\n                />\n            </Box>\n\n            <Box my={2}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n                    <Grid container justify=\"space-around\">\n                        <Box px={2}> \n                            <KeyboardDatePicker\n                                disableToolbar\n                                variant=\"inline\"\n                                format=\"MM/dd/yyyy\"\n                                disablePast={true}\n                                margin=\"normal\"\n                                id=\"date-picker-inline\"\n                                label=\"Pick a Date\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}/>\n                        </Box>\n\n                        <Box px={2}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Pick a Time\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}/>\n                        </Box>\n\n                    </Grid>\n                </MuiPickersUtilsProvider>\n            </Box>\n\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        disablePast={true}\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Date\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}/>\n                    <KeyboardTimePicker\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        label=\"Pick a Time\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}/>\n                </Grid>\n            </MuiPickersUtilsProvider>\n\n            <FormControl variant=\"outlined\" className=\"formcontrol\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item xs={6}>\n                    <FormControl variant=\"outlined\" className=\"formcontrol\">\n                        <InputLabel>Type</InputLabel>\n                        <Select \n                            style={{ minWidth: 100 }}\n                            label=\"Event Type\"\n                            defaultValue={EventContext.event.type}\n                            onChange={(e : React.ChangeEvent<any>) => \n                                {EventContext.setEvent({...EventContext.event, type : e.target.value})}}\n                            >\n                            <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                            <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                            <MenuItem value=\"Networking\">Networking</MenuItem>\n                            <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <FormControlLabel\n                        control={\n                        <Checkbox \n                            checked={EventContext.event.isDISCUS}\n                            name=\"isDiscus\" \n                            onChange={(e) => {\n                                EventContext.setEvent({...EventContext.event, isDISCUS : e.target.checked})\n                            }}/>}\n                            label=\"Is a DISCUS event\"\n                        /> \n                </Grid>\n                </Grid>\n\n            </FormControl>\n\n            <Box my={2}>\n                <TextField\n                    autoFocus\n                    variant=\"outlined\" \n                    defaultValue={EventContext.event.url}\n                    onChange={(e) => {\n                        EventContext.setEvent({...EventContext.event, url : e.target.value})\n                    }}\n                    id=\"name\"\n                    label=\"URL\"\n                    fullWidth/>\n            </Box>\n                <Box my={2}>\n                    <TextField\n                        autoFocus\n                        multiline\n                        rows={5}\n                        variant=\"outlined\" \n                        defaultValue={EventContext.event.description}\n                        onChange={(e) => {EventContext.setEvent({...EventContext.event, description : e.target.value})}}\n                        margin=\"dense\"\n                        label=\"Description\"\n                        fullWidth\n                    />\n                </Box>\n\n                <Box my={3}>\n                    <Autocomplete\n                        fullWidth\n                        onChange={(event, value, reason) => changeTags(value)}\n                        id=\"multiple-limit-tags\"\n                        inputValue={mes}\n                        options={AllSubjects}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => <TextField {...params} label=\"Add interests\" variant=\"outlined\" />}\n                    />\n                        <Box my={3}>\n                            {tags.map( (e) => <Chip label={e} onDelete={() => changeChips(e)} ></Chip>)}\n                        </Box>\n                </Box>\n\n                <Button onClick={UpdateEvent}> save </Button>\n\n        </div>\n    )\n}\n\nexport default EditEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx",["168","169","170"],"import { Box, Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, MenuItem, Select } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { InputLabel } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Auth0Context } from '../../../context/Auth0Context';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AllSubjects } from '../../../config/TagSystem';\nimport { useSnackbar } from 'notistack';\n\ninterface CreateEventProps {\n    dialog : Function\n}\n\nfunction CreateEvent(props : CreateEventProps) {\n\n    const Auth0 = useAuth0();    \n    const [event, setEvent] = useState({title:\"\",dateTime: new Date() , finishedDateTime: new Date(), type:\"\", url:\"\", description:\"\",isDISCUS:true, isApproved : false, tags : \"\" }); \n    const [accessToken, setAccessToken] = useState(\"\");\n    const AuthContext = useContext(Auth0Context)\n    const [tags, setTags] = useState<string[]>([])\n    const { enqueueSnackbar } = useSnackbar();\n    const [validated, setValidated] = useState(true); \n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        fetchData(); \n    },[Auth0]);\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function publishEvent(){\n        \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n\n        const newEvent = {...event}\n        if(AuthContext.data.app_metadata !== null){\n            newEvent.isApproved = true;\n            setEvent(newEvent)\n        }\n\n        const newEventTags = {...event}\n        newEvent.tags = Alltags.slice(0,-1);\n        setEvent(newEventTags); \n\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity`, {\n            method:\"POST\", \n            body: JSON.stringify(newEvent),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            if (AuthContext.data.app_metadata !== null)\n            {\n                enqueueSnackbar('Event has been created!', { variant : \"success\" });\n            } else \n            {\n                enqueueSnackbar('Event will be published once authorised!', { variant : \"info\" });\n\n            }\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    const handleStartDate = (date: Date) => {\n        setEvent({...event, dateTime : date})\n    };\n\n    const handleFinishDate = (date: Date) => {\n        setEvent({...event, finishedDateTime : date})\n    };\n\n    return (\n        <>\n        <form noValidate autoComplete=\"off\">\n            <div>\n            <TextField\n                required\n                error={!validated}\n                label=\"Title\"\n                fullWidth={true} \n                variant=\"outlined\"\n                defaultValue=\"\"\n                onChange={(e) => setEvent({...event,title: String(e.target.value)})}\n                helperText={validated ? \"\" : \"Field cannot be blank.\"}\n            />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Box p={1}> \n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            disablePast\n                            label=\"Pick a Date\"\n                            value={event.dateTime}\n                            onChange={(e : any) => handleStartDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        </Box>\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Start Time\"\n                                value={event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n                    <Box p={1}> \n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"yyyy-MM-dd\"\n                        disablePast\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Finish Date\"\n                        value={event.finishedDateTime}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    </Box>\n                    <Box p={1}> \n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"Finish Time\"\n                            value={event.finishedDateTime}\n                            onChange={(e : any) => handleFinishDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change time',\n                            }}\n                        />\n                    </Box>\n                </Grid>\n            </Grid>\n            </MuiPickersUtilsProvider>\n\n            <InputLabel>Type</InputLabel>\n            <Select\n                style={{\n                }}\n                onChange={(e) => setEvent({...event,type:String(e.target.value)})}\n                label=\"Event Type\"\n            >\n                <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                <MenuItem value=\"Networking\">Networking</MenuItem>\n                <MenuItem value=\"Generic\">Generic</MenuItem>\n            </Select>\n            <Box mx={10}>\n                <FormControlLabel\n                    control={\n                        <Checkbox \n                            checked={event.isDISCUS} name=\"isDiscus\" \n                            onChange={(e) => setEvent({...event,isDISCUS:Boolean(e.target.checked)})}\n                            />\n                        }\n                label=\"A discus event\"/>\n            </Box>\n            <Box my={1}>\n                <TextField \n                    margin=\"normal\" \n                    label=\"registration\" \n                    variant=\"outlined\" \n                    fullWidth={true}\n                    type=\"text\" \n                    name=\"registration\" \n                    onChange={(e) => setEvent({...event,url:e.target.value})}/>\n            </Box>\n            <Box my={1} >\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Description\"\n                    multiline\n                    fullWidth={true}\n                    rows={4}\n                    onChange={(e) => setEvent({...event,description:String(e.target.value)})}\n                    variant=\"outlined\"/>\n            </Box>\n\n            <Box my={2}>\n                <Autocomplete\n                    multiple\n                    limitTags={5}\n                    id=\"set Interest\"\n                    onChange={(obj,value,reason) => setTags(value)}\n                    options={AllSubjects}\n                    getOptionLabel={(option) => option}\n                    renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Favorites\" />\n                )}\n                />\n            </Box>\n    \n            <Button disabled={AuthContext.data === null} variant=\"contained\" value=\"Submit\" color=\"secondary\" \n                onClick = \n                    { () => {\n                            if (event.title === \"\") \n                            {\n                                setValidated(false);\n                            } \n                            else \n                            {\n                                setValidated(true);\n                                publishEvent(); \n                            }\n                        }\n                    } \n            > Submit </Button>\n        \n        </div>\n        </form>\n        </>\n    );\n}\n\nexport default CreateEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx",["171","172","173"],"import { Box, Button, TextField, Typography } from '@material-ui/core'\nimport React, { useContext, useEffect, useState } from 'react'\nimport SendIcon from '@material-ui/icons/Send';\nimport EmailAddress from '../models/EmailAddress'; \nimport { EditEventContext } from  '../context/EditEventContext'; \nimport SendMail from '../models/SendMail'; \n\nfunction SendEmail() {\n    const EventContext = useContext(EditEventContext)\n    const [to, setTo] = useState(\"\"); \n    const [subject, setSubject] = useState(\"Invitation...\"); \n    const [body, setBody] = useState(\"\"); \n    const [recipents, setrecipents] = useState<EmailAddress[]>(); \n    useEffect(() => {\n        getRecipents(); \n        formatter(); \n    }, [])\n\n    async function formatter(){\n        setBody(`Title = ${EventContext.event.title}\\nURL = ${EventContext.event.url}\\nType = ${EventContext.event.type}\\nStart DateTime = ${EventContext.event.dateTime}\\nFinish DateTime = ${EventContext.event.dateTime}\\nDescription = ${EventContext.event.description}`)\n    }\n\n    async function getRecipents(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/GetEmails`, { \n            headers: {\n              'Content-Type': 'application/json',\n            }\n        });\n        setrecipents(await response.json())\n    }\n\n    async function sendEmail(){\n        if (recipents !== undefined){\n            let message; \n            message = \"<center> <img src='http://avantehealth.co.uk/discus.png'  width='100' height='100' /> </center> <br> <br>\" + body.replace(/\\n/g, \"<br />\") \n            const sendObj : SendMail = {\n                \"recipients\" : recipents, \n                \"body\" : message, \n                \"subject\" : subject, \n            }\n\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/SendEmail`, { \n                method:\"POST\", \n                body: JSON.stringify(sendObj),\n                headers: {\n                  'Content-Type': 'application/json',\n                }\n            });\n    \n            if (response.ok){\n                (alert(\"sentt\")); \n            }; \n        }\n    }\n\n    return (\n        <div>\n            <Box m={3}>\n                <Typography> To </Typography>\n                {recipents?.map (e => \n                    <>\n                    <Box m={2}>\n                        <Typography>{e.name}</Typography>\n                    </Box>\n                    </>)\n                }\n                <Box my={5}>\n                    <Typography> Subject </Typography>\n                </Box>\n                    <TextField variant=\"outlined\"  value={subject} onChange={e => setSubject(e.target.value)}></TextField>\n                <Typography > Body </Typography>\n                    <TextField\n                        value={body} \n                        variant=\"outlined\" \n                        multiline\n                        fullWidth={true}\n                        rows={10}\n                        onChange={e => setBody(e.target.value)}>\n                    </TextField>\n                <Button onClick={sendEmail}><SendIcon/></Button>\n            </Box>\n        </div>\n    )\n}\n\nexport default SendEmail\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx",["174","175","176"],"import { Grid, Box, Typography, Avatar, Button, Chip, makeStyles, createStyles, Theme, Paper, CssBaseline } from '@material-ui/core'\nimport React, { useContext } from 'react'\nimport { Auth0Context } from '../context/Auth0Context'\nimport EditIcon from '@material-ui/icons/Edit';\nimport Points from '../components/Points'; \nimport lottie from '../config/lottie.json'\nimport { Player } from \"@lottiefiles/react-lottie-player\";\nimport mySvg from '../assets/Wave.svg';\nimport EmailIcon from '@material-ui/icons/Email';\nimport PersonIcon from '@material-ui/icons/Person';\nimport DomainIcon from '@material-ui/icons/Domain';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport SchoolIcon from '@material-ui/icons/School';\nimport IsAvailable from './IsAvailable';\nimport uosLogo from '../assets/logo.svg'; \n\nfunction Dashboard() {\n    \n    const AuthContext = useContext(Auth0Context);\n    const drawerWidth = 140;\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n                minHeight : '100vh', backgroundImage: `url(${mySvg})`, backgroundRepeat : \"no-repeat\",\n                backgroundPosition : 'center bottom',\n                padding : '1px',\n            },\n            large: {\n                width: theme.spacing(20),\n                height: theme.spacing(20),\n                [theme.breakpoints.down('xs')]: {\n                    width: theme.spacing(10),\n                    height: theme.spacing(10),\n                  },\n            },\n            glass : {\n                backgroundColor: 'rgba(0,0,0,0.06)'            \n            }\n            }),\n        );\n    const classes = useStyles();\n\n\n    function changeEdit(){\n        AuthContext.setEdit(true); \n    }\n\n    return (<>\n    {AuthContext.data.name !== \"\" ? \n            <>\n            <Box my={11}>\n            </Box>\n            <div className={classes.root}>\n                <Grid container justify=\"center\">\n                <Grid item xs={12} lg={9}>\n                    <Box borderRadius={5} className={classes.glass}>\n                    <Grid container>\n                    <Grid item lg={3} xs={2}>\n                        <Grid container justify = \"center\">\n                            <Box m={2}>\n                            <Box className=\"small\" borderRadius=\"borderRadius\">\n                            <Avatar alt=\"Profile Picture\" className={classes.large} src={AuthContext.data ? AuthContext.data.picture : \"\"}/>\n                            </Box>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                    <Grid item lg={8} xs={8}>\n                        <Box borderRadius={2}>\n                        <Grid container>\n                        <Grid item xs={12}>\n                        <Grid container >\n                        <Box m={1}>\n                        <Typography variant=\"h4\"> {AuthContext.data.name} </Typography>\n                        </Box>\n                        <Box m={2} >\n                        {AuthContext.data.user_metadata.education.available === 'true' ? <IsAvailable/> : \"\"}\n                        </Box>\n                        </Grid>\n\n                        </Grid>\n                        <Grid container>\n                        <div style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        flexWrap: 'wrap',\n                        }}>\n                        <Box m={1}><img src={uosLogo} alt=\"UoS Logo\"  height='25px' width='30px' /></Box>\n                        <Box m={1}><LinkedInIcon/> </Box>\n                        <Box my={1}><SchoolIcon/></Box>\n                        <Box m={1}>{AuthContext.data.user_metadata.education.graduationDate.toString().slice(4,15)} </Box>\n                        </div>\n                        </Grid>\n                        </Grid>\n                        </Box>\n                    </Grid>\n                    <Grid item lg={1} xs={1}>\n                        <Box m={2}><Button onClick={changeEdit}> <EditIcon/> </Button></Box>\n                    </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={12} lg={3}>\n                            <Box my={7}>\n                                <Points/>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} lg={9}>\n                            <Box>\n                                <Box m={3} p={3} borderRadius={8} bgcolor=\"secondary.main\">\n                                    <Grid container>\n                                    <Grid item lg={6} xs={12}>\n                                    <Typography><EmailIcon/> {AuthContext.data.email}</Typography>\n                                    </Grid>\n                                    <Grid item lg={6} xs={12}>\n                                    <Typography><DomainIcon/> {AuthContext.data.user_metadata.education.school}</Typography>\n                                    </Grid>\n                                    <Grid item lg={6} xs={12}>\n                                    <Typography><PersonIcon/> {AuthContext.data.user_metadata.education.careerStage}</Typography>\n                                    </Grid>\n                                    <Grid item lg={6} xs={12}>\n                                    <Typography><DomainIcon/> {AuthContext.data.user_metadata.education.department}</Typography>\n                                    </Grid>\n                                    </Grid>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                    <Grid container>\n                        <Grid item xs={11} lg={6}>\n                            <Typography>Expertise : {AuthContext.data.user_metadata.expertise.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                        </Grid>\n                        <Grid item xs={11} lg={6}>\n                            <Typography>Interest : {AuthContext.data.user_metadata.interest.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                        </Grid>\n                    </Grid>\n                    </Box>\n                        <Grid item xs={12} alignItems=\"center\" >\n                            <Box borderRadius={5} className={classes.glass} my={4}>\n                                <Typography gutterBottom > Research from {AuthContext.data.name}</Typography>\n                                <Typography>{AuthContext.data.user_metadata.research}</Typography>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    :\n        <Player\n         autoplay\n         loop\n         src={lottie}\n         style={{ height: \"20%\", width: \"20%\"}}>\n        </Player>\n    }\n        </>\n    )\n}\n\nexport default Dashboard\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx",["177","178","179"],"import { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Label } from 'recharts';\n  \nfunction StackedBarChart() {\n    const [Bardata, setBarData]= useState([]); \n    \n    useEffect(() => {\n      GetData(); \n    }, []);\n\n    async function GetData(){\n      const getData = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Chart`, { \n        headers: {\n        'Content-Type': 'application/json',\n        }\n      });\n      setBarData(await getData.json());  \n    }\n    \n  \n    //@ts-ignore\n    const CustomTooltip = ({ active , payload , label}) => {\n    //@ts-ignore\n            const getIntroOfPage = (label, index) => {    \n                let x = \"\"; \n                Bardata.map( (item : any) => {\n                    if (item.name == label){\n                        x = item.caption[index]\n                    }\n                })\n                return x; \n            };\n            if (active && payload && payload.length) {\n                return (\n                  <div className=\"custom-tooltip\">\n                        { payload.map ( (e : any, i : number) => {\n                          return <p className=\"intro\">{getIntroOfPage(label,i)} {`${e.value}`} </p>\n                        })}\n                  </div>\n            );\n        }\n        return null; \n    }\n\n\n\n\n    return (\n        <>\n          {Bardata ? \n              <div style={{height : \"100%\", width : \"100%\"}}>\n                <Typography variant=\"h4\"> User by School and Departments </Typography>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    width={500}\n                    height={400}\n                    data={Bardata}\n                    margin={{\n                      top: 20,\n                      right: 30,\n                      left: 20,\n                      bottom: 5,\n                    }}\n                  >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" interval={0} />\n                    <YAxis allowDecimals={false} />\n                    <Tooltip content={\n                    //@ts-ignore\n                    <CustomTooltip />} />\n                      <Bar dataKey=\"bar1\" stackId=\"a\" fill=\"#8884d8\" />\n                      <Bar dataKey=\"bar2\" stackId=\"a\" fill=\"#CA83B0\" />\n                      <Bar dataKey=\"bar3\" stackId=\"a\" fill=\"#84ca9d\" />\n                      <Bar dataKey=\"bar4\" stackId=\"a\" fill=\"#85ca9d\" />\n                      <Bar dataKey=\"bar5\" stackId=\"a\" fill=\"#87ca9d\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n                :\n                \"no data yet\"  \n        }\n\n        </>\n    )\n}\n\nexport default StackedBarChart\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx",[],{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":21,"column":24,"nodeType":"186","messageId":"187","endLine":21,"endColumn":37},{"ruleId":"188","severity":1,"message":"189","line":61,"column":7,"nodeType":"190","endLine":61,"endColumn":82,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":97,"column":22,"nodeType":"186","messageId":"194","endLine":97,"endColumn":23},{"ruleId":"192","severity":1,"message":"193","line":127,"column":26,"nodeType":"186","messageId":"194","endLine":127,"endColumn":27},{"ruleId":"192","severity":1,"message":"193","line":136,"column":26,"nodeType":"186","messageId":"194","endLine":136,"endColumn":27},{"ruleId":"192","severity":1,"message":"193","line":151,"column":30,"nodeType":"186","messageId":"194","endLine":151,"endColumn":31},{"ruleId":"195","severity":1,"message":"196","line":192,"column":22,"nodeType":"197","messageId":"198","endLine":192,"endColumn":24},{"ruleId":"184","severity":1,"message":"199","line":7,"column":8,"nodeType":"186","messageId":"187","endLine":7,"endColumn":12},{"ruleId":"184","severity":1,"message":"200","line":10,"column":8,"nodeType":"186","messageId":"187","endLine":10,"endColumn":18},{"ruleId":"184","severity":1,"message":"201","line":12,"column":10,"nodeType":"186","messageId":"187","endLine":12,"endColumn":13},{"ruleId":"184","severity":1,"message":"202","line":18,"column":8,"nodeType":"186","messageId":"187","endLine":18,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":19,"column":8,"nodeType":"190","endLine":19,"endColumn":21,"suggestions":"203"},{"ruleId":"184","severity":1,"message":"204","line":18,"column":12,"nodeType":"186","messageId":"187","endLine":18,"endColumn":23},{"ruleId":"188","severity":1,"message":"205","line":27,"column":8,"nodeType":"190","endLine":27,"endColumn":10,"suggestions":"206"},{"ruleId":"184","severity":1,"message":"207","line":12,"column":12,"nodeType":"186","messageId":"187","endLine":12,"endColumn":24},{"ruleId":"184","severity":1,"message":"208","line":12,"column":26,"nodeType":"186","messageId":"187","endLine":12,"endColumn":41},{"ruleId":"184","severity":1,"message":"209","line":16,"column":12,"nodeType":"186","messageId":"187","endLine":16,"endColumn":21},{"ruleId":"188","severity":1,"message":"189","line":24,"column":8,"nodeType":"190","endLine":24,"endColumn":10,"suggestions":"210"},{"ruleId":"184","severity":1,"message":"211","line":43,"column":20,"nodeType":"186","messageId":"187","endLine":43,"endColumn":28},{"ruleId":"184","severity":1,"message":"212","line":58,"column":14,"nodeType":"186","messageId":"187","endLine":58,"endColumn":26},{"ruleId":"184","severity":1,"message":"213","line":20,"column":8,"nodeType":"186","messageId":"187","endLine":20,"endColumn":22},{"ruleId":"188","severity":1,"message":"189","line":37,"column":8,"nodeType":"190","endLine":37,"endColumn":22,"suggestions":"214"},{"ruleId":"188","severity":1,"message":"215","line":38,"column":8,"nodeType":"190","endLine":38,"endColumn":10,"suggestions":"216"},{"ruleId":"184","severity":1,"message":"217","line":66,"column":14,"nodeType":"186","messageId":"187","endLine":66,"endColumn":33},{"ruleId":"184","severity":1,"message":"213","line":13,"column":8,"nodeType":"186","messageId":"187","endLine":13,"endColumn":22},{"ruleId":"184","severity":1,"message":"204","line":22,"column":12,"nodeType":"186","messageId":"187","endLine":22,"endColumn":23},{"ruleId":"188","severity":1,"message":"189","line":27,"column":8,"nodeType":"190","endLine":27,"endColumn":10,"suggestions":"218"},{"ruleId":"188","severity":1,"message":"219","line":22,"column":8,"nodeType":"190","endLine":22,"endColumn":10,"suggestions":"220"},{"ruleId":"184","severity":1,"message":"221","line":1,"column":33,"nodeType":"186","messageId":"187","endLine":1,"endColumn":44},{"ruleId":"184","severity":1,"message":"222","line":1,"column":64,"nodeType":"186","messageId":"187","endLine":1,"endColumn":73},{"ruleId":"188","severity":1,"message":"189","line":32,"column":7,"nodeType":"190","endLine":32,"endColumn":14,"suggestions":"223"},{"ruleId":"184","severity":1,"message":"224","line":10,"column":12,"nodeType":"186","messageId":"187","endLine":10,"endColumn":14},{"ruleId":"184","severity":1,"message":"225","line":10,"column":16,"nodeType":"186","messageId":"187","endLine":10,"endColumn":21},{"ruleId":"188","severity":1,"message":"226","line":17,"column":8,"nodeType":"190","endLine":17,"endColumn":10,"suggestions":"227"},{"ruleId":"184","severity":1,"message":"228","line":1,"column":88,"nodeType":"186","messageId":"187","endLine":1,"endColumn":93},{"ruleId":"184","severity":1,"message":"229","line":1,"column":95,"nodeType":"186","messageId":"187","endLine":1,"endColumn":106},{"ruleId":"184","severity":1,"message":"230","line":20,"column":11,"nodeType":"186","messageId":"187","endLine":20,"endColumn":22},{"ruleId":"184","severity":1,"message":"231","line":3,"column":84,"nodeType":"186","messageId":"187","endLine":3,"endColumn":89},{"ruleId":"195","severity":1,"message":"196","line":27,"column":43,"nodeType":"197","messageId":"198","endLine":27,"endColumn":45},{"ruleId":"232","severity":1,"message":"233","line":28,"column":35,"nodeType":"234","messageId":"235","endLine":28,"endColumn":37},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"@typescript-eslint/no-unused-vars","'setSearchTerm' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["238"],"@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'List' is defined but never used.","'Typography' is defined but never used.","'Box' is defined but never used.","'AppsIcon' is defined but never used.",["239"],"'accessToken' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getEventAttendance' and 'getEventInfo'. Either include them or remove the dependency array.",["240"],"'loginPressed' is assigned a value but never used.","'setLoginPressed' is assigned a value but never used.","'interests' is assigned a value but never used.",["241"],"'saveData' is defined but never used.","'handleDelete' is defined but never used.","'LocalOfferIcon' is defined but never used.",["242"],"React Hook useEffect has a missing dependency: 'LoadStates'. Either include it or remove the dependency array.",["243"],"'DeleteChipExpertise' is defined but never used.",["244"],"React Hook useEffect has a missing dependency: 'EventContext.event.tags'. Either include it or remove the dependency array.",["245"],"'FormControl' is defined but never used.","'FormGroup' is defined but never used.",["246"],"'to' is assigned a value but never used.","'setTo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formatter'. Either include it or remove the dependency array.",["247"],"'Paper' is defined but never used.","'CssBaseline' is defined but never used.","'drawerWidth' is assigned a value but never used.","'Label' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"254","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},"Update the dependencies array to be: [searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, fetchData]",{"range":"267","text":"268"},"Update the dependencies array to be: [accessToken, fetchData]",{"range":"269","text":"270"},"Update the dependencies array to be: [getEventAttendance, getEventInfo]",{"range":"271","text":"272"},"Update the dependencies array to be: [fetchData]",{"range":"273","text":"274"},"Update the dependencies array to be: [openNE, open, fetchData]",{"range":"275","text":"276"},"Update the dependencies array to be: [LoadStates]",{"range":"277","text":"278"},{"range":"279","text":"274"},"Update the dependencies array to be: [EventContext.event.tags]",{"range":"280","text":"281"},"Update the dependencies array to be: [Auth0, fetchData]",{"range":"282","text":"283"},"Update the dependencies array to be: [formatter]",{"range":"284","text":"285"},[2683,2758],"[searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, fetchData]",[656,669],"[accessToken, fetchData]",[1320,1322],"[getEventAttendance, getEventInfo]",[1062,1064],"[fetchData]",[1631,1645],"[openNE, open, fetchData]",[1730,1732],"[LoadStates]",[1172,1174],[913,915],"[EventContext.event.tags]",[1468,1475],"[Auth0, fetchData]",[709,711],"[formatter]"]