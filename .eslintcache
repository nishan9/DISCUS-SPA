[{"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx":"1","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx":"2","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx":"3","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx":"4","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx":"5","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx":"6","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx":"7","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx":"8","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx":"9","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx":"10","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx":"11","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx":"12","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx":"13","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx":"14","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx":"15","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx":"16","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx":"17","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx":"18","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx":"19","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx":"20","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx":"21","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx":"22","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx":"23","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx":"24","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx":"25","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx":"26","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx":"27","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx":"28","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx":"29","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx":"30","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx":"31","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUser.tsx":"32","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/SelectedUserContext.tsx":"33","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/UserTheme.tsx":"34","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/HtmlTooltip.tsx":"35","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/SearchTheme.tsx":"36","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/AntSwitch.tsx":"37","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/EventsTheme.tsx":"38","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/NotFoundPlayer.tsx":"39","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewJSON.tsx":"40"},{"size":1210,"mtime":1617466276277,"results":"41","hashOfConfig":"42"},{"size":442,"mtime":1618305352730,"results":"43","hashOfConfig":"42"},{"size":2474,"mtime":1620025948019,"results":"44","hashOfConfig":"42"},{"size":838,"mtime":1616079789554,"results":"45","hashOfConfig":"42"},{"size":1466,"mtime":1616079789554,"results":"46","hashOfConfig":"42"},{"size":26053,"mtime":1620025758850,"results":"47","hashOfConfig":"42"},{"size":1463,"mtime":1616336247238,"results":"48","hashOfConfig":"42"},{"size":2040,"mtime":1616091229348,"results":"49","hashOfConfig":"42"},{"size":5541,"mtime":1618575240103,"results":"50","hashOfConfig":"42"},{"size":1412,"mtime":1620025919791,"results":"51","hashOfConfig":"42"},{"size":2121,"mtime":1616335054930,"results":"52","hashOfConfig":"42"},{"size":10562,"mtime":1618583788260,"results":"53","hashOfConfig":"42"},{"size":14303,"mtime":1618307861660,"results":"54","hashOfConfig":"42"},{"size":15532,"mtime":1618233977342,"results":"55","hashOfConfig":"42"},{"size":27320,"mtime":1618575105441,"results":"56","hashOfConfig":"42"},{"size":8364,"mtime":1618231232391,"results":"57","hashOfConfig":"42"},{"size":1513,"mtime":1618231813359,"results":"58","hashOfConfig":"42"},{"size":1399,"mtime":1616248167311,"results":"59","hashOfConfig":"42"},{"size":473,"mtime":1620027334748,"results":"60","hashOfConfig":"42"},{"size":466,"mtime":1614962382516,"results":"61","hashOfConfig":"42"},{"size":17335,"mtime":1618305987274,"results":"62","hashOfConfig":"42"},{"size":9445,"mtime":1618226786939,"results":"63","hashOfConfig":"42"},{"size":10394,"mtime":1616855730490,"results":"64","hashOfConfig":"42"},{"size":4880,"mtime":1620027324620,"results":"65","hashOfConfig":"42"},{"size":18559,"mtime":1620027432496,"results":"66","hashOfConfig":"42"},{"size":10244,"mtime":1620027485725,"results":"67","hashOfConfig":"42"},{"size":5015,"mtime":1620027092632,"results":"68","hashOfConfig":"42"},{"size":5956,"mtime":1618240996570,"results":"69","hashOfConfig":"42"},{"size":3897,"mtime":1618583160228,"results":"70","hashOfConfig":"42"},{"size":348,"mtime":1620027383975,"results":"71","hashOfConfig":"42"},{"size":1552,"mtime":1620025841725,"results":"72","hashOfConfig":"42"},{"size":27245,"mtime":1620026779169,"results":"73","hashOfConfig":"42"},{"size":1494,"mtime":1616146344723,"results":"74","hashOfConfig":"42"},{"size":1216,"mtime":1616168737083,"results":"75","hashOfConfig":"42"},{"size":314,"mtime":1616227611979,"results":"76","hashOfConfig":"42"},{"size":1181,"mtime":1616309435170,"results":"77","hashOfConfig":"42"},{"size":913,"mtime":1616250751224,"results":"78","hashOfConfig":"42"},{"size":1064,"mtime":1616272033232,"results":"79","hashOfConfig":"42"},{"size":598,"mtime":1616270349041,"results":"80","hashOfConfig":"42"},{"size":268,"mtime":1618311588087,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1k7wfi0",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx",[],["177","178"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx",["179","180","181","182","183","184"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx",["185"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx",["186"],"import { useAuth0 } from '@auth0/auth0-react';\nimport { Avatar, Box, ButtonGroup, Chip, createStyles, Grid, Link, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport EventAttendance from '../../models/EventAttendance';\nimport { CSVLink } from \"react-csv\";\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core'\nimport MailIcon from '@material-ui/icons/Mail';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SendEmail from '../SendEmail';\nimport events from '../../assets/events.svg'; \nimport Moment from 'react-moment';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport React from 'react';\nimport DiscusLogo from '../../assets/discus.svg'; \nimport WatchLaterIcon from '@material-ui/icons/WatchLater';\nimport { google, outlook, office365, yahoo, ics } from \"calendar-link\";\nimport appleIcon from '../../assets/appleIcon.svg';\nimport yahooIcon from '../../assets/yahooIcon.svg';\nimport outlookIcon from '../../assets/outlookIcon.svg';\nimport googleIcon from '../../assets/googleIcon.svg';\nimport office365Icon from '../../assets/365.svg';\n\n\nfunction ViewEventEntity(props : any) {\n\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n    const Auth0 = useAuth0();\n    const [eventAttendance,setEventAttendance ] = useState<EventAttendance>(); \n    const headers = [ { label:'Name',key:'name'}, {label:'Email Address',key:'email'}, {label:'Expertise',key:'user_metadata.expertise'}, {label:'Interests',key:'user_metadata.interest' },];\n    const [open, setOpen] = useState(false);\n    const [tags, setTags] = useState<string[]>([]);\n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n          }\n        getEventInfo(); \n        getEventAttendance(); \n    }, [Auth0, accessToken])\n\n    useEffect(() => {\n        setTags(EventContext.event.tags.split(',')); \n    }, [EventContext])\n\n    const handleOpen = () => {\n        setOpen(true);        \n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    async function getEventInfo(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${props.match.params.event_id}`, { \n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        EventContext.setEvent(await response.json()); \n    }\n\n    async function getEventAttendance(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/EventAttendance/${props.match.params.event_id}`, { \n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        setEventAttendance(await response.json()); \n    }\n\n\n    const event  = {\n        title: EventContext.event.title,\n        description: EventContext.event.description,\n        start: EventContext.event.dateTime,\n        end : EventContext.event.finishedDateTime\n    };\n\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n                minHeight : '100vh', \n                backgroundImage: `url(${events})`, \n                backgroundRepeat : \"no-repeat\",\n                backgroundSize: '40%', \n                backgroundPosition : 'right bottom',\n                opacity : '0.9'\n            },\n            large: {\n                width: theme.spacing(20),\n                height: theme.spacing(20),\n            },\n            glass : {\n                backgroundColor: 'rgba(255,255,255,0.9)',  \n            }\n            }),\n        );\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n            <Grid\n              container\n              style={{ minHeight: '100vh', paddingTop : '49px', padding : '20px' }}\n             >\n            <Grid item md={7} sm={12}>\n              <Box className={classes.glass} p={5} border={3} borderRadius={20}>\n                <p>Event ID : {EventContext.event.id} </p>\n                <Box pb={2}>\n                    <Typography variant=\"h3\">{EventContext.event.title}</Typography>\n                </Box>\n                <div style={{\n                     display: 'flex',\n                     alignItems: 'center',\n                     flexWrap: 'wrap',\n                    }}>\n                    <WatchLaterIcon/> \n                    <Typography> Start Time: &nbsp;  \n                    <Moment format=\"LLLL\">{EventContext.event.dateTime}</Moment> </Typography>\n                </div>\n                <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                flexWrap: 'wrap',\n                }}>   \n                    <WatchLaterIcon/> \n                    <Typography> Finish Time:&nbsp;\n                    <Moment format=\"LLLL\">{EventContext.event.finishedDateTime}</Moment> </Typography>\n                </div>\n\n                <Box my={1}>\n                {EventContext.event.isDISCUS ? \n                    <div style={{\n                     display: 'flex',\n                     alignItems: 'center',\n                     flexWrap: 'wrap',\n                    }}>\n                    <Box my={1} mr={2}><Typography display=\"inline\"> This is a DISCUS event</Typography></Box> \n                    <img alt=\"DISCUS Logo\" width={'35vw'} src={DiscusLogo}></img>\n                    </div>\n                    : \n                    <>\n                    </>\n                    }\n                </Box>\n\n                <Box my={1}>\n                    <Button disabled style={{ backgroundColor : '#FFF36D', color : 'black' }} variant=\"outlined\"> {EventContext.event.type}</Button>\n                </Box>\n\n                <Box my={1}>\n                    <Typography> {EventContext.event.description}</Typography>\n                </Box>\n\n                <Typography display=\"inline\"> Registration Information - </Typography> <Typography style={{ color : 'red' }}display=\"inline\">{EventContext.event.url}</Typography>\n\n                <Box my={2}>\n                <Typography display=\"inline\"> Tags - </Typography>\n                    { tags.map( (e) => <Chip label={e} style={{backgroundColor:'#24CAC3', margin : 2}} ></Chip>) }\n                </Box>\n\n                <Box style={{ backgroundColor : '#E0E0E0'}} mt={3} p={3} >\n                    <Typography variant=\"h4\"> Attendees </Typography>   \n                    {eventAttendance?.users.map (e => \n                    <Box p={0.5} m={0.5}>  \n                        <div style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            flexWrap: 'wrap',\n                            }}>\n                            <Avatar alt=\"Profile Picture\" src={e.picture} />\n                            <Box pl={2}>\n                                <Typography> {e.name} </Typography>\n                            </Box>\n                        </div>                    \n                    </Box>\n                    )}\n                    <Box mx={1}>\n                        Total users {eventAttendance?.total}\n                    </Box>\n                </Box>\n\n                <Grid container>\n                    <Box mt={1} mx={1}>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}><MailIcon/>Invite Users</Button>\n                    </Box>\n\n                    <Box mt={1} mx={1} display=\"in-line\">\n                    {eventAttendance ? \n                        <CSVLink \n                            filename={`${EventContext.event.title}.csv`} \n                            headers = {headers} \n                            data={eventAttendance.users}>\n                            <Button variant=\"contained\" color=\"primary\" >\n                                <GetAppIcon/> Download \n                            </Button>\n                        </CSVLink>  : \"\"}\n                    </Box>\n                    \n                    <Grid container>\n                        <Grid item xs={12}>\n                            <Box my={2}>\n                                <Typography> Add to calendar</Typography>\n                            </Box>\n                        </Grid>\n                    <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                        <Link href={outlook(event)}>\n                            <Button><img width='25rem' alt=\"Yahoo Icon\"src={outlookIcon}></img></Button>\n                        </Link>\n                        <Link href={yahoo(event)}>\n                            <Button><img width='25rem' alt=\"Yahoo Icon\"src={yahooIcon}></img></Button>\n                        </Link>\n                        <Link href={google(event)}>\n                            <Button><img width='25rem' alt=\"Yahoo Icon\"src={googleIcon}></img></Button>\n                        </Link>\n                        <Link href={office365(event)}>\n                            <Button><img width='25rem' alt=\"Yahoo Icon\"src={office365Icon}></img></Button>\n                        </Link>\n                        <Link href={ics(event)}>\n                            <Button><img width='25rem' alt=\"Yahoo Icon\"src={appleIcon}></img></Button>\n                        </Link>\n                    </ButtonGroup>\n                </Grid>\n                </Grid>\n\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"id\">\n                    <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1}> <Typography variant=\"h4\">Send Emails</Typography></Box>\n                    <Box>\n                    <IconButton onClick={handleClose}> <CancelIcon /> </IconButton>\n                    </Box>\n                    </Box>\n                    </DialogTitle>\n                        <DialogContent>\n                            <SendEmail dialog={() => setOpen(false)}/>\n                        </DialogContent>\n                </Dialog>\n                </Box>\n            </Grid>  \n            </Grid> \n        </Grid>\n    )\n}\n\nexport default ViewEventEntity\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx",["187","188"],"import { Avatar, Box, Button, Chip, Grid, Hidden, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react'\nimport Auth0user from '../models/Auth0user';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Auth0Context } from '../context/Auth0Context'\nimport IsAvailable from './IsAvailable';\nimport Loading from '../config/Loading';\nimport EmailIcon from '@material-ui/icons/Email';\nimport SchoolIconScout from '../assets/school.svg';\nimport CareerStageIconScout from '../assets/briefcase.svg'; \nimport PersonIcon from '@material-ui/icons/Person';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport SchoolIcon from '@material-ui/icons/School';\nimport uosLogo from '../assets/logo.svg'; \nimport EditUser from './EditUser';\nimport { SelectedUserContext } from '../context/SelectedUserContext';\nimport UserTheme from '../themes/UserTheme';\nimport Moment from 'react-moment';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nfunction ViewUser(props : any) {\n\n    const Authcontext = useContext(Auth0Context)\n    const Auth0 = useAuth0();    \n    const UserContext = useContext(SelectedUserContext); \n    const [accessToken, setAccessToken] = useState(\"\");\n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        fetchData();\n    }, [Auth0, accessToken])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/${props.match.params.user_id}`, { \n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        UserContext.setData(await response.json());\n    }\n\n    function changeEdit(){\n        UserContext.setEdit(true); \n    }\n\n    const classes = UserTheme();\n    \n    return (\n        <>\n        {UserContext.edit ? <EditUser/> : \n            <>\n            {UserContext.data ? \n                              <>\n                              <Box my={4}>\n                              </Box>\n                              <Hidden xsDown>\n                                  <Box my={7}>\n                                  </Box>\n                              </Hidden>\n                              <div className={classes.root}>\n                                  <Grid container justify=\"center\" className={classes.centerMobile}>\n                                  <Grid item xs={12} lg={9}>\n                                      <Box borderRadius={5} className={classes.glass}>\n                                      <Grid container className={classes.centerMobile}>\n                                      <Grid item lg={4} xs={9}>\n                                          <Grid container justify = \"center\">\n                                              <Box m={2}>\n                                                  <Box className=\"small\" borderRadius=\"borderRadius\">\n                                                  <Avatar alt=\"Profile Picture\" className={classes.large} src={UserContext.data ? UserContext.data.picture : \"\"}/>\n                                                  </Box>\n                                              </Box>\n                                              <Hidden only={['md', 'lg', 'xl', 'sm']}>\n                                                {Authcontext.data.app_metadata !== null ?         \n                                                    <Button onClick={changeEdit}> <EditIcon/> </Button>\n                                                    : \n                                                    <></>\n                                                }\n                                              </Hidden>\n                                          </Grid>\n                  \n                                      </Grid>\n                  \n                                      <Grid item lg={8} xs={8} className={classes.centerMobile}>\n                                          <Box borderRadius={2}>\n                                          <Grid container className={classes.centerMobile}>\n                                          <Grid item xs={11} className={classes.centerMobile}>\n                                          <Grid container className={classes.centerMobile}>\n                                          <Box my={1}>\n                                              <Typography variant=\"h4\"> {UserContext.data.name} </Typography>\n                                          </Box>\n                                          <Box m={2} >\n                                              {UserContext.data.user_metadata.education.available === 'true' ? <IsAvailable/> : \"\"}\n                                          </Box>\n                                          </Grid>\n                                          \n                  \n                                          </Grid>\n                                          <Hidden xsDown>\n                                              <Grid item lg={1} xs={1}>\n                                                  <Box m={2}>\n                                                    { Authcontext.data.app_metadata !== null ?         \n                                                        <Button onClick={changeEdit}> <EditIcon/> </Button>\n                                                        : \n                                                        <></>\n                                                    }\n                                                    </Box>\n                                              </Grid>\n                                          </Hidden>\n                                          <Grid container className={classes.centerMobile}>\n                                          <div className={classes.centerSVG}>\n                                          {\n                                          UserContext.data.user_metadata.social.sussex === \"\" ? \n                                              <></>\n                                              :\n                                              <a href={UserContext.data.user_metadata.social.sussex} target=\"_blank\" rel=\"noopener noreferrer\">\n                                              <Box mr={2}><img src={uosLogo} alt=\"UoS Logo\"  height='25px' width='30px' /></Box> \n                                          </a>\n                                          }                        \n                              \n                                          {UserContext.data.user_metadata.social.linkedIn === \"\" ?  \n                                              <></> \n                                              :\n                                              <Box mr={2}>\n                                                  <a href={UserContext.data.user_metadata.social.linkedIn} target=\"_blank\" rel=\"noopener noreferrer\"> \n                                                      <LinkedInIcon/>\n                                                  </a>\n                                              </Box>\n                                          }\n                                          <Box my={1}><SchoolIcon/></Box>\n                                          <Box m={1}><Moment format=\"MMMM Do YYYY\">{UserContext.data.user_metadata.education.graduationDate.toString()}</Moment></Box>\n                                          </div>\n                                          </Grid>\n                                          </Grid>\n                                          </Box>\n                                      </Grid>\n                                      </Grid>\n                                      <Grid container>\n                                          <Grid item xs={12} lg={4}>\n                                              <Grid container justify=\"center\">\n                                                  <Grid item xs={9}>\n                                                      <Box pb={2}>\n                                                        <Box  m={1} p={3} bgcolor=\"primary.main\" borderRadius=\"borderRadius\" textAlign=\"center\">\n                                                        <Typography>{UserContext.data.user_metadata.events.length} Experience</Typography>\n                                                        </Box>                                                     \n                                                    </Box>\n                                                  </Grid>\n                                              </Grid>\n                                          </Grid>\n                                          <Grid item xs={12} lg={8}>\n                                                  <Box mx={3} p={4} borderRadius={8} bgcolor=\"primary.light\">\n                                                      <Grid container>\n                                                          <Grid item lg={5} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <img src={CareerStageIconScout} alt=\"School Icon\"  height='25px' width='25px' />\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.user_metadata.education.careerStage}</Typography>\n                                                              </Box>  \n                                                          </Grid>\n                                                          <Grid item lg={7} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <EmailIcon/>\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.email}</Typography>\n                                                              </Box> \n                                                          </Grid>\n                                                          <Grid item lg={5} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <PersonIcon/>\n                                                                  <Box mx={0.5}>\n                                                                      <Typography>{UserContext.data.user_metadata.education.department}</Typography>\n                                                                  </Box>\n                                                              </Box> \n                                                          </Grid>\n                                                          <Grid item lg={7} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <img src={SchoolIconScout} alt=\"School Icon\"  height='25px' width='25px' />\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.user_metadata.education.school}</Typography>\n                                                              </Box> \n                                                          </Grid>\n                                                      </Grid>\n                                                  </Box>\n                                          </Grid>\n                                      </Grid>\n                                      <Grid container>\n                                          <Grid item xs={11} lg={6}>\n                                              <Box mt={2} className={classes.mobilePadding}>\n                                                  <Typography>Expertise : {UserContext.data.user_metadata.expertise.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                              </Box>\n                                          </Grid>\n                                          <Grid item xs={11} lg={6}>\n                                              <Box mt={2} className={classes.mobilePadding}>\n                                                  <Typography>Interest : {UserContext.data.user_metadata.interest.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                              </Box>\n                                          </Grid>\n                                      </Grid>\n                                      </Box>\n                                          <Grid item xs={12}  className={classes.mobilePadding}>\n                                              <Box borderRadius={5} className={classes.glass} my={4} >\n                                                  <Box p={2}>\n                                                      <Typography variant=\"h6\" gutterBottom > Research from {UserContext.data.name}</Typography>\n                                                      <Box bgcolor=\"#FAFAFA\" p={1} borderRadius={3}>\n                                                          <Typography>{UserContext.data.user_metadata.research}</Typography>\n                                                      </Box>\n                                                  </Box>\n                                              </Box>\n                                          </Grid>\n                                      </Grid>\n                                  </Grid>\n                              </div>\n                          </>\n            :\n                <Loading/>\n            }\n            </>\n            }\n        </>\n    )\n}\n\nexport default ViewUser\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx",["189","190","191"],"import { Box, Button, Checkbox, Dialog, DialogActions, DialogContent, DialogTitle, Fab, Grid, IconButton, Typography, withStyles } from '@material-ui/core';\nimport React, {useState, useEffect, useContext} from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport AddIcon from '@material-ui/icons/Add';\nimport CreateEvent from './forms/CreateEvent'\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Auth0Context } from '../../context/Auth0Context';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Link } from 'react-router-dom';\nimport EditEvent from './EditEvent'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport Metadata from '../../models/Metadata';\nimport Auth0user from '../../models/Auth0user';\nimport Loading from '../../config/Loading'; \nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport Moment from 'react-moment';\nimport StarIcon from '@material-ui/icons/Star';\nimport EventsTheme from '../../themes/EventsTheme';\nimport NotFoundPlayer from '../../config/NotFoundPlayer';\nimport { useSnackbar } from 'notistack';\n\n\nfunction UpcomingEvents() {\n    const [data, setData] = useState<EventEntity[]>();\n    const [open, setOpen] = useState(false);\n    const [openNE, setOpenNE] = useState(false); \n    const Auth0 = useAuth0();\n    const AuthContext = useContext(Auth0Context);\n    const EventContext = useContext(EditEventContext);\n    const [accessToken, setAccessToken] = useState(''); \n    const [openDelete, setOpenDelete] = useState(false); \n    const [confirmDelete, setConfirmDelete] = useState<number>(); \n    const { enqueueSnackbar } = useSnackbar();\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n        fetchEventData();\n    },[Auth0, AuthContext]);\n    \n    useEffect(() => {\n        fetchData();\n    }, [accessToken, openNE, open])\n\n    function openDeleteDialog( id : number){\n        setOpenDelete(true); \n        setConfirmDelete(id); \n    }\n\n    function handleCloseDelete(){\n        setOpenDelete(false); \n    }\n    async function handleDelete(){\n        setOpenDelete(false); \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${confirmDelete}`, {\n            method : \"DELETE\",\n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        if(response.ok){\n            enqueueSnackbar('Event has been deleted!', { variant : \"success\" });\n            fetchEventData(); \n        }else{\n            enqueueSnackbar('Event has not been deleted', { variant : \"error\" });\n            fetchEventData(); \n        }\n    }\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function fetchEventData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Upcoming`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n\n        let data : EventEntity[] = await response.json();\n        let newdata = data.map( item => \n            {\n                item.linkedExpertise = false;\n                item.linkedInterests = false\n                return item\n            }\n        )\n        const myInterests = AuthContext.data.user_metadata.interest; \n        const myExpertise = AuthContext.data.user_metadata.expertise; \n        newdata = data.map( event => \n            {\n                const tags = event.tags.split(','); \n                tags.map( e => \n                    {\n                        if (myInterests.includes(e)){\n                            event.linkedInterests = true;\n                        }\n                        if (myExpertise.includes(e)){\n                            event.linkedExpertise = true;\n                        }\n                    })\n                return event\n            });\n        setData(newdata);\n    }\n\n    const handleOpen = (i : number) => {\n        EventContext.setEvent(data![i]); \n        setOpen(true);        \n    };\n\n    const handleOpenNE = () => {\n        setOpenNE(true);\n    }\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleCloseNE = () => {\n        setOpenNE(false);\n        fetchEventData(); \n    };\n\n    async function updateStatus(stat : any, id : number){\n        let obj; \n        if (stat === true){\n            obj = {...AuthContext.data, user_metadata : {...AuthContext.data.user_metadata, events : AuthContext.data.user_metadata.events.concat([id])} }\n            AuthContext.setData(obj)\n        }else{\n            obj = {...AuthContext.data, user_metadata : {...AuthContext.data.user_metadata, events : AuthContext.data.user_metadata.events.filter(item => item !== id)} }\n            AuthContext.setData(obj)\n        }\n        sendreq(obj!);\n    }\n\n    async function sendreq(obj : Auth0user){\n\n        const newEvent : Metadata = { user_metadata : obj.user_metadata }\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, {\n            headers : {\n                'Authorization': `Bearer ${accessToken}`,\n                \"Content-Type\" : \"application/json\" \n            }, \n            method:\"PATCH\", \n            body: JSON.stringify(newEvent),\n        })\n\n        if(response.ok){\n            console.log(\"succ add\")\n        }else{\n            console.error(\"Publishing failed\");\n        }\n        fetchEventData();\n    }\n\n    const RedTypography = withStyles({\n        root: {\n          color: \"red\"\n        }\n      })(Typography);\n      \n\n    const classes = EventsTheme();\n\n    return (\n        <div>\n            { data ? \n            <>\n            { data.length === 0 ?             \n            <NotFoundPlayer/>\n            :\n            <>\n            <Grid container justify=\"center\">\n            {data?.map ((e,i) => \n            <Grid item  xs={12}  sm={12} md={12} lg={5}>\n                <Box borderRadius={9} m={3} py={3} className={classes.box}>              \n                    {AuthContext.data.app_metadata !== null ? \n                    <div className={classes.customizedButton} >\n                        <Button style={{ borderRadius: 50 }} variant=\"contained\" onClick={() => { handleOpen(i)}} color=\"secondary\" type=\"submit\" value=\"Submit\"> <EditIcon/> </Button>\n                        <Button style={{ borderRadius: 50}} variant=\"contained\" onClick={() => { openDeleteDialog(e.id) }} type=\"submit\" value=\"Submit\"> <DeleteIcon style={{ fill : 'red'}}/> </Button>\n                    </div>\n                    : \"\" }\n                        <Grid container>\n                            <Grid item md={7} xs={12}>\n                                <Link to={`/events/${e.id}`} style={{ textDecoration: 'none', color : 'black' }}>\n                                    <Grid container>                                        \n                                        <Grid item xs={4}>                                            \n                                            <Box className={classes.eventContainer} borderRadius={10} pt={2} pb={2} mt={1} ml={2} mr={2}>\n                                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                                                    <Grid item><Typography><Moment format=\"MMM\">{e.dateTime.toString()}</Moment> </Typography></Grid>\n                                                    <Grid item><Typography variant=\"h5\"><Moment format=\"Do\">{e.dateTime.toString()}</Moment></Typography></Grid>\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n                                        <Grid item xs={8}>\n                                            <Typography variant=\"h4\" gutterBottom>{e.title}</Typography>\n                                            <Grid container>\n                                                <Box className={classes.centerSVG}>\n                                                    <ScheduleIcon style={{fill: \"red\"}}/>\n                                                    <Box mx={0.3}></Box>\n                                                    <RedTypography><Moment format=\"LT\">{e.dateTime.toString()}</Moment></RedTypography> <RedTypography> <Box mx={1}>-</Box> </RedTypography> <RedTypography><Moment format=\"LT\">{e.finishedDateTime.toString()}</Moment></RedTypography> \n                                                </Box>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Link> \n                            </Grid>\n                            <Grid item md={5} xs={12}>\n                                <Grid container justify=\"flex-end\">\n                                    \n                                    <Grid item xs={3}>\n                                    </Grid>\n\n                                    {e.type === \"\" ? \n                                    <Grid item xs={7} className={classes.leftButtons}>\n                                    </Grid>\n                                    :\n                                    <Grid item xs={7} className={classes.leftButtons}>\n                                        <Box mr={2} borderRadius={20} pr={1.5} pl={1.5} pt={1} pb={1} bgcolor=\"secondary.light\" style={{ textAlign : 'center'}}>\n                                            <Typography>{e.type}</Typography>\n                                        </Box>\n                                    </Grid>     \n                                    }\n                                    \n                                    {e.linkedExpertise && e.linkedInterests ?\n                                    <Grid item xs={3} className={classes.leftButtons}>\n                                        <Box pt={0.5}>\n                                            <StarIcon style={{fill: \"#E86161\"}} fontSize=\"large\"/>\n                                        </Box>\n                                    </Grid>\n                                    : e.linkedExpertise ?\n                                    <Grid item xs={3} className={classes.leftButtons}>\n                                        <Box pt={0.5}>\n                                            <StarIcon style={{fill: \"#7ED6F0\"}} fontSize=\"large\"/>\n                                        </Box>\n                                    </Grid>\n                                    : e.linkedInterests ? \n                                    <Grid item xs={3} className={classes.leftButtons}>\n                                        <Box pt={0.5}>\n                                            <StarIcon style={{fill: \"#A9F0BA\"}} fontSize=\"large\"/>\n                                        </Box>\n                                    </Grid>\n                                    : <> </>\n                                    }\n                                    <Grid item xs={7} className={classes.leftButtons}>\n                                        <Box mr={2}>\n                                            <Button\n                                                style={{ borderRadius : 20, padding : 0}}\n                                                variant=\"contained\"\n                                                size=\"small\"\n                                                fullWidth\n                                                >\n                                                {AuthContext.data.user_metadata.events.includes(e.id) ? <> Going</> : <>Not Going</>}\n                                                <Checkbox\n                                                icon={<CheckCircleOutlinedIcon  \n                                                style={{ fill: '#8BC34A'}} />}\n                                                checkedIcon={<CheckCircleIcon style={{ fill: '#8BC34A' }} />}\n                                                onChange={status => updateStatus(status.target.checked, e.id)}\n                                                checked={AuthContext.data.user_metadata.events.includes(e.id)}\n                                                />\n                                            </Button>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>                \n            )}\n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle>\n                            <Box display=\"flex\" alignItems=\"center\">\n                                <Box flexGrow={1}> <Typography variant=\"h4\">Edit an event</Typography></Box>\n                                <Box>\n                                <IconButton onClick={handleClose}> <CancelIcon style={{ fill : 'red' }} /> </IconButton>\n                                </Box>\n                            </Box>\n                        </DialogTitle>\n                        <DialogContent>\n                               <EditEvent dialog={() => setOpen(false)}/>\n                        </DialogContent>\n                    </Dialog> \n            </Grid>\n            </>\n            }\n            </>\n            : \n            <Loading/>\n            }\n\n            <Dialog open={openNE} onClose={handleCloseNE} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"id\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1}> <Typography variant=\"h4\">Create an event</Typography></Box>\n                    <Box>\n                        <IconButton onClick={handleCloseNE}> <CancelIcon style={{ fill : 'red' }} /> </IconButton>\n                    </Box>\n                </Box>\n                </DialogTitle>\n                <DialogContent>\n                    <CreateEvent dialog={() => setOpenNE(false)}/>\n                </DialogContent>\n            </Dialog>\n\n            <Dialog open={openDelete} onClose={handleCloseDelete} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle><Typography variant=\"h5\">Are you sure you want to delete the event?</Typography></DialogTitle>\n            <DialogActions>\n                <Button onClick={() => handleDelete()} variant=\"contained\" color=\"primary\" style={{ backgroundColor : 'red'}}> Delete Event </Button>\n                <Button onClick={() => handleCloseDelete()} variant=\"contained\" color=\"primary\"> Cancel </Button>\n            </DialogActions>\n            </Dialog> \n\n            <Fab size=\"large\" color=\"primary\" aria-label=\"add\" className={classes.fab}>\n                <Button onClick={(e) => handleOpenNE()} > <AddIcon/> </Button>\n            </Fab>\n            \n        </div>\n    )\n}\n\nexport default UpcomingEvents","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx",["192","193","194","195","196","197"],"import { Grid, Box, Avatar, Button, TextField, FormControl, InputLabel, Select, MenuItem, Chip, Checkbox, createStyles, makeStyles, Theme, FormControlLabel, Hidden, DialogTitle, DialogContent, Dialog, Typography, DialogActions } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport React, { useContext, useEffect, useState } from 'react'\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { Auth0Context } from '../context/Auth0Context';\nimport { AllSubjects } from '../config/TagSystem'\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useSnackbar } from 'notistack';\nimport Points from './Points';\nimport DepartmentObj from '../config/Department'; \nimport EmailIcon from '@material-ui/icons/Email';\nimport UserTheme from '../themes/UserTheme';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport validator from 'validator';\n\n\nfunction EditUserProfile() {\n    const AuthContext = useContext(Auth0Context);\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const { enqueueSnackbar } = useSnackbar();\n\n    //Editable Fields\n    const [name, setName] = useState<string>(\"\"); \n    const [school, setSchool] = useState<string>(\"\"); \n    const [department, setDepartment] = useState<string>(\"\"); \n    const [careerStage, setCareerStage] = useState<string>(\"\"); \n    const [research, setResearch] = useState<string>(\"\"); \n    const [interests, setInterest] = useState<String[]>([]); \n    const [expertise, setExpertise] = useState<String[]>([]); \n    const [available, setAvailable] = useState(false); \n    const [graduation, setGraduation] = useState(new Date()); \n    const [sussexURL, setSussexURL] = useState<string>(\"\"); \n    const [linkedIn, setLinkedIn] = useState<string>(\"\"); \n    const [openDelete, setOpenDelete] = useState(false); \n\n\n    const [validatedName, setValidatedName] = useState(true); \n    const [validatedSP, setValidatedSP] = useState(true); \n    const [validatedLP, setValidatedLP] = useState(true)\n\n    useEffect(() => {\n        LoadStates(); \n    }, []);\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n\n    function LoadStates(){\n        if (AuthContext.data !== undefined ){\n            setName(AuthContext.data.name); \n            setSchool(AuthContext.data.user_metadata.education.school); \n            setDepartment(AuthContext.data.user_metadata.education.department); \n            setCareerStage(AuthContext.data.user_metadata.education.careerStage); \n            setGraduation(new Date (AuthContext.data.user_metadata.education.graduationDate)); \n            setInterest(AuthContext.data.user_metadata.interest); \n            setResearch(AuthContext.data.user_metadata.research);\n            setSussexURL(AuthContext.data.user_metadata.social.sussex);\n            setLinkedIn(AuthContext.data.user_metadata.social.linkedIn);\n            setExpertise(AuthContext.data.user_metadata.expertise); \n\n            if (AuthContext.data.user_metadata.education.available === \"true\")\n            {\n                setAvailable(true)\n            }\n        }\n    }\n\n    function DeleteChipIntrest(e : String){\n        setInterest(interests.filter(subject => subject !== e));\n    }\n\n    function DeleteChipExpertise(e : String){\n        setExpertise(expertise.filter(subject => subject !== e));\n    }\n\n    const handleDate = (date: Date) => {\n        setGraduation(date)\n    };\n\n    async function Validation(){\n\n        if ((sussexURL === \"\" || validator.isURL(sussexURL)) && (linkedIn  === \"\" ||  validator.isURL(linkedIn))) \n        {\n            setValidatedSP(true);\n            setValidatedLP(true);\n            UpdateUser();\n        } \n        else if (sussexURL === \"\" || validator.isURL(sussexURL) )\n        {\n            setValidatedSP(true);\n            if (linkedIn  !== \"\" ||  !validator.isURL(linkedIn)){\n                setValidatedLP(false);\n            }\n        }\n        else if (linkedIn  === \"\" ||  validator.isURL(linkedIn))\n        {\n            setValidatedLP(true);\n            if (sussexURL  !== \"\" ||  !validator.isURL(sussexURL)){\n                setValidatedSP(false);\n            }\n        }\n        else {\n            setValidatedSP(false);\n            setValidatedLP(false);\n        }\n    }\n\n    async function UpdateUser(){\n\n        const stravail = available.toString(); \n        const postreq = (\n            {   \"name\" : name, \n                \"user_metadata\" : {\n                \"social\": {\n                    \"sussex\": sussexURL,\n                    \"linkedIn\" : linkedIn,\n                  },\n                  \"education\": {\n                    \"School\": school,\n                    \"Department\": department,\n                    \"CareerStage\": careerStage,\n                    \"GraduationDate\": graduation,\n                    \"Available\": stravail\n                  },\n                  \"research\": research,\n                  \"expertise\": expertise,\n                  \"interest\": interests, \n                  \"events\" : AuthContext.data.user_metadata.events\n                }\n            }\n        )\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/UpdateUser/${AuthContext.data.user_id}`, { \n            method:\"PATCH\", \n            body: JSON.stringify(postreq),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            console.log('fdfd')\n            enqueueSnackbar('User has been updated', { variant : \"success\" });\n            fetchData(); \n            ChangeCancel(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function openDeleteDialog(){\n        setOpenDelete(true); \n    }\n\n    function handleCloseDelete(){\n        setOpenDelete(false); \n    }\n    async function handleDelete(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Delete/${AuthContext.data.user_id}`, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            },\n            method:\"DELETE\", \n        })\n        if(response.ok){\n            \n            enqueueSnackbar('User has been deleted', { variant : \"success\" });\n            handleCloseDelete();\n            Auth0.logout(); \n        }else{\n            enqueueSnackbar('An error occured', { variant : \"error\" });\n        }\n    }\n\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    function ChangeCancel(){\n        AuthContext.setEdit(false)\n    }\n\n    function changeInterest(value : string | null){\n        if (value !== null ){\n            if (interests.includes(value)){   \n                console.log(\"Yu Blind!\")\n            }else{\n                setInterest(state => [...state, value])\n            }\n        }\n    }\n    \n    function changeExpertise(value : string | null){\n        if (value !== null ){\n            if (expertise.includes(value)){   \n                console.log(\"Yu Blind!\")\n            }else{\n                setExpertise(state => [...state, value])\n            }\n        }\n    }\n\n    const classes = UserTheme(); \n\n    \n    return (\n        <form noValidate autoComplete=\"off\">\n        <Box my={4}>\n        </Box>\n        <Hidden xsDown>\n            <Box my={7}>\n            </Box>\n        </Hidden>\n        <div className={classes.root}>\n        <Grid container justify=\"center\" className={classes.centerMobile}>\n        <Grid item xs={12} lg={9}>\n            <Box borderRadius={5} className={classes.glass}>\n            <Grid container className={classes.centerMobile}>\n            <Grid item lg={3} xs={12}>\n                <Grid container justify = \"center\">\n                    <Box m={2}>\n                        <Box className=\"small\" borderRadius=\"borderRadius\">\n                        <   Avatar alt=\"Profile Picture\" className={classes.large} src={AuthContext.data ? AuthContext.data.picture : \"\"}/>\n                        </Box>\n                    </Box>\n                    <Hidden only={['lg', 'xl']}>\n                        <Button onClick={ChangeCancel}> <CancelIcon/> </Button>\n                        <Button onClick={Validation}>  <SaveIcon style={{fill: \"green\"}}/> </Button>         \n                    </Hidden>\n                </Grid>\n            </Grid>\n            <Grid item lg={8} xs={8}>\n                <Box borderRadius={2}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Grid container justify=\"center\">\n                            <Grid item xs={12} md={6}>\n                            <TextField \n                                fullWidth\n                                variant=\"outlined\" \n                                value={name}\n                                error={!validatedName}\n                                helperText={validatedName ? \"\" : \"Must be a name\"}\n                                label=\"Name\" \n                                margin=\"dense\"\n                                onChange={e => setName(e.target.value)} \n                                defaultValue={AuthContext.data?.name}/>\n                            </Grid>\n                            <Hidden xsDown>\n                                <Box mx={2}></Box>\n                            </Hidden>\n                            <Grid item xs={12} md={5}>\n                                <FormControlLabel\n                                control={<Checkbox value={available} checked={available} onChange={e => setAvailable(e.target.checked)}/>}\n                                label=\"Available for Ad Hoc Project Work\"\n                                />  \n                            </Grid>  \n\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container justify=\"center\">\n                            <Grid item xs={12} md={6}>         \n                                <TextField\n                                    multiline\n                                    margin=\"dense\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    error={!validatedSP}\n                                    helperText={validatedSP ? \"\" : \"Must be a valid URL or blank\"}\n                                    onChange={e =>  setSussexURL(e.target.value)}\n                                    value={sussexURL}\n                                    label=\"Sussex URL\"\n                                    defaultValue={sussexURL}/> \n                            </Grid>\n                            <Hidden xsDown>\n                                <Box mx={2}></Box>\n                            </Hidden>\n                            <Grid item xs={12} md={5}>         \n                                <TextField\n                                    multiline\n                                    margin=\"dense\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    error={!validatedLP}\n                                    helperText={validatedLP ? \"\" : \"Must be a valid URL or blank\"}\n                                    value={linkedIn}\n                                    onChange={e => setLinkedIn(e.target.value)}\n                                    label=\"LinkedIn URL\"\n                                    defaultValue={linkedIn}/> \n                            </Grid>\n                            <Grid item xs={12} md={5} >         \n                                <Box m={1}>{} </Box>\n                                <div style={{ width : '100%'}}>\n                                    <Box>\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                        <KeyboardDatePicker\n                                         margin=\"normal\"\n                                         id=\"date-picker-dialog\"\n                                         label=\"Graduation Date\"\n                                         format=\"MM/dd/yyyy\"\n                                         defaultValue={graduation}\n                                         value={graduation}\n                                         onChange={(e : any) => handleDate(e)}\n                                         KeyboardButtonProps={{\n                                         'aria-label': 'change date',\n                                         }}\n                                        />\n                                        </MuiPickersUtilsProvider>\n                                    </Box>\n                                    </div>\n\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                </Box>\n            </Grid>\n            <Hidden mdDown>\n                <Grid item lg={1} xs={1}>\n                    <Box m={2}>\n                        <Button \n                            onClick={ChangeCancel}\n                             style={{ backgroundColor : 'white',fontSize : \"15px\"}}\n                             variant=\"outlined\"\n                             startIcon={<CancelIcon/>}>\n                             Cancel\n                        </Button>\n                    </Box>\n                    <Box m={2}> \n                        <Button \n                            onClick={Validation} \n                            variant=\"outlined\"\n                            style={{ backgroundColor : 'green', color : \"white\",  fontSize : \"15px\"}}\n                            startIcon={<SaveIcon/>}>\n                            Save\n                        </Button>\n                    </Box>\n                </Grid>\n            </Hidden>\n            </Grid>\n            <Grid container>\n                <Grid item xs={12} lg={3}>\n                    <Box my={7}>\n                        <Points/>\n                    </Box>\n                </Grid>\n                <Grid item xs={12} lg={9}>\n                    <Box>\n                        <Box m={3} p={3} borderRadius={8} bgcolor=\"primary.light\">\n                            <Grid container justify=\"center\">\n                            <Hidden xsDown>\n                                <Grid item lg={6} xs={12}>\n                                    <Box className={classes.centerSVG}> <EmailIcon/> {AuthContext.data.email}</Box>\n                                </Grid>\n                            </Hidden>\n\n                            <Hidden only={['lg', 'xl', 'md', 'sm']}>\n                                <Grid item lg={6} xs={12}>\n                                    <Grid container justify=\"center\">\n                                        <Box className={classes.centerSVG}> <EmailIcon/> {AuthContext.data.email}</Box>\n                                    </Grid>\n                                </Grid>\n                            </Hidden>\n\n                            <Grid item lg={6} xs={12} >\n                                <FormControl variant=\"outlined\" margin=\"dense\" size=\"small\" style={{minWidth: 120}}>\n                                <InputLabel>School</InputLabel>\n                                    <Select onChange={(e : any) => setSchool(e.target.value)} label=\"School\" >\n                                        <MenuItem value=\"University of Sussex Business School\">University of Sussex Business School</MenuItem>\n                                        <MenuItem value=\"School of Education and Social Work\">School of Education and Social Work</MenuItem>\n                                        <MenuItem value=\"School of Engineering and Informatics\">School of Engineering and Informatics</MenuItem>\n                                        <MenuItem value=\"School of Global Studies\">School of Global Studies</MenuItem>\n                                        <MenuItem value=\"School of Law, Politics and Sociology\">School of Law, Politics and Sociology</MenuItem>\n                                        <MenuItem value=\"School of Life Sciences\">School of Life Sciences</MenuItem>\n                                        <MenuItem value=\"School of Mathematical and Physical Sciences\">School of Mathematical and Physical Sciences</MenuItem>\n                                        <MenuItem value=\"School of Media, Arts and Humanities\">School of Media, Arts and Humanities</MenuItem>\n                                        <MenuItem value=\"School of Psychology\">School of Psychology</MenuItem>\n                                        <MenuItem value=\"Brighton and Sussex Medical School\">Brighton and Sussex Medical School</MenuItem>\n                                        <MenuItem value=\"Doctoral School and Research groups\">Doctoral School and Research groups</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item lg={6} xs={12}>\n                                <FormControl variant=\"outlined\" margin=\"dense\" size=\"small\" style={{minWidth: 150}}>\n                                <InputLabel>Career Stage</InputLabel>\n                                    <Select \n                                    defaultValue={careerStage} \n                                    onChange={ (e : any) => setCareerStage(e.target.value)} \n                                    label=\"Career Stage\" >\n                                    <MenuItem value=\"UG\">UG</MenuItem>\n                                    <MenuItem value=\"PhD\">PhD</MenuItem>\n                                    <MenuItem value=\"Faculty\">Faculty</MenuItem>\n                                    <MenuItem value=\"Postdoc\">Postdoc</MenuItem>\n                                    <MenuItem value=\"MSc\">MSc</MenuItem>\n                                    <MenuItem value=\"Professional Services\">Professional Services</MenuItem>\n                                    </Select>\n                                </FormControl>\n                            </Grid>\n                            <Grid item lg={6} xs={12}>\n                                    { school === \"\" ? \n                                        <FormControl variant=\"outlined\"  margin=\"dense\" size=\"small\" style={{minWidth: 200}} disabled>\n                                        <InputLabel>Department</InputLabel>\n                                        <Select /> \n                                        </FormControl> \n                                        :\n                                        <FormControl variant=\"outlined\"  margin=\"dense\" size=\"small\" style={{minWidth: 200}}>\n                                        <InputLabel>Department</InputLabel>\n                                            <Select\n                                                onChange={(e : any) => setDepartment(e.target.value)} label=\"Department\"\n                                                >\n                                                { school === \"University of Sussex Business School\" ?  \n                                                (DepartmentObj['University of Sussex Business School'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem> \n                                                ))\n                                                : school === \"School of Education and Social Work\" ?  \n                                                (DepartmentObj['School of Education and Social Work'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))\n                                                : school === \"School of Engineering and Informatics\" ?  \n                                                (DepartmentObj['School of Engineering and Informatics'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))\n                                                : school === \"School of Global Studies\" ?  \n                                                (DepartmentObj['School of Global Studies'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))\n                                                : school === \"School of Law, Politics and Sociology\" ?  \n                                                (DepartmentObj['School of Law, Politics and Sociology'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))\n                                                : school === \"School of Life Sciences\" ?  \n                                                (DepartmentObj['School of Life Sciences'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))\n                                                : school === \"School of Mathematical and Physical Sciences\" ?  \n                                                (DepartmentObj['School of Mathematical and Physical Sciences'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))                                \n                                                : school === \"School of Media, Arts and Humanities\" ?\n                                                (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))  \n                                                : school === \"School of Psychology\" ?\n                                                (DepartmentObj['School of Psychology'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))  \n                                                : school === \"Brighton and Sussex Medical School\" ?\n                                                (DepartmentObj['Brighton and Sussex Medical School'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))  \n                                                : school === \"Doctoral School and Research groups\" ?\n                                                (DepartmentObj['Doctoral School and Research groups'].map (dep => \n                                                <MenuItem value={dep}>{dep}</MenuItem>\n                                                ))  \n                                                : <p></p>\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                    }\n    \n                            </Grid>\n                            </Grid>\n                        </Box>\n                    </Box>\n                </Grid>\n            </Grid>\n            <Grid container >\n                <Grid item xs={11} lg={6} style={{ padding : '10px'}}>\n                    <Autocomplete\n                    fullWidth\n                    onChange={(event, value, reason) => changeExpertise(value)}\n                    options={AllSubjects}\n                    getOptionLabel={(option) => option}\n                    renderInput={(params) => <TextField {...params} margin=\"dense\" label=\"Add Expertise\" variant=\"outlined\" />}\n                />\n                <Box my={2}>\n                    {expertise.map( (e) => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e} onDelete={() => DeleteChipExpertise(e)} ></Chip>)}\n                </Box>\n                \n                </Grid>\n                <Grid item xs={11} lg={6} style={{ padding : '10px'}}>\n                    <Autocomplete\n                    fullWidth\n                    onChange={(event, value, reason) => changeInterest(value)}\n                    options={AllSubjects}\n                    getOptionLabel={(option) => option}\n                    renderInput={(params) => <TextField {...params} margin=\"dense\" label=\"Add Interests\" variant=\"outlined\" />}\n                />\n                    <Box my={2}>\n                        {interests.map( (e) => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e} onDelete={() => DeleteChipIntrest(e)} ></Chip>)}\n                    </Box>\n    \n                </Grid>\n            </Grid>\n            </Box>\n                <Grid container justify=\"center\">\n                <Grid item xs={11} lg={12} alignItems=\"center\">\n                    <Box borderRadius={5} className={classes.glass}  mt={5} mb={2}>                        \n                        <TextField\n                        multiline\n                        rows={4}\n                        variant=\"outlined\"\n                        fullWidth\n                        onChange={e => setResearch(e.target.value)}\n                        label=\"Your research interests\"\n                        defaultValue={research}/>\n                    </Box>\n                    \n                    <Grid container justify=\"center\" style={{padding : '4px'}}>\n                    <Button\n                    style={{ backgroundColor : 'red', fontSize : \"15px\"}}\n                    variant=\"contained\"\n                    onClick={e => openDeleteDialog()}\n                    startIcon={<DeleteIcon style={{ fontSize : \"25px\"}} />}\n                    >Delete Profile</Button>\n                    </Grid>\n                    <Box mb={8}></Box>\n                </Grid>\n                </Grid>\n\n                <Dialog open={openDelete} onClose={handleCloseDelete} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle style={{ textAlign : 'center'}}>\n                    <Typography variant=\"h5\">Are you sure you want to delete</Typography>\n                    <Typography variant=\"h5\"> your profile?</Typography>\n                </DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => handleDelete()} variant=\"contained\" style={{ backgroundColor : 'red'}}> Delete User Profile </Button>\n                    <Button onClick={() => handleCloseDelete()} variant=\"contained\" color=\"secondary\"> Cancel </Button>\n                </DialogActions>\n                </Dialog>                  \n\n            </Grid>\n        </Grid>\n    </div>\n    </form>\n    )\n}\n\nexport default EditUserProfile","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx",["198","199","200","201","202","203"],"import { Box, Button, Dialog, DialogActions, DialogTitle, Grid, Typography, withStyles } from '@material-ui/core';\nimport React, {useState, useEffect, useContext} from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Auth0Context } from '../../context/Auth0Context';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Link } from 'react-router-dom';\nimport { EditEventContext } from '../../context/EditEventContext';\nimport Auth0user from '../../models/Auth0user';\nimport Loading from '../../config/Loading'; \nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport Moment from 'react-moment';\nimport EventsTheme from '../../themes/EventsTheme';\nimport { useSnackbar } from 'notistack';\nimport NotFoundPlayer from '../../config/NotFoundPlayer';\n\n\nfunction PastEvents() {\n    const [data, setData] = useState<EventEntity[]>([]);\n    const [open, setOpen] = useState(false);\n    const [openNE, setOpenNE] = useState(false); \n    const Auth0 = useAuth0();\n    const AuthContext = useContext(Auth0Context);\n    const EventContext = useContext(EditEventContext);\n    const [accessToken, setAccessToken] = useState(''); \n    const [openDelete, setOpenDelete] = useState(false); \n    const [confirmDelete, setConfirmDelete] = useState<number>(); \n    const { enqueueSnackbar } = useSnackbar();\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0]);\n\n    useEffect(() => {\n        fetchData();\n    }, [accessToken, openNE, open])\n\n    useEffect(() => {\n        fetchEventData();\n    }, [AuthContext])\n\n    function openDeleteDialog( id : number){\n        setOpenDelete(true); \n        setConfirmDelete(id); \n    }\n\n    function handleCloseDelete(){\n        setOpenDelete(false); \n    }\n    async function handleDelete(){\n        setOpenDelete(false); \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${confirmDelete}`, {\n            method : \"DELETE\", \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        if(response.ok){\n            enqueueSnackbar('Event has been deleted!', { variant : \"success\" });\n            fetchEventData(); \n        }else{\n            enqueueSnackbar('Event has not been deleted', { variant : \"error\" });\n            fetchEventData(); \n        }  \n    }\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function fetchEventData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Past`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        setData(await response.json());\n    }\n\n\n    const GreyTypography = withStyles({\n    root: {\n        color: \"#5E5E5E\"\n    }\n    })(Typography);\n      \n\n    const classes = EventsTheme();\n\n    return (\n        <>\n            {data ? \n            <>\n            { data.length === 0 ? \n                <NotFoundPlayer/> \n            :\n            <>\n            <Grid container justify=\"center\">\n\n            {data?.map ((e,i) => \n            <Grid item  xs={12}  sm={12} md={12} lg={5}>\n                <Box borderRadius={9} m={3} py={3} className={classes.box}>              \n                    {AuthContext.data.app_metadata !== null ? \n                    <div className={classes.customizedButton} >\n                        <Button style={{ borderRadius: 50}} variant=\"contained\" onClick={() => { openDeleteDialog(e.id) }} type=\"submit\" value=\"Submit\"> <DeleteIcon style={{ fill : 'red'}}/> </Button>\n                    </div>\n                    : \"\" }\n                        <Grid container>\n                            <Grid item md={7} xs={12}>\n                                <Link to={`/events/${e.id}`} style={{ textDecoration: 'none', color : 'black' }}>\n                                    <Grid container>                                        \n                                        <Grid item xs={4}>                                            \n                                            <Box style={{ backgroundColor : '#D3D3D3'}} borderRadius={10} pt={2} pb={2} mt={1} ml={2} mr={2}>\n                                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                                                    <Grid item><Typography><Moment format=\"MMM\">{e.dateTime.toString()}</Moment> </Typography></Grid>\n                                                    <Grid item><Typography variant=\"h5\"><Moment format=\"Do\">{e.dateTime.toString()}</Moment></Typography></Grid>\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n                                        <Grid item xs={8}>\n                                            <GreyTypography variant=\"h4\" gutterBottom>{e.title}</GreyTypography>\n                                            <Grid container>\n                                                <Box className={classes.centerSVG}>\n                                                    <ScheduleIcon style={{fill: \"#5E5E5E\"}}/>\n                                                    <Box mx={0.3}></Box>\n                                                    <GreyTypography><Moment format=\"LT\">{e.dateTime.toString()}</Moment></GreyTypography> <GreyTypography> <Box mx={1}>-</Box> </GreyTypography> <GreyTypography><Moment format=\"LT\">{e.finishedDateTime.toString()}</Moment></GreyTypography> \n                                                </Box>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Link> \n                            </Grid>\n                            <Grid item md={5} xs={12}>\n                                <Grid container justify=\"flex-end\">\n                                    \n                                    <Grid item xs={3}>\n                                    </Grid>\n\n                                    {e.type === \"\" ? \n                                    <Grid item xs={7} className={classes.leftButtons}>\n                                    </Grid>\n                                    :\n                                    <Grid item xs={7} className={classes.leftButtons}>\n                                        <Box mr={2} borderRadius={20} pr={1.5} pl={1.5} pt={1} pb={1} style={{ textAlign : 'center', backgroundColor : '#D3D3D3'}}>\n                                            <Typography>{e.type}</Typography>\n                                        </Box>\n                                    </Grid>     \n                                    }\n                                    \n                                    <Grid item xs={7} className={classes.leftButtons}>\n                                        <Box mr={2}>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>\n            )}\n            </Grid>\n            </>\n            }\n            </>\n            : <Loading/>}\n            \n            <Dialog open={openDelete} onClose={handleCloseDelete} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle><Typography variant=\"h5\">Are you sure you want to delete the event?</Typography></DialogTitle>\n            <DialogActions>\n                <Button onClick={() => handleDelete()} variant=\"contained\" color=\"primary\" style={{ backgroundColor : 'red'}}> Delete Event </Button>\n                <Button onClick={() => handleCloseDelete()} variant=\"contained\" color=\"primary\"> Cancel </Button>\n            </DialogActions>\n            </Dialog> \n            \n        </>\n    )\n}\n\nexport default PastEvents","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx",["204"],"import React, { useEffect, useState } from 'react'\nimport { ResponsivePie } from '@nivo/pie'\nimport { useAuth0 } from '@auth0/auth0-react';\n\nfunction PieChartInterest() {\n    \n    const Auth0 = useAuth0();    \n    const [PieData, setPieData]= useState([]); \n    const [accessToken, setAccessToken] = useState(\"\");\n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        getData();\n    }, [Auth0, accessToken])\n        \n    async function getData(){\n        const getData = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/PieChart/Interest`, { \n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        setPieData(await getData.json());  \n    }\n\n\n    return (\n        <ResponsivePie\n            data={PieData}\n            margin={{ top: 40, right: 100, bottom: 80, left: 100 }}\n            innerRadius={0.5}\n            padAngle={0.7}\n            cornerRadius={3}\n            colors={{ scheme: 'nivo' }}\n            borderWidth={1}\n            borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\n            radialLabelsSkipAngle={10}\n            radialLabelsTextColor=\"#333333\"\n            radialLabelsLinkColor={{ from: 'color' }}\n            sliceLabelsSkipAngle={10}\n            sliceLabelsTextColor=\"#333333\"\n        />\n    )\n}\n\nexport default PieChartInterest\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx",["205"],"import DateFnsUtils from '@date-io/date-fns'\nimport { TextField, FormControl, InputLabel, Select, MenuItem, Grid, FormControlLabel, Checkbox, Box, Chip, Button } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useSnackbar } from 'notistack'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext'; \nimport { AllSubjects } from '../../config/TagSystem'\nimport { useAuth0 } from '@auth0/auth0-react'\n\ninterface EditEventProps{\n    dialog : Function\n}\n\nfunction EditEvent(props : EditEventProps) {\n    const EventContext = useContext(EditEventContext)\n    const [tags, setTags] = useState<string[]>([]);\n    const { enqueueSnackbar } = useSnackbar();\n    const [accessToken, setAccessToken] = useState(\"\");\n    const Auth0 = useAuth0();    \n\n    let mes = \"\"\n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n          }\n        setTags(EventContext.event.tags.split(',')); \n    }, [Auth0]); \n\n    function changeTags(value : string | null){\n        mes = \"\"\n        if (value !== null ){\n            if (tags.includes(value)){   \n            }else{\n                setTags(state => [...state, value])\n            }\n        }\n    }\n    async function UpdateEvent(e : any){\n        e.preventDefault();\n    \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n        Alltags = Alltags.slice(0,-1)\n        EventContext.event.tags = Alltags; \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${EventContext.event.id}`, {\n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n              },\n            method:\"POST\", \n            body: JSON.stringify(EventContext.event),\n        })\n        if(response.ok){\n            enqueueSnackbar('Event has been updated', { variant : \"success\" });\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function changeChips(e : String){\n        setTags(tags.filter(subject => subject !== e))\n    }\n\n    const handleStartDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, dateTime: date}); \n    };\n\n    const handleFinishDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, finishedDateTime : date}); \n    };\n\n    return (\n        <div>\n            <TextField\n                autoFocus\n                variant=\"outlined\" \n                fullWidth\n                defaultValue={EventContext.event.title}\n                onChange={(e) => {EventContext.setEvent({...EventContext.event, title : e.target.value})}}\n                margin=\"normal\" \n                label=\"Title\"\n            />\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n                    <Grid container justify=\"space-around\">\n                        <Box p={1}> \n                            <KeyboardDatePicker\n                                disableToolbar\n                                variant=\"inline\"\n                                format=\"MM/dd/yyyy\"\n                                disablePast={true}\n                                margin=\"normal\"\n                                id=\"date-picker-inline\"\n                                label=\"Pick a Date\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}/>\n                        </Box>\n\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Pick a Time\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}/>\n                        </Box>\n\n                    </Grid>\n                </MuiPickersUtilsProvider>\n\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Box m={1}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        disablePast={true}\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Date\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}/>\n                    </Box>\n                    <Box p={1}>\n                    <KeyboardTimePicker\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        label=\"Pick a Time\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}/>\n                    </Box>\n                </Grid>\n            </MuiPickersUtilsProvider>\n\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                    <FormControl variant=\"outlined\">\n                        <InputLabel>Type</InputLabel>\n                        <Select \n                            style={{ minWidth: 220 }}\n                            label=\"Event Type\"\n                            defaultValue={EventContext.event.type}\n                            onChange={(e : React.ChangeEvent<any>) => \n                            {EventContext.setEvent({...EventContext.event, type : e.target.value})}}\n                            >\n                            <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                            <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                            <MenuItem value=\"Networking\">Networking</MenuItem>\n                            <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12} >\n                    <Box m={1}>\n                        <FormControlLabel\n                        control={\n                        <Checkbox \n                        checked={EventContext.event.isDISCUS}\n                        name=\"isDiscus\" \n                        onChange={(e) => {\n                        EventContext.setEvent({...EventContext.event, isDISCUS : e.target.checked})\n                        }}/>}\n                        label=\"Is a DISCUS event\"\n                        /> \n                    </Box>\n                </Grid>\n            </Grid>\n\n\n            <Box my={2}>\n                <TextField\n                    autoFocus\n                    variant=\"outlined\" \n                    defaultValue={EventContext.event.url}\n                    onChange={(e) => {\n                        EventContext.setEvent({...EventContext.event, url : e.target.value})\n                    }}\n                    id=\"name\"\n                    label=\"URL\"\n                    fullWidth/>\n            </Box>\n                <Box my={2}>\n                    <TextField\n                        autoFocus\n                        multiline\n                        rows={5}\n                        variant=\"outlined\" \n                        defaultValue={EventContext.event.description}\n                        onChange={(e) => {EventContext.setEvent({...EventContext.event, description : e.target.value})}}\n                        margin=\"dense\"\n                        label=\"Description\"\n                        fullWidth\n                    />\n                </Box>\n\n                <Box my={3}>\n                    <Autocomplete\n                        fullWidth\n                        onChange={(event, value, reason) => changeTags(value)}\n                        id=\"multiple-limit-tags\"\n                        inputValue={mes}\n                        options={AllSubjects}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => <TextField {...params} label=\"Add Tags\" variant=\"outlined\" />}\n                    />\n                        <Box my={3}>\n                            {tags.map( (e) => <Chip label={e} style={{backgroundColor:'#24CAC3', margin : 2}} onDelete={() => changeChips(e)} ></Chip>)}\n                        </Box>\n                </Box>\n\n                <Button variant=\"contained\" color=\"secondary\" onClick={UpdateEvent}> save </Button>\n\n        </div>\n    )\n}\n\nexport default EditEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx",["206"],"import { Box, Button, Checkbox, FormControl, FormControlLabel, Grid, MenuItem, Select, Tooltip } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { Auth0Context } from '../../../context/Auth0Context';\nimport { AllSubjects } from '../../../config/TagSystem';\nimport { InputLabel } from '@material-ui/core';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Autocomplete } from '@material-ui/lab';\nimport { useSnackbar } from 'notistack';\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/date-fns';\n\ninterface CreateEventProps {\n    dialog : Function\n}\n\nfunction CreateEvent(props : CreateEventProps) {\n    const Auth0 = useAuth0();    \n    const [event, setEvent] = useState({title:\"\", dateTime: new Date() , finishedDateTime: new Date(), type:\"\", url:\"\", description:\"\",isDISCUS:true, isApproved : false, tags : \"\" }); \n    const [accessToken, setAccessToken] = useState(\"\");\n    const AuthContext = useContext(Auth0Context)\n    const [tags, setTags] = useState<string[]>([])\n    const { enqueueSnackbar } = useSnackbar();\n    const [validated, setValidated] = useState(true); \n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        fetchData(); \n    },[Auth0]);\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function publishEvent(){\n        \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n\n        const newEvent = {...event}\n            if(AuthContext.data.app_metadata !== null){\n                newEvent.isApproved = true;\n                setEvent(newEvent)\n        }\n\n        const newEventTags = {...event}\n        newEvent.tags = Alltags.slice(0,-1);\n        setEvent(newEventTags); \n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity`, {\n            method:\"POST\", \n            body: JSON.stringify(newEvent),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            if (AuthContext.data.app_metadata !== null)\n            {\n                enqueueSnackbar('Event has been created!', { variant : \"success\" });\n            } \n                else \n            {\n                enqueueSnackbar('Event will be published once authorised!', { variant : \"info\" });\n            }\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    const handleStartDate = (date: Date) => {\n        setEvent({...event, dateTime : date})\n    };\n\n    const handleFinishDate = (date: Date) => {\n        setEvent({...event, finishedDateTime : date})\n    };\n\n    return (\n        <>\n        <form noValidate autoComplete=\"off\">\n            <div>\n            <TextField\n                required\n                error={!validated}\n                label=\"Title\"\n                fullWidth={true} \n                variant=\"outlined\"\n                defaultValue=\"\"\n                onChange={(e) => setEvent({...event,title: String(e.target.value)})}\n                helperText={validated ? \"\" : \"Title cannot be blank.\"}\n            />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Box p={1}> \n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            disablePast\n                            label=\"Pick a Start Date\"\n                            value={event.dateTime}\n                            onChange={(e : any) => handleStartDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        </Box>\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Start Time\"\n                                value={event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n                    <Box p={1}> \n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"yyyy-MM-dd\"\n                        disablePast\n                        margin=\"normal\"\n                        minDate={event.dateTime}\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Finish Date\"\n                        value={event.finishedDateTime}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    </Box>\n                    <Box p={1}> \n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"Finish Time\"\n                            value={event.finishedDateTime}\n                            onChange={(e : any) => handleFinishDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change time',\n                            }}\n                        />\n                    </Box>\n                </Grid>\n            </Grid>\n            </MuiPickersUtilsProvider>\n\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                    <FormControl variant=\"outlined\">\n                        <InputLabel>Type</InputLabel>\n                        <Select\n                        style={{minWidth: 220}}\n                        onChange={(e) => setEvent({...event,type:String(e.target.value)})}\n                        label=\"Event Type\"\n                        >\n                        <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                        <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                        <MenuItem value=\"Networking\">Networking</MenuItem>\n                        <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12}>\n                    <Box m={1}>\n                        <FormControlLabel \n                            control={ <Checkbox \n                                    checked={event.isDISCUS} name=\"isDiscus\" \n                                    onChange={(e) => setEvent({...event,isDISCUS:Boolean(e.target.checked)})}\n                                    /> }\n                            label=\"A discus event\"/>\n                   </Box>\n                </Grid>\n            </Grid>\n\n            <Box>\n\n            </Box>\n            <Box my={1}>\n                <TextField \n                    margin=\"normal\" \n                    label=\"Registration URL\" \n                    variant=\"outlined\" \n                    fullWidth={true}\n                    type=\"text\" \n                    onChange={(e) => setEvent({...event,url:e.target.value})}/>\n            </Box>\n            <Box my={1} >\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Description\"\n                    multiline\n                    fullWidth={true}\n                    rows={4}\n                    onChange={(e) => setEvent({...event,description:String(e.target.value)})}\n                    variant=\"outlined\"/>\n            </Box>\n\n            <Box my={2}>\n                <Tooltip title=\"Add tags for users to be matched for events\">\n                    <Autocomplete\n                        multiple\n                        limitTags={5}\n                        id=\"set Interest\"\n                        onChange={(obj,value,reason) => setTags(value)}\n                        options={AllSubjects}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => (\n                        <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Add tags\" />\n                    )}\n                    />\n                </Tooltip>\n            </Box>\n            \n            <Box mb={2}>\n            <Button disabled={AuthContext.data === null} variant=\"contained\" value=\"Submit\" color=\"secondary\" \n                onClick = \n                    {() => {\n                            if (event.title === \"\") \n                            {\n                                setValidated(false);\n                            } \n                            else \n                            {\n                                setValidated(true);\n                                publishEvent(); \n                            }\n                        }\n                    }\n            >Submit</Button>\n            </Box>\n        </div>\n        </form>\n        </>\n    );\n}\n\nexport default CreateEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx",["207"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx",["208","209","210"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx",["211","212"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx",["213"],"import { Box, Button, ButtonBase, Dialog, DialogActions, DialogTitle, Grid, Hidden, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport React, { useEffect, useState } from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport Moment from 'react-moment';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Link } from 'react-router-dom';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { useAuth0 } from '@auth0/auth0-react';\n\nfunction ApproveEvents() {\n    const Auth0 = useAuth0();    \n    const [ eventsToApprove, setEventsToApprove] = useState<EventEntity[]>([]);\n    const { enqueueSnackbar } = useSnackbar();\n    const [openDelete, setOpenDelete] = useState(false); \n    const [eventid, setEventID] = useState<number>(); \n    const [accessToken, setAccessToken] = useState(\"\");\n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        getData();\n    }, [Auth0, accessToken])\n        \n    async function getData(){\n        const getData = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Unauthorized`, { \n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        setEventsToApprove(await getData.json());  \n    }\n\n    async function ApproveEvent(e : number){\n        const Authorize = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Approve/${e}`, { \n            method: \"PATCH\",\n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        if(Authorize.ok){\n            enqueueSnackbar('Event has been authorized', { variant : \"success\" });\n        }else{\n            console.error(\"Publishing failed\");\n        }\n        getData();\n    }\n    async function DeleteEvent(e : number){\n        const Authorize = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${e}`, { \n            method: \"DELETE\",\n            headers: {\n                'Authorization': `Bearer ${accessToken}`, \n                'Content-Type': 'application/json',\n            }\n        });\n        if(Authorize.ok){\n            enqueueSnackbar('Event has been deleted', { variant : \"success\" });\n        }else{\n            console.error(\"Publishing failed\");\n        }\n        handleCloseDelete(); \n        getData();\n    }\n\n    function openDeleteDialog(e : number){\n        setEventID(e); \n        setOpenDelete(true); \n    }\n\n    function handleCloseDelete(){\n        setOpenDelete(false); \n    }\n\n    return (\n        <Grid item xs={12} lg={12}>\n            <>\n                <Box my={4}>\n                    <Typography variant={\"h4\"}> Approve Events </Typography>\n                </Box>\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>Title</Typography></TableCell>\n                                <TableCell><Typography>More info</Typography></TableCell>\n                                <TableCell align=\"left\"><Typography>Start Date</Typography></TableCell>\n                                <TableCell align=\"left\"><Typography>End Date</Typography></TableCell>\n                                <TableCell align=\"left\"><Typography>Action</Typography></TableCell>\n                            </TableRow>\n                        </TableHead>\n                    <TableBody>\n                        {eventsToApprove.map((row) => (\n                            <TableRow>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.title}\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                <Link to={`/events/${row.id}`} style={{ textDecoration: 'none' }}>\n                                Click Here\n                                </Link>\n                            </TableCell>\n                            <TableCell align=\"left\"><Moment format=\"MMMM Do YYYY, h:mm a\">{row.dateTime}</Moment></TableCell>\n                            <TableCell align=\"left\"><Moment format=\"MMMM Do YYYY, h:mm a\">{row.finishedDateTime}</Moment></TableCell>\n                            <TableCell align=\"left\">\n                                <ButtonBase onClick={(e) => ApproveEvent(row.id)}><CheckCircleIcon style={{ fill : 'green', marginRight : '3px', fontSize : '25px'}}/></ButtonBase>\n                                <Hidden xsDown> | </Hidden>\n                                <ButtonBase onClick={(e) => openDeleteDialog(row.id)}><DeleteForeverIcon style={{ fill : 'red', fontSize : '30px'}}/></ButtonBase>\n                            </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <Dialog open={openDelete} onClose={handleCloseDelete} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle style={{ textAlign : 'center'}}>\n                    <Typography variant=\"h5\">Are you sure you want to delete to the event?</Typography>\n                </DialogTitle>\n                <DialogActions>\n                    <Button onClick={() => DeleteEvent(eventid!)} variant=\"contained\" style={{ backgroundColor : 'red'}} > Delete Event </Button>\n                    <Button onClick={() => handleCloseDelete()} variant=\"contained\" color=\"secondary\"> Cancel </Button>\n                </DialogActions>\n                </Dialog>  \n            </>\n        </Grid>\n    )\n}\n\nexport default ApproveEvents\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx",["214","215"],"import { useAuth0 } from '@auth0/auth0-react';\nimport { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n  \nfunction StackedBarChart() {\n\n    const Auth0 = useAuth0();    \n    const [Bardata, setBarData]= useState([]); \n    const [accessToken, setAccessToken] = useState(\"\");\n\n    useEffect(() => {\n      if(Auth0.isAuthenticated){\n        Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n      }\n      GetData(); \n    }, [Auth0, accessToken])\n\n    async function GetData(){\n      const getData = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Chart`, { \n        headers: {\n          'Authorization': `Bearer ${accessToken}`, \n          'Content-Type': 'application/json',\n        },\n      });\n      setBarData(await getData.json());  \n    }\n  \n    //@ts-ignore\n    const CustomTooltip = ({ active , payload , label}) => {\n    //@ts-ignore\n            const getIntroOfPage = (label, index) => {    \n                let x = \"\"; \n                Bardata.map( (item : any) => {\n                    if (item.name === label){\n                        x = item.caption[index]\n                    }\n                })\n                return x; \n            };\n            if (active && payload && payload.length) {\n                return (\n                  <div className=\"custom-tooltip\" style={{ backgroundColor : '#e3e3e3', padding : '6px', borderRadius : 2, textAlign : 'left'}}>\n                        { payload.map ( (e : any, i : number) => {\n                          return <> <Typography variant=\"body2\" className=\"intro\">{getIntroOfPage(label,i)} - {`${e.value}`}</Typography> </>\n                        })}\n                  </div>\n            );\n        }\n        return null; \n    }\n\n\n\n\n    return (\n        <>\n          {Bardata ? \n              <div style={{height : \"100%\", width : \"100%\"}}>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    width={500}\n                    height={400}\n                    data={Bardata}\n                    margin={{\n                      top: 20,\n                      right: 30,\n                      left: 20,\n                      bottom: 5,\n                    }}\n                  >\n                  <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n                    <XAxis dataKey=\"name\" interval={0} />\n                    <YAxis allowDecimals={false} />\n                    <Tooltip content={\n                    //@ts-ignore\n                    <CustomTooltip />} />\n                      <Bar dataKey=\"bar1\" stackId=\"a\" fill=\"#8884d8\" />\n                      <Bar dataKey=\"bar2\" stackId=\"a\" fill=\"#CA83B0\" />\n                      <Bar dataKey=\"bar3\" stackId=\"a\" fill=\"#84ca9d\" />\n                      <Bar dataKey=\"bar4\" stackId=\"a\" fill=\"#9AC3E4\" />\n                      <Bar dataKey=\"bar5\" stackId=\"a\" fill=\"#F6F7B9\" />\n                      <Bar dataKey=\"bar6\" stackId=\"a\" fill=\"#A1B1DB\" />\n                      <Bar dataKey=\"bar7\" stackId=\"a\" fill=\"#F8B1A4\" />\n                      <Bar dataKey=\"bar8\" stackId=\"a\" fill=\"#E2F0C5\" />\n                      <Bar dataKey=\"bar9\" stackId=\"a\" fill=\"#FCEAA5\" />\n                      <Bar dataKey=\"bar10\" stackId=\"a\" fill=\"#A3DEFA\" />\n                      <Bar dataKey=\"bar11\" stackId=\"a\" fill=\"#D4EDE0\" />\n                      <Bar dataKey=\"bar12\" stackId=\"a\" fill=\"#FAD0C9\" />\n                      <Bar dataKey=\"bar13\" stackId=\"a\" fill=\"#F39FC1\" />\n                      <Bar dataKey=\"bar14\" stackId=\"a\" fill=\"#C6D3EC\" />\n\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n                :\n                \"no data yet\"  \n        }\n\n        </>\n    )\n}\n\nexport default StackedBarChart\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx",["216"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUser.tsx",["217","218","219"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/SelectedUserContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/UserTheme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/HtmlTooltip.tsx",["220"],"import { Theme, Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport React from 'react'\n\nconst HtmlTooltip = withStyles((theme: Theme) => ({\n    tooltip: {\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n    },\n  }))(Tooltip);\n\nexport default HtmlTooltip\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/SearchTheme.tsx",["221","222","223"],"import React from 'react'\nimport theme from '../theme';\nimport { Accordion, makeStyles, withStyles,} from '@material-ui/core';\n\nconst SearchTheme = makeStyles({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n        margin : '15px'\n    },\n    box: {\n      textAlign: 'center', \n      padding : 4,\n      borderRadius : 4,\n      background : \"white\", \n    }, \n    search : {\n        display: 'inline-flex',\n        VerticalAlign: 'text-bottom',\n        BoxSizing: 'inherit',\n        textAlign: 'center',\n        AlignItems: 'center', \n    },\n    color : {\n        padding : '15px',\n        backgroundColor : '#EBEBEB',\n    }, \n    large: {\n        width: 90, \n        height: 90, \n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n      },\n      iconButton: {\n        padding: 10,\n      },\n      divider: {\n        height: 28,\n        margin: 4,\n      },\n      accordian : {\n        backgroundColor : \"#24CAC3\", \n        borderRadius : 10\n      },\n      MuiAccordionroot: {\n        \"&.MuiAccordion-root:before\": {\n          backgroundColor: \"#FAFAFA\"\n    }},\n});\n\nexport default SearchTheme","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/AntSwitch.tsx",["224"],"import { createStyles, Switch, Theme, withStyles } from '@material-ui/core';\nimport React from 'react'\n\nconst AntSwitch = withStyles((theme: Theme) =>\n    createStyles({\n    root: {\n     width: 28,\n     height: 16,\n     padding: 0,\n     display: 'flex',\n    },\n    switchBase: {\n     padding: 2,\n     color: theme.palette.grey[500],\n     '&$checked': {\n        transform: 'translateX(12px)',\n        color: theme.palette.common.white,\n        '& + $track': {\n        opacity: 1,\n        backgroundColor: theme.palette.primary.main,\n        borderColor: theme.palette.primary.main,\n        },\n     },\n    },\n    thumb: {\n     width: 12,\n     height: 12,\n     boxShadow: 'none',\n    },\n     track: {\n     border: `1px solid ${theme.palette.grey[500]}`,\n     borderRadius: 16 / 2,\n     opacity: 1,\n     backgroundColor: theme.palette.common.white,\n    },\n    checked: {},\n    }),\n)(Switch);\n\nexport default AntSwitch","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/EventsTheme.tsx",["225","226"],"import { makeStyles } from '@material-ui/core';\nimport React from 'react'\nimport events from '../assets/eventsBackground.svg'; \n\nconst EventsTheme = makeStyles(theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    paper: {\n        overflowY: 'unset',\n    },\n\n    customizedButton: {\n        padding: \"10px\",\n        position: \"absolute\",\n        right: -26,\n        top: -27,\n    }, \n    box : {\n        position : \"relative\", \n        backgroundColor : 'white', \n        border : '1px solid rgba(0,0,0,0.1)', \n    }, \n    eventContainer : {\n        backgroundColor : \"lightblue\", \n    },\n    centerSVG : {\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        },\n    leftButtons : {\n        textAlign :'center',\n        padding : '4px',\n        [theme.breakpoints.down('xs')]: {\n            paddingLeft : 0,\n            paddingRight : 0,\n            PaddingTop : 0,\n            paddingBottom : '2px', \n        },\n    },\n\n}));\n\nexport default EventsTheme\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/NotFoundPlayer.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewJSON.tsx",[],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":58,"column":7,"nodeType":"233","endLine":58,"endColumn":89,"suggestions":"234"},{"ruleId":"231","severity":1,"message":"232","line":65,"column":7,"nodeType":"233","endLine":65,"endColumn":27,"suggestions":"235"},{"ruleId":"236","severity":1,"message":"237","line":143,"column":30,"nodeType":"238","messageId":"239","endLine":143,"endColumn":31},{"ruleId":"236","severity":1,"message":"237","line":165,"column":30,"nodeType":"238","messageId":"239","endLine":165,"endColumn":31},{"ruleId":"236","severity":1,"message":"237","line":169,"column":30,"nodeType":"238","messageId":"239","endLine":169,"endColumn":31},{"ruleId":"240","severity":1,"message":"241","line":261,"column":22,"nodeType":"242","messageId":"243","endLine":261,"endColumn":24},{"ruleId":"231","severity":1,"message":"232","line":21,"column":8,"nodeType":"233","endLine":21,"endColumn":21,"suggestions":"244"},{"ruleId":"231","severity":1,"message":"245","line":41,"column":8,"nodeType":"233","endLine":41,"endColumn":28,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":3,"column":8,"nodeType":"238","messageId":"249","endLine":3,"endColumn":17},{"ruleId":"231","severity":1,"message":"232","line":33,"column":8,"nodeType":"233","endLine":33,"endColumn":28,"suggestions":"250"},{"ruleId":"231","severity":1,"message":"251","line":42,"column":7,"nodeType":"233","endLine":42,"endColumn":27,"suggestions":"252"},{"ruleId":"231","severity":1,"message":"232","line":46,"column":8,"nodeType":"233","endLine":46,"endColumn":35,"suggestions":"253"},{"ruleId":"240","severity":1,"message":"241","line":105,"column":29,"nodeType":"242","messageId":"243","endLine":105,"endColumn":31},{"ruleId":"247","severity":1,"message":"254","line":1,"column":107,"nodeType":"238","messageId":"249","endLine":1,"endColumn":119},{"ruleId":"247","severity":1,"message":"255","line":1,"column":121,"nodeType":"238","messageId":"249","endLine":1,"endColumn":131},{"ruleId":"247","severity":1,"message":"256","line":1,"column":133,"nodeType":"238","messageId":"249","endLine":1,"endColumn":138},{"ruleId":"247","severity":1,"message":"257","line":1,"column":179,"nodeType":"238","messageId":"249","endLine":1,"endColumn":192},{"ruleId":"247","severity":1,"message":"258","line":41,"column":27,"nodeType":"238","messageId":"249","endLine":41,"endColumn":43},{"ruleId":"231","severity":1,"message":"259","line":47,"column":8,"nodeType":"233","endLine":47,"endColumn":10,"suggestions":"260"},{"ruleId":"247","severity":1,"message":"248","line":9,"column":8,"nodeType":"238","messageId":"249","endLine":9,"endColumn":17},{"ruleId":"247","severity":1,"message":"261","line":20,"column":18,"nodeType":"238","messageId":"249","endLine":20,"endColumn":25},{"ruleId":"247","severity":1,"message":"262","line":21,"column":20,"nodeType":"238","messageId":"249","endLine":21,"endColumn":29},{"ruleId":"247","severity":1,"message":"263","line":24,"column":11,"nodeType":"238","messageId":"249","endLine":24,"endColumn":23},{"ruleId":"231","severity":1,"message":"232","line":36,"column":8,"nodeType":"233","endLine":36,"endColumn":35,"suggestions":"264"},{"ruleId":"231","severity":1,"message":"251","line":40,"column":8,"nodeType":"233","endLine":40,"endColumn":21,"suggestions":"265"},{"ruleId":"231","severity":1,"message":"266","line":16,"column":8,"nodeType":"233","endLine":16,"endColumn":28,"suggestions":"267"},{"ruleId":"231","severity":1,"message":"268","line":29,"column":8,"nodeType":"233","endLine":29,"endColumn":15,"suggestions":"269"},{"ruleId":"231","severity":1,"message":"232","line":31,"column":7,"nodeType":"233","endLine":31,"endColumn":14,"suggestions":"270"},{"ruleId":"231","severity":1,"message":"271","line":30,"column":8,"nodeType":"233","endLine":30,"endColumn":28,"suggestions":"272"},{"ruleId":"247","severity":1,"message":"273","line":3,"column":105,"nodeType":"238","messageId":"249","endLine":3,"endColumn":112},{"ruleId":"247","severity":1,"message":"256","line":3,"column":114,"nodeType":"238","messageId":"249","endLine":3,"endColumn":119},{"ruleId":"247","severity":1,"message":"274","line":3,"column":121,"nodeType":"238","messageId":"249","endLine":3,"endColumn":131},{"ruleId":"247","severity":1,"message":"275","line":13,"column":12,"nodeType":"238","messageId":"249","endLine":13,"endColumn":23},{"ruleId":"231","severity":1,"message":"276","line":21,"column":8,"nodeType":"233","endLine":21,"endColumn":28,"suggestions":"277"},{"ruleId":"231","severity":1,"message":"266","line":24,"column":8,"nodeType":"233","endLine":24,"endColumn":28,"suggestions":"278"},{"ruleId":"231","severity":1,"message":"279","line":17,"column":8,"nodeType":"233","endLine":17,"endColumn":28,"suggestions":"280"},{"ruleId":"240","severity":1,"message":"241","line":34,"column":43,"nodeType":"242","messageId":"243","endLine":34,"endColumn":45},{"ruleId":"231","severity":1,"message":"266","line":15,"column":8,"nodeType":"233","endLine":15,"endColumn":28,"suggestions":"281"},{"ruleId":"247","severity":1,"message":"257","line":1,"column":146,"nodeType":"238","messageId":"249","endLine":1,"endColumn":159},{"ruleId":"247","severity":1,"message":"258","line":44,"column":27,"nodeType":"238","messageId":"249","endLine":44,"endColumn":43},{"ruleId":"231","severity":1,"message":"259","line":51,"column":8,"nodeType":"233","endLine":51,"endColumn":10,"suggestions":"282"},{"ruleId":"247","severity":1,"message":"283","line":3,"column":8,"nodeType":"238","messageId":"249","endLine":3,"endColumn":13},{"ruleId":"247","severity":1,"message":"283","line":1,"column":8,"nodeType":"238","messageId":"249","endLine":1,"endColumn":13},{"ruleId":"247","severity":1,"message":"284","line":3,"column":10,"nodeType":"238","messageId":"249","endLine":3,"endColumn":19},{"ruleId":"247","severity":1,"message":"274","line":3,"column":33,"nodeType":"238","messageId":"249","endLine":3,"endColumn":43},{"ruleId":"247","severity":1,"message":"283","line":2,"column":8,"nodeType":"238","messageId":"249","endLine":2,"endColumn":13},{"ruleId":"247","severity":1,"message":"283","line":2,"column":8,"nodeType":"238","messageId":"249","endLine":2,"endColumn":13},{"ruleId":"247","severity":1,"message":"285","line":3,"column":8,"nodeType":"238","messageId":"249","endLine":3,"endColumn":14},"no-native-reassign",["286"],"no-negated-in-lhs",["287"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["288"],["289"],"@typescript-eslint/no-redeclare","'i' is already defined.","Identifier","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["290"],"React Hook useEffect has missing dependencies: 'getEventAttendance' and 'getEventInfo'. Either include them or remove the dependency array.",["291"],"@typescript-eslint/no-unused-vars","'Auth0user' is defined but never used.","unusedVar",["292"],"React Hook useEffect has a missing dependency: 'fetchEventData'. Either include it or remove the dependency array.",["293"],["294"],"'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'DialogContent' is defined but never used.","'setValidatedName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'LoadStates'. Either include it or remove the dependency array.",["295"],"'setOpen' is assigned a value but never used.","'setOpenNE' is assigned a value but never used.","'EventContext' is assigned a value but never used.",["296"],["297"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["298"],"React Hook useEffect has a missing dependency: 'EventContext.event.tags'. Either include it or remove the dependency array.",["299"],["300"],"React Hook useEffect has missing dependencies: 'formatter' and 'getRecipents'. Either include them or remove the dependency array.",["301"],"'Tooltip' is defined but never used.","'withStyles' is defined but never used.","'activeUsers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetStats'. Either include it or remove the dependency array.",["302"],["303"],"React Hook useEffect has a missing dependency: 'GetData'. Either include it or remove the dependency array.",["304"],["305"],["306"],"'React' is defined but never used.","'Accordion' is defined but never used.","'events' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"309","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"318","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"325","fix":"335"},{"desc":"336","fix":"337"},{"desc":"325","fix":"338"},{"desc":"320","fix":"339"},"Update the dependencies array to be: [searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, Auth0, fetchData]",{"range":"340","text":"341"},"Update the dependencies array to be: [Auth0, accessToken, fetchData]",{"range":"342","text":"343"},"Update the dependencies array to be: [accessToken, fetchData]",{"range":"344","text":"345"},"Update the dependencies array to be: [Auth0, accessToken, getEventAttendance, getEventInfo]",{"range":"346","text":"347"},{"range":"348","text":"343"},"Update the dependencies array to be: [Auth0, AuthContext, fetchEventData]",{"range":"349","text":"350"},"Update the dependencies array to be: [accessToken, openNE, open, fetchData]",{"range":"351","text":"352"},"Update the dependencies array to be: [LoadStates]",{"range":"353","text":"354"},{"range":"355","text":"352"},"Update the dependencies array to be: [AuthContext, fetchEventData]",{"range":"356","text":"357"},"Update the dependencies array to be: [Auth0, accessToken, getData]",{"range":"358","text":"359"},"Update the dependencies array to be: [Auth0, EventContext.event.tags]",{"range":"360","text":"361"},"Update the dependencies array to be: [Auth0, fetchData]",{"range":"362","text":"363"},"Update the dependencies array to be: [Auth0, accessToken, formatter, getRecipents]",{"range":"364","text":"365"},"Update the dependencies array to be: [Auth0, GetStats, accessToken]",{"range":"366","text":"367"},{"range":"368","text":"359"},"Update the dependencies array to be: [Auth0, GetData, accessToken]",{"range":"369","text":"370"},{"range":"371","text":"359"},{"range":"372","text":"354"},[2650,2732],"[searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, Auth0, fetchData]",[2927,2947],"[Auth0, accessToken, fetchData]",[692,705],"[accessToken, fetchData]",[2009,2029],"[Auth0, accessToken, getEventAttendance, getEventInfo]",[1403,1423],[2010,2030],"[Auth0, AuthContext, fetchEventData]",[2088,2115],"[accessToken, openNE, open, fetchData]",[2240,2242],"[LoadStates]",[1539,1566],[1624,1637],"[AuthContext, fetchEventData]",[503,523],"[Auth0, accessToken, getData]",[1192,1199],"[Auth0, EventContext.event.tags]",[1466,1473],"[Auth0, fetchData]",[1223,1243],"[Auth0, accessToken, formatter, getRecipents]",[837,857],"[Auth0, GetStats, accessToken]",[1139,1159],[598,618],"[Auth0, GetData, accessToken]",[499,519],[2322,2324]]