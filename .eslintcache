[{"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx":"1","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx":"2","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx":"3","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx":"4","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx":"5","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx":"6","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx":"7","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx":"8","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx":"9","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx":"10","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx":"11","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx":"12","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx":"13","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx":"14","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx":"15","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx":"16","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx":"17","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx":"18","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx":"19","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx":"20","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx":"21","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx":"22","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx":"23","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx":"24","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx":"25","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx":"26","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx":"27","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx":"28","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx":"29","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx":"30","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx":"31"},{"size":1033,"mtime":1614962382517,"results":"32","hashOfConfig":"33"},{"size":364,"mtime":1614962382518,"results":"34","hashOfConfig":"33"},{"size":2442,"mtime":1614962382499,"results":"35","hashOfConfig":"33"},{"size":774,"mtime":1614962382517,"results":"36","hashOfConfig":"33"},{"size":1455,"mtime":1614962382516,"results":"37","hashOfConfig":"33"},{"size":22470,"mtime":1615041623330,"results":"38","hashOfConfig":"33"},{"size":1521,"mtime":1614962382500,"results":"39","hashOfConfig":"33"},{"size":1420,"mtime":1614964441282,"results":"40","hashOfConfig":"33"},{"size":4753,"mtime":1614962382500,"results":"41","hashOfConfig":"33"},{"size":1323,"mtime":1614962382500,"results":"42","hashOfConfig":"33"},{"size":1236,"mtime":1614962382499,"results":"43","hashOfConfig":"33"},{"size":3641,"mtime":1614962382515,"results":"44","hashOfConfig":"33"},{"size":10448,"mtime":1614962382514,"results":"45","hashOfConfig":"33"},{"size":9530,"mtime":1614962382515,"results":"46","hashOfConfig":"33"},{"size":13528,"mtime":1614962382510,"results":"47","hashOfConfig":"33"},{"size":6189,"mtime":1614962382515,"results":"48","hashOfConfig":"33"},{"size":1390,"mtime":1614962382510,"results":"49","hashOfConfig":"33"},{"size":1390,"mtime":1614962382516,"results":"50","hashOfConfig":"33"},{"size":496,"mtime":1614962382514,"results":"51","hashOfConfig":"33"},{"size":466,"mtime":1614962382516,"results":"52","hashOfConfig":"33"},{"size":151,"mtime":1614962382516,"results":"53","hashOfConfig":"33"},{"size":9115,"mtime":1614962382515,"results":"54","hashOfConfig":"33"},{"size":10096,"mtime":1614962382515,"results":"55","hashOfConfig":"33"},{"size":3186,"mtime":1614962382514,"results":"56","hashOfConfig":"33"},{"size":12211,"mtime":1614962382513,"results":"57","hashOfConfig":"33"},{"size":8004,"mtime":1614962382510,"results":"58","hashOfConfig":"33"},{"size":3957,"mtime":1614962382514,"results":"59","hashOfConfig":"33"},{"size":2779,"mtime":1614962382515,"results":"60","hashOfConfig":"33"},{"size":2831,"mtime":1614962382510,"results":"61","hashOfConfig":"33"},{"size":258,"mtime":1614962382514,"results":"62","hashOfConfig":"33"},{"size":1393,"mtime":1614964425942,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"5iryfj",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"66"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx",[],["139","140"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx",["141","142","143","144","145","146","147"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx",["148"],"import { useAuth0 } from '@auth0/auth0-react';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Auth0Context } from './context/Auth0Context';\nimport Dashboard from './components/Dashboard'\nimport EnrichProfile from './components/EnrichProfile';\nimport EditUserProfile from './components/EditUserProfile';\n\nfunction WelcomeScreen() {\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const AuthContext = useContext(Auth0Context)\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n\n    useEffect(() => {\n        fetchData();\n    }, [accessToken])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    return (\n        <>\n            { AuthContext.data.user_metadata === null ? \n                 <EnrichProfile/>\n                : AuthContext.edit === false ?\n                 <Dashboard/>\n                :\n                 <EditUserProfile/>\n            }\n        </>\n    )}\n\n\nexport default WelcomeScreen","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx",["149","150"],"import { useAuth0 } from '@auth0/auth0-react';\nimport { Avatar, Box, Grid, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport EventAttendance from '../../models/EventAttendance';\nimport { CSVLink } from \"react-csv\";\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core'\nimport MailIcon from '@material-ui/icons/Mail';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SendEmail from '../SendEmail';\n\nfunction ViewEventEntity(props : any) {\n\n    const EventContext = useContext(EditEventContext)\nconst [accessToken, setAccessToken] = useState(''); \nconst Auth0 = useAuth0();\nconst [eventAttendance,setEventAttendance ] = useState<EventAttendance>(); \nconst headers = [ { label:'Name',key:'name'},{label:'Email Address',key:'email'},{label:'Expertise',key:'user_metadata.expertise'}, {label:'Interests',key:'user_metadata.interest' },];\nconst [open, setOpen] = useState(false);\n\nuseEffect(() => {\n    getEventInfo(); \n    getEventAttendance(); \n}, [])\n\nconst handleOpen = () => {\n      setOpen(true);        \n  };\n\nconst handleClose = () => {\n      setOpen(false);\n};\n\n\nasync function getEventInfo(){\n    const token = await Auth0.getAccessTokenSilently(); \n    setAccessToken(token)\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${props.match.params.event_id}`, { \n        headers: {\n          'Content-Type': 'application/json',\n        }\n    });\n    EventContext.setEvent(await response.json()); \n}\n\nasync function getEventAttendance(){\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/EventAttendance/${props.match.params.event_id}`, { \n        headers: {\n          'Content-Type': 'application/json',\n        }\n    });\n    setEventAttendance(await response.json()); \n}\n\n    return (\n        <div>\n            <p>Event ID : {EventContext.event.id} </p>\n            {eventAttendance ? <CSVLink filename={EventContext.event.title} headers = {headers} data={eventAttendance.users}>Download me</CSVLink>  : \"\"}\n\n            <Box>\n        <Typography variant={\"h3\"}>{EventContext.event.title}</Typography>\n    </Box>\n    <Box>\n        <Typography variant=\"body2\">{EventContext.event.type}</Typography>\n        <Typography variant=\"body2\">{EventContext.event.url}</Typography>\n        <Typography variant=\"body2\"> Is DISCUS : {EventContext.event.isDISCUS.toString()}</Typography>\n        <Typography>{EventContext.event.description}</Typography>\n\n        <Typography> Tags - {EventContext.event.tags}</Typography>\n    </Box>  \n    <Typography variant=\"h2\"> Attendees</Typography>            \n    {eventAttendance?.users.map (e => \n        <Grid container>  \n            <Avatar alt=\"Cindy Baker\" src={e.picture} />\n            <Typography>{e.name}</Typography>\n        </Grid>\n)}\n<Box>\n    Total users {eventAttendance?.total}\n</Box>\n<Button onClick={handleOpen}><MailIcon/>Email Users</Button>\n\n    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"id\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1}> <Typography variant=\"h4\">Send Emails</Typography></Box>\n                    <Box>\n                        <IconButton onClick={handleClose}> <CancelIcon /> </IconButton>\n                    </Box>\n                </Box>\n            </DialogTitle>\n            <DialogContent>\n                <SendEmail/>\n            </DialogContent>\n    </Dialog>\n\n        </div>\n    )\n}\n\nexport default ViewEventEntity\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx",["151","152","153","154","155","156"],"import { Avatar, Box, Button, Chip, createStyles, FormControl, Grid, InputLabel, makeStyles, MenuItem, Select, TextField, Theme, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react'\nimport Auth0user from '../models/Auth0user';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Autocomplete, AutocompleteChangeReason } from '@material-ui/lab';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { Auth0Context } from '../context/Auth0Context'\nimport DepartmentObj from '../config/Department';\n\nfunction ViewUser(props : any) {\n    const [loginPressed, setLoginPressed] = useState(false);\n    const [data, setData] = useState<Auth0user>()\n    const user_id = props.match.params.user_id; \n    const [editMode, setEditMode] = useState(false);\n    const [interests, setInterests] = useState<string[]>([])\n    const AuthContext = useContext(Auth0Context)\n\n    console.log(props)\n    console.log(\"fdsfds\")\n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    async function fetchData(){\n        console.log(`${process.env.REACT_APP_API_URL}/UserSearch/${user_id}`); \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/${user_id}`);\n        setData(await response.json());\n    }\n\n    function changeEdit(){\n        if (data !== undefined){\n            setInterests(data?.user_metadata.interest)\n        }\n        setEditMode(true); \n    }\n\n    function Cancel(){\n        setEditMode(false); \n    }\n\n    async function saveData(e : any){\n        e.preventDefault();\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/User/`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"POST\", \n            body: JSON.stringify(data),\n        })\n        if(response.ok){\n            alert(\"Success\"); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function handleDelete(e : string){\n        console.log(e)\n    }\n\n\n    function addtoState(value : { Subject : string}[], reason : AutocompleteChangeReason){\n        let newTags : string [] = []; \n        setInterests(newTags); \n        setInterests(value.map ( x => x.Subject)); \n    }\n    \n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n        root: {\n            display: 'flex',\n            '& > *': {\n            margin: theme.spacing(1),\n            },\n        },\n        large: {\n            width: theme.spacing(35),\n            height: theme.spacing(35),\n        },\n        }),\n    );\n\n    const classes = useStyles();\n    \n    return (\n        <div>\n        {editMode ? \n            <div>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Box pt={3} >\n                        <Typography variant=\"h3\">{data?.name}</Typography>\n                    </Box>\n                </Grid>\n            <Grid item xs={3}>\n                <Box className=\"small\" m={2} p={6} borderRadius=\"borderRadius\">\n                    <Avatar alt=\"Remy Sharp\" className={classes.large} src={data ? data?.picture : \"\"}/>\n                </Box>\n                <Box m={1} p={2} bgcolor=\"info.main\" borderRadius=\"borderRadius\">\n                    <Typography variant=\"h3\">Points</Typography>\n                    <Typography variant=\"h4\">5 Points</Typography>\n                </Box>\n            </Grid>\n        <Grid item xs={9} >\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}> \n            <div>                \n                <Button onClick={changeEdit}> <SaveIcon/> </Button>\n                <Button onClick={Cancel}> <CancelIcon/> </Button>\n                <Typography variant=\"body1\">Name <TextField defaultValue={data?.name}/></Typography>\n                <Typography variant=\"body1\">\n                    <TextField \n                        defaultValue={data?.email}\n                    />\n                </Typography>\n\n                <Box my={3}>\n            <FormControl variant=\"outlined\" style={{minWidth: 120}}>\n                <InputLabel>School</InputLabel>\n                <Select \n                defaultValue={data?.user_metadata.education.school}\n                label=\"School\" >\n                    <MenuItem value=\"University of Sussex Business School\">University of Sussex Business School</MenuItem>\n                    <MenuItem value=\"School of Education and Social Work\">School of Education and Social Work</MenuItem>\n                    <MenuItem value=\"School of Engineering and Informatics\">School of Engineering and Informatics</MenuItem>\n                    <MenuItem value=\"School of Global Studies\">School of Global Studies</MenuItem>\n                </Select>\n            </FormControl>\n        </Box>\n\n        <Box my={3}> \n            <FormControl variant=\"outlined\" style={{minWidth: 200}}>\n            <InputLabel>Department</InputLabel>\n                <Select\n                label=\"Department\"\n                >\n                {   data?.user_metadata.education.school === \"University of Sussex Business School\" ?  \n                (DepartmentObj['University of Sussex Business School'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem> \n                ))\n                : data?.user_metadata.education.school === \"School of Education and Social Work\" ?  \n                (DepartmentObj['School of Education and Social Work'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Engineering and Informatics\" ?  \n                (DepartmentObj['School of Engineering and Informatics'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Global Studies\" ?  \n                (DepartmentObj['School of Global Studies'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Law, Politics and Sociology\" ?  \n                (DepartmentObj['School of Law, Politics and Sociology'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Life Sciences\" ?  \n                (DepartmentObj['School of Life Sciences'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))\n                : data?.user_metadata.education.school === \"School of Media, Arts and Humanities\" ?  \n                (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))                                \n                : data?.user_metadata.education.school === \"School of Media, Arts and Humanities\" ?\n                (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                <MenuItem value={dep}>{dep}</MenuItem>\n                ))  \n                : <p></p>\n                }\n                </Select>\n            </FormControl>\n            </Box>\n\n                <Autocomplete\n                    multiple\n                    fullWidth\n                    onChange={(event, value, reason) => addtoState(value, reason)}\n                    id=\"multiple-limit-tags\"\n                    options={Subjects}\n                    getOptionLabel={(option) => option.Subject}\n                    renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" placeholder=\"Add Tags\" />\n                    )}\n                />\n\n                {data?.user_metadata.expertise.map(e => <Chip label={e} ></Chip>)}\n                \n            </div>\n        </Box>\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}>\n            <div >\n                <Typography variant=\"body1\"></Typography>\n                <Typography variant=\"body1\"></Typography>\n                \n                <TextField id=\"outlined-basic\"           \n                    multiline\n                    rows={4} \n                    fullWidth\n                    label=\"Research\" \n                    variant=\"outlined\" \n                    defaultValue={data?.user_metadata.research}/>\n                    \n                {data?.user_metadata.interest.map(e => <Chip label={e}></Chip>)}\n            </div>\n        </Box>\n    </Grid>\n</Grid>\n</div>\n        :\n        \n        <Grid>\n<div>\n<Grid container spacing={3}>\n    <Grid item xs={12}>\n        <Box pt={3} >\n            <Typography variant=\"h3\">{data?.name}</Typography>\n        </Box>\n    </Grid>\n    <Grid item xs={3}>\n        <Box className=\"small\" m={2} p={6} borderRadius=\"borderRadius\">\n            <Avatar alt=\"Remy Sharp\" className={classes.large} src={data ? data?.picture : \"\"}/>\n        </Box>\n        <Box m={1} p={2} bgcolor=\"info.main\" borderRadius=\"borderRadius\">\n            <Typography variant=\"h3\">Points</Typography>\n            <Typography variant=\"h4\">5 Points</Typography>\n        </Box>\n    </Grid>\n    <Grid item xs={8} >\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}> \n            <div>\n                {AuthContext?.data.app_metadata === null ? <></> : <p> <Button onClick={changeEdit}> <EditIcon/> </Button> </p>}\n                <Typography variant=\"body1\">Name {data?.name}</Typography>\n                <Typography variant=\"body1\">{data?.email}</Typography>\n                <Typography>{data?.user_metadata.education.school}</Typography>\n                <Typography>{data?.user_metadata.education.department}</Typography>\n                {data?.user_metadata.expertise.map(e => <Chip label={e}></Chip>)}\n            </div>\n        </Box>\n        <Box bgcolor=\"info.main\" borderRadius=\"borderRadius\" m={2} p={3}>\n        <Typography variant=\"h4\">Academic</Typography>\n            <div >\n            <Typography variant=\"body1\"></Typography>\n            <Typography variant=\"body1\"></Typography>\n            <Typography>{data?.user_metadata.research}</Typography>\n                {data?.user_metadata.interest.map(e => <Chip label={e}></Chip>)}\n            </div>\n        </Box>\n    </Grid>\n</Grid>\n</div>\n</Grid>\n\n        }\n        </div>\n    )\n}\n\nconst Subjects = [\n    { Subject: 'Computer Stuff'},\n    { Subject: 'Natural Language Engineering'},\n  ];\n\nexport default ViewUser\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx",["157"],"import { Box, Button, Checkbox, Dialog, DialogContent, DialogTitle, Fab, Grid, IconButton, makeStyles, Typography } from '@material-ui/core';\nimport React, {useState, useEffect, useContext} from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport AddIcon from '@material-ui/icons/Add';\nimport CreateEvent from './forms/CreateEvent'\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Auth0Context } from '../../context/Auth0Context';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Link } from 'react-router-dom';\nimport EditEvent from './EditEvent'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport Metadata from '../../models/Metadata';\nimport Auth0user from '../../models/Auth0user';\nimport Loading from '../../config/Loading'; \nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CheckCircleOutlinedIcon from '@material-ui/icons/CheckCircleOutlined';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\n\nfunction UpcomingEvents() {\n    const [data, setData] = useState<EventEntity[]>([]);\n    const [open, setOpen] = useState(false);\n    const [openNE, setOpenNE] = useState(false); \n    const Auth0 = useAuth0();\n    const AuthContext = useContext(Auth0Context);\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n\n\n\n    useEffect(() => {\n        fetchData();\n        fetchEventData();\n    }, [openNE, open])\n\n    async function fetchData(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${token}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function fetchEventData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Upcoming`);\n        const recieved = await response.json();\n        setData(recieved);\n    }\n\n    const handleOpen = (i : number) => {\n        EventContext.setEvent(data[i]); \n        setOpen(true);        \n    };\n\n    const handleOpenNE = () => {\n        setOpenNE(true);\n    }\n\n    async function deleteEvent(i : number){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${i}`, {\n            method : \"DELETE\"\n        });\n        console.log(response);\n        fetchEventData(); \n    }\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleCloseNE = () => {\n        setOpenNE(false);\n        fetchEventData(); \n    };\n\n\n    async function updateStatus(stat : any, id : number){\n        let obj; \n        if (stat === true){\n            obj = {...AuthContext.data, user_metadata : {...AuthContext.data.user_metadata, events : AuthContext.data.user_metadata.events.concat([id])} }\n            AuthContext.setData(obj)\n        }else{\n            obj = {...AuthContext.data, user_metadata : {...AuthContext.data.user_metadata, events : AuthContext.data.user_metadata.events.filter(item => item !== id)} }\n            AuthContext.setData(obj)\n        }\n        sendreq(obj!);\n    }\n\n    async function sendreq(obj : Auth0user){\n\n        const newEvent : Metadata = { user_metadata : obj.user_metadata }\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, {\n            headers : {\n                'Authorization': `Bearer ${accessToken}`,\n                \"Content-Type\" : \"application/json\" \n            }, \n            method:\"PATCH\", \n            body: JSON.stringify(newEvent),\n        })\n\n        if(response.ok){\n            console.log(\"succ add\")\n        }else{\n            console.error(\"Publishing failed\");\n        }\n        fetchEventData();\n    }\n\n\n    const useStyles = makeStyles(theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    paper: {\n        overflowY: 'unset',\n    },\n\n    customizedButton: {\n        padding: \"10px\",\n        position: \"absolute\",\n        right: -26,\n        top: -27,\n    }, \n    box : {\n        position : \"relative\", \n    }\n\n    }));\n    const classes = useStyles();\n\n    return (\n        <div>\n\n\n            {data.length > 0 ? \n            <Grid container>\n            {data?.map ((e,i) => \n            <Box width=\"40%\" borderRadius=\"borderRadius\" border={2} m={3} p={3} className={classes.box}> \n                       \n                       {AuthContext.data.app_metadata !== null ? \n                        <div className={classes.customizedButton} >\n                            <Button style={{ borderRadius: 50 }}variant=\"contained\" onClick={() => { handleOpen(i)}} color=\"secondary\" type=\"submit\" value=\"Submit\"> <EditIcon/> </Button>\n                            <Button style={{ borderRadius: 50 }} variant=\"contained\" onClick={() => { deleteEvent(e.id)}} color=\"primary\" type=\"submit\" value=\"Submit\"> <DeleteIcon /> </Button>\n                        </div>\n                       : \"\" }\n                       \n                        \n                        <Link to={`/events/${e.id}`} style={{ textDecoration: 'none' }}>\n                        <Grid container>\n                        <Grid item xs={3}>\n                            <Grid container justify=\"center\">\n                                <Box bgcolor=\"primary.main\" p={1} borderRadius=\"borderRadius\" >\n                                    <Box px={2}>\n                                        <Grid item xs={12}> <Typography> Nov </Typography> </Grid>\n                                        <Grid item xs={12}> <Typography> 23 </Typography></Grid>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={9}>\n                            <Grid item xs={12}>\n                                <Typography variant={\"h3\"}>{e.title}</Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <ScheduleIcon/> {e.dateTime} - {e.finishedDateTime}\n                            </Grid>\n\n                        </Grid> \n                        </Grid>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Box my={2}>\n                                        <Typography>{e.description}</Typography>\n                                    </Box>\n                                    <Typography>{e.url}</Typography>\n                                </Grid>\n                        \n                                <Grid container>\n\n                                </Grid>\n                                <Typography variant=\"body2\"> Is DISCUS : {e.isDISCUS.toString()}</Typography>\n                          \n                                <Typography> Tags - {e.tags}</Typography>\n\n                                    <Box bgcolor=\"primary.main\" borderRadius=\"borderRadius\" py={1} px={2}>\n                                        <Typography variant=\"body2\"> <LocalOfferIcon/> {e.type}</Typography>\n                                    </Box>\n\n                            </Grid>  \n                        </Link> \n                        <Typography>Going?</Typography> \n                        <Checkbox\n                            icon={<CheckCircleOutlinedIcon  \n                            style={{ fill: '#8BC34A', fontSize : 40 }} />}\n                            checkedIcon={<CheckCircleIcon style={{ fill: '#8BC34A' , fontSize : 40  }} />}\n                            onChange={status => updateStatus(status.target.checked, e.id)}\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\n                            checked={AuthContext.data.user_metadata.events.includes(e.id)}\n                        />\n                </Box>\n            )} \n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">Edit the Event</DialogTitle>\n                        <DialogContent>\n                               <EditEvent dialog={() => setOpen(false)}/>\n                        </DialogContent>\n                    </Dialog> \n\n            </Grid>\n            : <Loading/>  }\n                            \n            <Dialog open={openNE} onClose={handleCloseNE} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"id\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1}> <Typography variant=\"h4\">Create an event</Typography></Box>\n                    <Box>\n                        <IconButton onClick={handleCloseNE}> <CancelIcon /> </IconButton>\n                    </Box>\n                </Box>\n                </DialogTitle>\n                <DialogContent>\n                    <CreateEvent dialog={() => setOpenNE(false)}/>\n                </DialogContent>\n            </Dialog>\n\n            <Fab size=\"large\" color=\"primary\" aria-label=\"add\" className={classes.fab}>\n                <Button onClick={(e) => handleOpenNE()} > <AddIcon/> </Button>\n            </Fab>\n            \n        </div>\n    )\n}\n\nexport default UpcomingEvents","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx",["158"],"import { Grid, Box, Typography, Avatar, Button, TextField, FormControl, InputLabel, Select, MenuItem, Chip, Checkbox } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport React, { useContext, useEffect, useState } from 'react'\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { Auth0Context } from '../context/Auth0Context';\nimport { AllSubjects } from '../config/TagSystem'\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { useSnackbar } from 'notistack';\nimport Points from './Points';\nimport DepartmentObj from '../config/Department'; \n\nfunction EditUserProfile() {\n    const AuthContext = useContext(Auth0Context);\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const { enqueueSnackbar } = useSnackbar();\n\n    //Editable Fields\n    const [name, setName] = useState<string>(\"\"); \n    const [school, setSchool] = useState<string>(\"\"); \n    const [department, setDepartment] = useState<string>(\"\"); \n    const [careerStage, setCareerStage] = useState<string>(\"\"); \n    const [research, setResearch] = useState<string>(\"\"); \n    const [interests, setInterest] = useState<String[]>([]); \n    const [expertise, setExpertise] = useState<String[]>([]); \n    const [available, setAvailable] = useState(false); \n    const [graduation, setGraduation] = useState<string>(\"\"); \n    const [sussexURL, setSussexURL] = useState<string>(\"\"); \n    let mes = \"\"\n\n    useEffect(() => {\n        LoadStates(); \n    }, []);\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n\n    function LoadStates(){\n        if (AuthContext.data !== undefined ){\n            setName(AuthContext.data.name); \n            setSchool(AuthContext.data.user_metadata.education.school); \n            setDepartment(AuthContext.data.user_metadata.education.department); \n            setCareerStage(AuthContext.data.user_metadata.education.careerStage); \n            setGraduation(AuthContext.data.user_metadata.education.graduationDate)\n            setInterest(AuthContext.data.user_metadata.interest); \n            setResearch(AuthContext.data.user_metadata.research);\n            setSussexURL(AuthContext.data.user_metadata.social.sussex)\n            setExpertise(AuthContext.data.user_metadata.expertise); \n            if (AuthContext.data.user_metadata.education.available === \"true\")\n            {\n                setAvailable(true)\n            }\n        }\n    }\n\n    function DeleteChipIntrest(e : String){\n        setInterest(interests.filter(subject => subject !== e))\n    }\n\n    function DeleteChipExpertise(e : String){\n        setExpertise(expertise.filter(subject => subject !== e))\n    }\n\n\n    async function UpdateUser(){\n        const stravail = available.toString(); \n        const postreq = (\n            {   \"name\" : name, \n                \"user_metadata\" : {\n                \"social\": {\n                    \"sussex\": sussexURL,\n                  },\n                  \"education\": {\n                    \"School\": school,\n                    \"Department\": department,\n                    \"CareerStage\": careerStage,\n                    \"GraduationDate\": graduation,\n                    \"Available\": stravail\n                  },\n                  \"research\": research,\n                  \"expertise\": expertise,\n                  \"interest\": interests, \n                  \"events\" : AuthContext.data.user_metadata.events\n                }\n            }\n        )\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/UpdateUser/${AuthContext.data.user_id}`, { \n            method:\"PATCH\", \n            body: JSON.stringify(postreq),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            console.log('fdfd')\n            enqueueSnackbar('User has been updated', { variant : \"success\" });\n            fetchData(); \n            ChangeCancel(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    function ChangeCancel(){\n        AuthContext.setEdit(false)\n    }\n\n    function changeInterest(value : string | null){\n        mes = \"\"\n        if (value !== null ){\n            if (interests.includes(value)){   \n                console.log(\"Yu Blind!\")\n            }else{\n                setInterest(state => [...state, value])\n            }\n        }\n    }\n    \n    function changeExpertise(value : string | null){\n        mes = \"\"\n        if (value !== null ){\n            if (expertise.includes(value)){   \n                console.log(\"Yu Blind!\")\n            }else{\n                setExpertise(state => [...state, value])\n            }\n        }\n    }\n    \n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <Box pt={3} >\n                    <Typography variant=\"h3\">Edit Mode</Typography>\n                </Box>\n            </Grid>\n            <Grid item xs={3}>\n                <Box className=\"small\" m={2} p={6} borderRadius=\"borderRadius\">\n                    <Avatar alt=\"Remy Sharp\" src={AuthContext.data ? AuthContext.data.picture : \"\"}/>\n                </Box>\n                <Points/>\n            </Grid>\n            <Grid item xs={8} >\n                <Box borderRadius=\"borderRadius\" m={2} p={3}> \n                    <div>\n                        <Button onClick={ChangeCancel}> <CancelIcon/> </Button>\n                        <Button onClick={UpdateUser}>  <SaveIcon/> </Button>\n                        <Typography variant=\"h4\"></Typography>\n                        <Typography variant=\"body1\">\n                            \n                    <TextField \n                        variant=\"outlined\" \n                        label=\"Name\" \n                        error={name.length === 0 ? true : false }\n                        onChange={e => setName(e.target.value)} \n                        defaultValue={AuthContext.data?.name}/>\n                    </Typography>\n               \n                    <TextField\n                     multiline\n                     variant=\"outlined\"\n                     fullWidth\n                     onChange={e => setSussexURL(e.target.value)}\n                     label=\"Sussex URL\"\n                     defaultValue={sussexURL}/>\n\n\n                    <TextField\n                     multiline\n                     rows={4}\n                     variant=\"outlined\"\n                     fullWidth\n                     onChange={e => setResearch(e.target.value)}\n                     label=\"research\"\n                     defaultValue={research}/>\n\n                     <Typography>Available?</Typography> <Checkbox value={available} checked={available} onChange={e => setAvailable(e.target.checked)}/>\n\n                    <Box m={1}>\n                        <Typography color={\"secondary\"}> Leave blank if you do not wish to change</Typography>\n                    </Box>\n\n                    <Grid container direction=\"row\" alignItems=\"center\">\n\n                    <Box my={3}>\n                        <FormControl variant=\"outlined\" style={{minWidth: 150}}>\n                        <InputLabel>Career Stage</InputLabel>\n                            <Select \n                                defaultValue={careerStage} \n                                onChange={ (e : any) => setCareerStage(e.target.value)} \n                                label=\"Career Stage\" >\n                            <MenuItem value=\"UG\">UG</MenuItem>\n                            <MenuItem value=\"PhD\">PhD</MenuItem>\n                            <MenuItem value=\"PhD\">PostDoc</MenuItem>\n                            <MenuItem value=\"MSc\">MSc</MenuItem>\n\n                            <MenuItem value=\"Professional Services\">Professional Services</MenuItem>\n                            </Select>\n                        </FormControl>\n                    </Box>\n\n\n\n                <Box my={1} mr={3}>\n                <FormControl variant=\"outlined\" style={{minWidth: 120}}>\n                <InputLabel>School</InputLabel>\n                    <Select onChange={(e : any) => setSchool(e.target.value)} label=\"School\" >\n                    <MenuItem value=\"University of Sussex Business School\">University of Sussex Business School</MenuItem>\n                    <MenuItem value=\"School of Education and Social Work\">School of Education and Social Work</MenuItem>\n                    <MenuItem value=\"School of Engineering and Informatics\">School of Engineering and Informatics</MenuItem>\n                    <MenuItem value=\"School of Global Studies\">School of Global Studies</MenuItem>\n                    </Select>\n                </FormControl>\n                </Box>\n\n                { school === \"\" ? \n                <FormControl variant=\"outlined\" style={{minWidth: 200}} disabled>\n                <InputLabel>Department</InputLabel>\n                <Select /> \n                </FormControl> \n                :\n                <Box my={2}> \n                <FormControl variant=\"outlined\" style={{minWidth: 200}}>\n                <InputLabel>Department</InputLabel>\n                    <Select\n                        onChange={(e : any) => setDepartment(e.target.value)}\n                        label=\"Department\"\n                        >\n                        {   school === \"University of Sussex Business School\" ?  \n                        (DepartmentObj['University of Sussex Business School'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem> \n                        ))\n                        : school === \"School of Education and Social Work\" ?  \n                        (DepartmentObj['School of Education and Social Work'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : school === \"School of Engineering and Informatics\" ?  \n                        (DepartmentObj['School of Engineering and Informatics'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : school === \"School of Global Studies\" ?  \n                        (DepartmentObj['School of Global Studies'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : school === \"School of Law, Politics and Sociology\" ?  \n                        (DepartmentObj['School of Law, Politics and Sociology'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : school === \"School of Life Sciences\" ?  \n                        (DepartmentObj['School of Life Sciences'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))\n                        : school === \"School of Media, Arts and Humanities\" ?  \n                        (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))                                \n                        : school === \"School of Media, Arts and Humanities\" ?\n                        (DepartmentObj['School of Media, Arts and Humanities'].map (dep => \n                        <MenuItem value={dep}>{dep}</MenuItem>\n                        ))  \n                        : <p></p>\n                        }\n                    </Select>\n                </FormControl>\n                </Box>\n                }\n                </Grid>\n\n                    <Box my={3}>\n                        <Autocomplete\n                            fullWidth\n                            onChange={(event, value, reason) => changeInterest(value)}\n                            id=\"multiple-limit-tags\"\n                            inputValue={mes}\n                            options={AllSubjects}\n                            getOptionLabel={(option) => option}\n                            renderInput={(params) => <TextField {...params} label=\"Add interests\" variant=\"outlined\" />}\n                        />\n                        {interests.map( (e) => <Chip label={e} onDelete={() => DeleteChipIntrest(e)} ></Chip>)}\n                    </Box>\n\n                    <Box my={3}>\n                        <Autocomplete\n                            fullWidth\n                            onChange={(event, value, reason) => changeExpertise(value)}\n                            id=\"multiple-limit-tags\"\n                            inputValue={mes}\n                            options={AllSubjects}\n                            getOptionLabel={(option) => option}\n                            renderInput={(params) => <TextField {...params} label=\"Add interests\" variant=\"outlined\" />}\n                        />\n                        {expertise.map( (e) => <Chip label={e} onDelete={() => DeleteChipExpertise(e)} ></Chip>)}\n                    </Box>\n                    </div>\n\n                </Box>\n\n\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default EditUserProfile\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx",["159","160"],"import { Box, Button, Dialog, DialogContent, DialogTitle, Grid, makeStyles, Typography } from '@material-ui/core';\nimport React, {useState, useEffect, useContext} from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Auth0Context } from '../../context/Auth0Context';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Link } from 'react-router-dom';\nimport EditEvent from './EditEvent'; \nimport { EditEventContext } from '../../context/EditEventContext';\nimport Loading from '../../config/Loading'; \nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\n\nfunction PastEvents() {\n    const [data, setData] = useState<EventEntity[]>([]);\n    const [open, setOpen] = useState(false);\n    const Auth0 = useAuth0();\n    const AuthContext = useContext(Auth0Context);\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n\n    useEffect(() => {\n        fetchData();\n        fetchEventData();\n    }, [])\n\n    async function fetchData(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${token}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function fetchEventData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Past`);\n        const recieved = await response.json();\n        setData(recieved);\n    }\n\n    const handleOpen = (i : number) => {\n        EventContext.setEvent(data[i]); \n        setOpen(true);        \n    };\n\n    async function deleteEvent(i : number){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${i}`, {\n            method : \"DELETE\"\n        });\n        console.log(response);\n        fetchEventData(); \n    }\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    const useStyles = makeStyles(theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    paper: {\n        overflowY: 'unset',\n    },\n\n    customizedButton: {\n        padding: \"10px\",\n        position: \"absolute\",\n        right: -26,\n        top: -27,\n    }, \n    box : {\n        position : \"relative\", \n    }\n\n    }));\n    const classes = useStyles();\n\n    return (\n        <div>\n            {data.length > 0 ? \n            <Grid container>\n            {data?.map ((e,i) => \n            <Box width=\"40%\" borderRadius=\"borderRadius\" border={2} m={3} p={3} className={classes.box}> \n\n                       {AuthContext.data.app_metadata !== null ? \n                        <div className={classes.customizedButton} >\n                            <Button style={{ borderRadius: 50 }}variant=\"contained\" onClick={() => { handleOpen(i)}} color=\"secondary\" type=\"submit\" value=\"Submit\"> <EditIcon/> </Button>\n                            <Button style={{ borderRadius: 50 }} variant=\"contained\" onClick={() => { deleteEvent(e.id)}} color=\"primary\" type=\"submit\" value=\"Submit\"> <DeleteIcon /> </Button>\n                        </div>\n                       : \"\" }\n                        \n                        <Link to={`/events/${e.id}`} style={{ textDecoration: 'none' }}>\n                        <Grid container>\n                        <Grid item xs={3}>\n                            <Grid container justify=\"center\">\n                                <Box bgcolor=\"primary.main\" p={1} borderRadius=\"borderRadius\" >\n                                    <Box px={2}>\n                                        <Grid item xs={12}> <Typography> Nov </Typography> </Grid>\n                                        <Grid item xs={12}> <Typography> 23 </Typography></Grid>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={9}>\n                            <Grid item xs={12}>\n                                <Typography variant={\"h3\"}>{e.title}</Typography>\n                            </Grid>\n                            <Grid item xs={12}>\n                                <ScheduleIcon/> {e.dateTime} - {e.finishedDateTime}\n                            </Grid>\n\n                        </Grid> \n                        </Grid>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <Box my={2}>\n                                        <Typography>{e.description}</Typography>\n                                    </Box>\n                                    <Typography>{e.url}</Typography>\n                                </Grid>\n                        \n                                <Grid container>\n\n                                </Grid>\n                                <Typography variant=\"body2\"> Is DISCUS : {e.isDISCUS.toString()}</Typography>\n                          \n                                <Typography> Tags - {e.tags}</Typography>\n\n                                    <Box bgcolor=\"primary.main\" borderRadius=\"borderRadius\" py={1} px={2}>\n                                        <Typography variant=\"body2\"> <LocalOfferIcon/> {e.type}</Typography>\n                                    </Box>\n\n                            </Grid>  \n                        </Link> \n                </Box>\n            )} \n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">Edit the Event</DialogTitle>\n                        <DialogContent>\n                            <EditEvent dialog={() => setOpen(false)}/>\n                        </DialogContent>\n                    </Dialog> \n\n            </Grid>\n            : <Loading/>  }            \n        </div>\n    )\n}\n\nexport default PastEvents","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx",["161"],"import DateFnsUtils from '@date-io/date-fns'\nimport { TextField, FormControl, InputLabel, Select, MenuItem, Grid, FormControlLabel, Checkbox, Box, Chip, Button } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useSnackbar } from 'notistack'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext'; \nimport { AllSubjects } from '../../config/TagSystem'\n\ninterface EditEventProps{\n    dialog : Function\n}\n\nfunction EditEvent(props : EditEventProps) {\n    const EventContext = useContext(EditEventContext)\n    const [tags, setTags] = useState<string[]>([]);\n    const { enqueueSnackbar } = useSnackbar();\n    let mes = \"\"\n\n    useEffect(() => {\n        setTags(EventContext.event.tags.split(',')); \n    }, [])\n\n    function changeTags(value : string | null){\n        mes = \"\"\n        if (value !== null ){\n            if (tags.includes(value)){   \n            }else{\n                setTags(state => [...state, value])\n            }\n        }\n    }\n    async function UpdateEvent(e : any){\n        e.preventDefault();\n    \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n        Alltags = Alltags.slice(0,-1)\n        EventContext.event.tags = Alltags; \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${EventContext.event.id}`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"POST\", \n            body: JSON.stringify(EventContext.event),\n        })\n        if(response.ok){\n            enqueueSnackbar('Event has been updated', { variant : \"success\" });\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function changeChips(e : String){\n        setTags(tags.filter(subject => subject !== e))\n    }\n\n    const handleStartDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, dateTime: date}); \n    };\n\n    const handleFinishDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, finishedDateTime : date}); \n    };\n\n    return (\n        <div>\n            <Box my={2}>\n                <TextField\n                    autoFocus\n                    variant=\"outlined\" \n                    fullWidth\n                    defaultValue={EventContext.event.title}\n                    onChange={(e) => {EventContext.setEvent({...EventContext.event, title : e.target.value})}}\n                    margin=\"normal\" \n                    label=\"Title\"\n                />\n            </Box>\n\n            <Box my={2}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n                    <Grid container justify=\"space-around\">\n                        <Box px={2}> \n                            <KeyboardDatePicker\n                                disableToolbar\n                                variant=\"inline\"\n                                format=\"MM/dd/yyyy\"\n                                disablePast={true}\n                                margin=\"normal\"\n                                id=\"date-picker-inline\"\n                                label=\"Pick a Date\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}/>\n                        </Box>\n\n                        <Box px={2}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Pick a Time\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}/>\n                        </Box>\n\n                    </Grid>\n                </MuiPickersUtilsProvider>\n            </Box>\n\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        disablePast={true}\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Date\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}/>\n                    <KeyboardTimePicker\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        label=\"Pick a Time\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}/>\n                </Grid>\n            </MuiPickersUtilsProvider>\n\n            <FormControl variant=\"outlined\" className=\"formcontrol\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n                <Grid item xs={6}>\n                    <FormControl variant=\"outlined\" className=\"formcontrol\">\n                        <InputLabel>Type</InputLabel>\n                        <Select \n                            style={{ minWidth: 100 }}\n                            label=\"Event Type\"\n                            defaultValue={EventContext.event.type}\n                            onChange={(e : React.ChangeEvent<any>) => \n                                {EventContext.setEvent({...EventContext.event, type : e.target.value})}}\n                            >\n                            <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                            <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                            <MenuItem value=\"Networking\">Networking</MenuItem>\n                            <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <FormControlLabel\n                        control={\n                        <Checkbox \n                            checked={EventContext.event.isDISCUS}\n                            name=\"isDiscus\" \n                            onChange={(e) => {\n                                EventContext.setEvent({...EventContext.event, isDISCUS : e.target.checked})\n                            }}/>}\n                            label=\"Is a DISCUS event\"\n                        /> \n                </Grid>\n                </Grid>\n\n            </FormControl>\n\n            <Box my={2}>\n                <TextField\n                    autoFocus\n                    variant=\"outlined\" \n                    defaultValue={EventContext.event.url}\n                    onChange={(e) => {\n                        EventContext.setEvent({...EventContext.event, url : e.target.value})\n                    }}\n                    id=\"name\"\n                    label=\"URL\"\n                    fullWidth/>\n            </Box>\n                <Box my={2}>\n                    <TextField\n                        autoFocus\n                        multiline\n                        rows={5}\n                        variant=\"outlined\" \n                        defaultValue={EventContext.event.description}\n                        onChange={(e) => {EventContext.setEvent({...EventContext.event, description : e.target.value})}}\n                        margin=\"dense\"\n                        label=\"Description\"\n                        fullWidth\n                    />\n                </Box>\n\n                <Box my={3}>\n                    <Autocomplete\n                        fullWidth\n                        onChange={(event, value, reason) => changeTags(value)}\n                        id=\"multiple-limit-tags\"\n                        inputValue={mes}\n                        options={AllSubjects}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => <TextField {...params} label=\"Add interests\" variant=\"outlined\" />}\n                    />\n                        <Box my={3}>\n                            {tags.map( (e) => <Chip label={e} onDelete={() => changeChips(e)} ></Chip>)}\n                        </Box>\n                </Box>\n\n                <Button onClick={UpdateEvent}> save </Button>\n\n        </div>\n    )\n}\n\nexport default EditEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx",["162"],"import { Box, Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, MenuItem, Select } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { InputLabel } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Auth0Context } from '../../../context/Auth0Context';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AllSubjects } from '../../../config/TagSystem';\nimport { useSnackbar } from 'notistack';\n\ninterface CreateEventProps {\n    dialog : Function\n}\n\nfunction CreateEvent(props : CreateEventProps) {\n\n    const Auth0 = useAuth0();    \n    const [event, setEvent] = useState({title:\"\",dateTime: new Date() , finishedDateTime: new Date(), type:\"\", url:\"\", description:\"\",isDISCUS:true, isApproved : false, tags : \"\" }); \n    const [accessToken, setAccessToken] = useState(\"\");\n    const AuthContext = useContext(Auth0Context)\n    const [tags, setTags] = useState<string[]>([])\n    const { enqueueSnackbar } = useSnackbar();\n\n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        fetchData(); \n    },[Auth0]);\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function publishEvent(e:any){\n        e.preventDefault();\n        \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n\n        const newEvent = {...event}\n        if(AuthContext.data.app_metadata !== null){\n            newEvent.isApproved = true;\n            setEvent(newEvent)\n        }\n\n        const newEventTags = {...event}\n        newEvent.tags = Alltags.slice(0,-1);\n        setEvent(newEventTags); \n\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity`, {\n            method:\"POST\", \n            body: JSON.stringify(newEvent),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            if (AuthContext.data.app_metadata !== null)\n            {\n                enqueueSnackbar('Event has been created!', { variant : \"success\" });\n            } else \n            {\n                enqueueSnackbar('Event will be published once authorised!', { variant : \"info\" });\n\n            }\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    const handleStartDate = (date: Date) => {\n        setEvent({...event, dateTime : date})\n    };\n\n    const handleFinishDate = (date: Date) => {\n        setEvent({...event, finishedDateTime : date})\n    };\n\n    return (\n        <Box m={3}>\n                <TextField \n                    required\n                    margin=\"normal\" \n                    label=\"Title\" \n                    variant=\"outlined\" \n                    type=\"text\"\n                    fullWidth={true} \n                    name=\"title\" \n                    onChange={(e) => setEvent({...event,title: String(e.target.value)})}\n                />\n                \n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Box p={1}> \n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            disablePast\n                            label=\"Pick a Date\"\n                            value={event.dateTime}\n                            onChange={(e : any) => handleStartDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        </Box>\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Start Time\"\n                                value={event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n                </MuiPickersUtilsProvider>\n\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Box p={1}> \n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            disablePast\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            label=\"Pick a Finish Date\"\n                            value={event.finishedDateTime}\n                            onChange={(e : any) => handleFinishDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        </Box>\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Finish Time\"\n                                value={event.finishedDateTime}\n                                onChange={(e : any) => handleFinishDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n                </MuiPickersUtilsProvider>\n\n                <FormControl variant=\"outlined\" className=\"formcontrol\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n\n                    <InputLabel>Type</InputLabel>\n                    <Select\n                        style={{\n                        }}\n                        onChange={(e) => setEvent({...event,type:String(e.target.value)})}\n                        label=\"Event Type\"\n                    >\n                        <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                        <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                        <MenuItem value=\"Networking\">Networking</MenuItem>\n                        <MenuItem value=\"Generic\">Generic</MenuItem>\n                    </Select>\n                    <Box mx={10}>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={\n                                    <Checkbox \n                                        checked={event.isDISCUS} name=\"isDiscus\" \n                                        onChange={(e) => setEvent({...event,isDISCUS:Boolean(e.target.checked)})}\n                                        />\n                                    }\n                            label=\"A discus event\"/>\n                        </FormGroup>\n                    </Box>\n                </Grid>\n                </FormControl>\n\n                <Box my={1}>\n                    <TextField \n                        required\n                        margin=\"normal\" \n                        label=\"registration\" \n                        variant=\"outlined\" \n                        fullWidth={true}\n                        type=\"text\" \n                        name=\"registration\" \n                        onChange={(e) => setEvent({...event,url:e.target.value})}/>\n                </Box>\n                <Box my={1} >\n                    <TextField\n                        id=\"outlined-multiline-static\"\n                        label=\"Description\"\n                        multiline\n                        fullWidth={true}\n                        rows={4}\n                        onChange={(e) => setEvent({...event,description:String(e.target.value)})}\n                        variant=\"outlined\"/>\n                </Box>\n\n                    <Box my={2}>\n                        <Autocomplete\n                            multiple\n                            limitTags={5}\n                            id=\"set Interest\"\n                            onChange={(obj,value,reason) => setTags(value)}\n                            options={AllSubjects}\n                            getOptionLabel={(option) => option}\n                            renderInput={(params) => (\n                            <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Favorites\" />\n                        )}\n                        />\n                    </Box>\n                <Box my={2}>\n                    <Button disabled={AuthContext.data === null} variant=\"contained\" color=\"secondary\" type=\"submit\" onClick={(e) =>publishEvent(e)} value=\"Submit\">Submit</Button>\n                </Box>\n        </Box> \n    )\n}\n\nexport default CreateEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx",["163","164","165"],"import { Box, Button, TextField, Typography } from '@material-ui/core'\nimport React, { useContext, useEffect, useState } from 'react'\nimport SendIcon from '@material-ui/icons/Send';\nimport EmailAddress from '../models/EmailAddress'; \nimport { EditEventContext } from  '../context/EditEventContext'; \nimport SendMail from '../models/SendMail'; \n\nfunction SendEmail() {\n    const EventContext = useContext(EditEventContext)\n    const [to, setTo] = useState(\"\"); \n    const [subject, setSubject] = useState(\"Invitation...\"); \n    const [body, setBody] = useState(\"\"); \n    const [recipents, setrecipents] = useState<EmailAddress[]>(); \n    useEffect(() => {\n        getRecipents(); \n        formatter(); \n    }, [])\n\n    async function formatter(){\n        setBody(`Title = ${EventContext.event.title}\\nURL = ${EventContext.event.url}\\nType = ${EventContext.event.type}\\nStart DateTime = ${EventContext.event.dateTime}\\nFinish DateTime = ${EventContext.event.dateTime}\\nDescription = ${EventContext.event.description}`)\n    }\n\n    async function getRecipents(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/GetEmails`, { \n            headers: {\n              'Content-Type': 'application/json',\n            }\n        });\n        setrecipents(await response.json())\n    }\n\n    async function sendEmail(){\n        if (recipents !== undefined){\n            let message; \n            message = \"<center> <img src='http://avantehealth.co.uk/discus.png'  width='100' height='100' /> </center> <br> <br>\" + body.replace(/\\n/g, \"<br />\") \n            const sendObj : SendMail = {\n                \"recipients\" : recipents, \n                \"body\" : message, \n                \"subject\" : subject, \n            }\n\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/SendEmail`, { \n                method:\"POST\", \n                body: JSON.stringify(sendObj),\n                headers: {\n                  'Content-Type': 'application/json',\n                }\n            });\n    \n            if (response.ok){\n                (alert(\"sentt\")); \n            }; \n        }\n    }\n\n    return (\n        <div>\n            <Box m={3}>\n                <Typography> To </Typography>\n                {recipents?.map (e => \n                    <>\n                    <Box m={2}>\n                        <Typography>{e.name}</Typography>\n                    </Box>\n                    </>)\n                }\n                <Box my={5}>\n                    <Typography> Subject </Typography>\n                </Box>\n                    <TextField variant=\"outlined\"  value={subject} onChange={e => setSubject(e.target.value)}></TextField>\n                <Typography > Body </Typography>\n                    <TextField\n                        value={body} \n                        variant=\"outlined\" \n                        multiline\n                        fullWidth={true}\n                        rows={10}\n                        onChange={e => setBody(e.target.value)}>\n                    </TextField>\n                <Button onClick={sendEmail}><SendIcon/></Button>\n            </Box>\n        </div>\n    )\n}\n\nexport default SendEmail\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx",["166","167"],"import { Grid, Box, Typography, Avatar, Button, Chip, makeStyles, createStyles, Theme, Paper, CssBaseline } from '@material-ui/core'\nimport React, { useContext } from 'react'\nimport { Auth0Context } from '../context/Auth0Context'\nimport EditIcon from '@material-ui/icons/Edit';\nimport Points from '../components/Points'; \nimport lottie from '../config/lottie.json'\nimport { Player } from \"@lottiefiles/react-lottie-player\";\nimport mySvg from '../assets/Wave.svg';\nimport EmailIcon from '@material-ui/icons/Email';\nimport PersonIcon from '@material-ui/icons/Person';\nimport DomainIcon from '@material-ui/icons/Domain';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport SnoozeIcon from '@material-ui/icons/Snooze';\nimport IsAvailable from './IsAvailable';\nimport uosLogo from '../assets/logo.svg'; \n\nfunction Dashboard() {\n    \n    const AuthContext = useContext(Auth0Context);\n    const drawerWidth = 140;\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n                minHeight : '100vh', backgroundImage: `url(${mySvg})`, backgroundRepeat : \"no-repeat\",\n                backgroundPosition : 'center bottom'\n            },\n            large: {\n                width: theme.spacing(15),\n                height: theme.spacing(15),\n            },\n            glass : {\n                backgroundColor: 'rgba(0,0,0,0.06)'            \n            }\n            }),\n        );\n    const classes = useStyles();\n\n\n    function changeEdit(){\n        AuthContext.setEdit(true); \n    }\n\n    return (<>\n    {AuthContext.data ? \n            <div className={classes.root} > \n            <Grid container>\n                <Grid item xs={12}>\n                        <Box mx={20} my={7} p={4} borderRadius={5} className={classes.glass}>\n                            <Grid container>\n                                <Grid item xs={3}>\n                                    <Grid container justify = \"center\">\n                                        <Box m={2}>\n                                            <Box className=\"small\" borderRadius=\"borderRadius\">\n                                            <Avatar alt=\"Profile Picture\" className={classes.large} src={AuthContext.data ? AuthContext.data.picture : \"\"}/>\n                                            </Box>\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={8}>\n                                    <Box borderRadius={2}>\n                                        <Grid container>\n                                            <Grid item xs={12}>\n                                                <Grid container >\n                                                    <Box m={1}>\n                                                        <Typography variant=\"h4\"> {AuthContext.data.name} </Typography>\n                                                    </Box>\n                                                    <Box m={2} >\n                                                        {AuthContext.data.user_metadata.education.available === 'true' ? <IsAvailable/> : \"\"}\n                                                    </Box>\n                                                </Grid>\n\n                                            </Grid>\n                                            <Grid container>\n                                                <div style={{\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    flexWrap: 'wrap',\n                                                }}>\n                                                    <Box m={1}> <SnoozeIcon/></Box>\n                                                    <Box m={1}> {AuthContext.data.user_metadata.education.graduationDate.toString().slice(4,15)} </Box>\n                                                    <Box m={1}><LinkedInIcon/> </Box>\n                                                    <Box m={1}><img src={uosLogo} alt=\"UoS Logo\"  height='25px' width='30px' /></Box>\n                                                </div>\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                                </Grid>\n                                <Grid item xs={1}>\n                                    <Box m={2}><Button onClick={changeEdit}> <EditIcon/> </Button></Box>\n                                </Grid>\n                            </Grid>\n                            <Grid container  spacing={4}>\n                                <Grid item xs={3}>\n                                    <Box my={7}>\n                                        <Points/>\n                                    </Box>\n                                </Grid>\n                                <Grid item xs={9}>\n                                    <Box>\n                                        <Box m={5} p={3} borderRadius={8} bgcolor=\"secondary.main\">\n                                            <Grid container>\n                                                <Grid item xs={6}>\n                                                    <Typography><EmailIcon/> {AuthContext.data.email}</Typography>\n                                                </Grid>\n                                                <Grid item xs={6}>\n                                                    <Typography><DomainIcon/> {AuthContext.data.user_metadata.education.school}</Typography>\n                                                </Grid>\n                                                <Grid item xs={6}>\n                                                    <Typography><PersonIcon/> {AuthContext.data.user_metadata.education.careerStage}</Typography>\n                                                </Grid>\n                                                <Grid item xs={6}>\n                                                    <Typography><DomainIcon/> {AuthContext.data.user_metadata.education.department}</Typography>\n                                                </Grid>\n                                            </Grid>\n                                        </Box>\n                                    </Box>\n                                </Grid>\n                                <Grid container>\n                                <Grid item xs={6}>\n                                    <Typography>Expertise : {AuthContext.data.user_metadata.expertise.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                    \n                                </Grid>\n                                <Grid item xs={6}>\n                                <Typography>Interest : {AuthContext.data.user_metadata.interest.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                    \n                                </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                        <Box mx={20} p={4} borderRadius={5} className={classes.glass}>\n                            <Typography> Research from {AuthContext.data.name}</Typography>\n                            <Box my={2} borderRadius=\"borderRadius\">\n                                <Typography>{AuthContext.data.user_metadata.research}</Typography>\n                            </Box>\n                        </Box>\n                    </Grid>\n\n            </Grid>\n            <CssBaseline/>\n            </div>\n    :\n        <Player\n        autoplay\n        loop\n        src={lottie}\n        style={{ height: \"300px\", width: \"300px\" }}>\n        </Player>\n    }\n        </>\n    )\n}\n\nexport default Dashboard\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx",["168","169","170"],"import { Button, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport React, { useEffect, useState } from 'react'\nimport EventEntity from '../../models/EventEntity'; \n\nfunction ApproveEvents() {\n    const [ eventsToApprove, setEventsToApprove] = useState<EventEntity[]>([]);\n    const { enqueueSnackbar } = useSnackbar();\n\n    useEffect(() => {\n        getData();\n    }, [])\n        \n    async function getData(){\n        const getData = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Unauthorized`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        setEventsToApprove(await getData.json());  \n    }\n\n    async function ApproveEvent(e : number){\n        const Authorize = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Approve/${e}`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        if(Authorize.ok){\n            enqueueSnackbar('Event has been authorized', { variant : \"success\" });\n        }else{\n            console.error(\"Publishing failed\");\n        }\n        getData();\n    }\n\n    const useStyles = makeStyles({\n        table: {\n          minWidth: 650,\n        },\n      });\n\n      const classes = useStyles();\n\n    return (\n        <div>\n            <>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\">Title</TableCell>\n                                <TableCell>Description</TableCell>\n                                <TableCell align=\"right\">Start Date</TableCell>\n                                <TableCell align=\"right\">Finish Date</TableCell>\n                                <TableCell align=\"right\">Action</TableCell>\n                            </TableRow>\n                        </TableHead>\n                    <TableBody>\n                    {eventsToApprove.map((row) => (\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.description}\n              </TableCell>\n              <TableCell align=\"right\">{row.description}</TableCell>\n              <TableCell align=\"right\">{row.description}</TableCell>\n              <TableCell align=\"right\">{row.description}</TableCell>\n              <TableCell align=\"right\">{row.description}</TableCell>\n            </TableRow>\n          ))}\n                    </TableBody>\n                    </Table>\n                </TableContainer>\n            </>\n        </div>\n    )\n}\n\nexport default ApproveEvents\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx",["171","172","173"],"import { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Label } from 'recharts';\n  \nfunction StackedBarChart() {\n    const [Bardata, setBarData]= useState([]); \n    \n    useEffect(() => {\n      GetData(); \n    }, []);\n\n    async function GetData(){\n      const getData = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Chart`, { \n        headers: {\n        'Content-Type': 'application/json',\n        }\n      });\n      setBarData(await getData.json());  \n    }\n    \n  \n    //@ts-ignore\n    const CustomTooltip = ({ active , payload , label}) => {\n    //@ts-ignore\n            const getIntroOfPage = (label, index) => {    \n                let x = \"\"; \n                Bardata.map( (item : any) => {\n                    if (item.name == label){\n                        x = item.caption[index]\n                    }\n                })\n                return x; \n            };\n            if (active && payload && payload.length) {\n                return (\n                  <div className=\"custom-tooltip\">\n                        { payload.map ( (e : any, i : number) => {\n                          return <p className=\"intro\">{getIntroOfPage(label,i)} {`${e.value}`} </p>\n                        })}\n                  </div>\n            );\n        }\n        return null; \n    }\n\n\n\n\n    return (\n        <>\n          {Bardata ? \n              <div style={{height : \"100%\", width : \"100%\"}}>\n                <Typography variant=\"h4\"> User by School and Departments </Typography>\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    width={500}\n                    height={400}\n                    data={Bardata}\n                    margin={{\n                      top: 20,\n                      right: 30,\n                      left: 20,\n                      bottom: 5,\n                    }}\n                  >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" interval={0} />\n                    <YAxis />\n                    <Tooltip content={\n                    //@ts-ignore\n                    <CustomTooltip />} />\n                      <Bar dataKey=\"bar1\" stackId=\"a\" fill=\"#8884d8\" />\n                      <Bar dataKey=\"bar2\" stackId=\"a\" fill=\"#CA83B0\" />\n                      <Bar dataKey=\"bar3\" stackId=\"a\" fill=\"#84ca9d\" />\n                      <Bar dataKey=\"bar4\" stackId=\"a\" fill=\"#85ca9d\" />\n                      <Bar dataKey=\"bar5\" stackId=\"a\" fill=\"#87ca9d\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n                :\n                \"no data yet\"  \n        }\n\n        </>\n    )\n}\n\nexport default StackedBarChart\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx",[],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":21,"column":24,"nodeType":"180","messageId":"181","endLine":21,"endColumn":37},{"ruleId":"182","severity":1,"message":"183","line":61,"column":7,"nodeType":"184","endLine":61,"endColumn":82,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":97,"column":22,"nodeType":"180","messageId":"188","endLine":97,"endColumn":23},{"ruleId":"186","severity":1,"message":"187","line":127,"column":26,"nodeType":"180","messageId":"188","endLine":127,"endColumn":27},{"ruleId":"186","severity":1,"message":"187","line":136,"column":26,"nodeType":"180","messageId":"188","endLine":136,"endColumn":27},{"ruleId":"186","severity":1,"message":"187","line":151,"column":30,"nodeType":"180","messageId":"188","endLine":151,"endColumn":31},{"ruleId":"189","severity":1,"message":"190","line":192,"column":22,"nodeType":"191","messageId":"192","endLine":192,"endColumn":24},{"ruleId":"182","severity":1,"message":"183","line":19,"column":8,"nodeType":"184","endLine":19,"endColumn":21,"suggestions":"193"},{"ruleId":"178","severity":1,"message":"194","line":15,"column":8,"nodeType":"180","messageId":"181","endLine":15,"endColumn":19},{"ruleId":"182","severity":1,"message":"195","line":24,"column":4,"nodeType":"184","endLine":24,"endColumn":6,"suggestions":"196"},{"ruleId":"178","severity":1,"message":"197","line":12,"column":12,"nodeType":"180","messageId":"181","endLine":12,"endColumn":24},{"ruleId":"178","severity":1,"message":"198","line":12,"column":26,"nodeType":"180","messageId":"181","endLine":12,"endColumn":41},{"ruleId":"178","severity":1,"message":"199","line":16,"column":12,"nodeType":"180","messageId":"181","endLine":16,"endColumn":21},{"ruleId":"182","severity":1,"message":"183","line":24,"column":8,"nodeType":"184","endLine":24,"endColumn":10,"suggestions":"200"},{"ruleId":"178","severity":1,"message":"201","line":43,"column":20,"nodeType":"180","messageId":"181","endLine":43,"endColumn":28},{"ruleId":"178","severity":1,"message":"202","line":58,"column":14,"nodeType":"180","messageId":"181","endLine":58,"endColumn":26},{"ruleId":"182","severity":1,"message":"183","line":36,"column":8,"nodeType":"184","endLine":36,"endColumn":22,"suggestions":"203"},{"ruleId":"182","severity":1,"message":"204","line":34,"column":8,"nodeType":"184","endLine":34,"endColumn":10,"suggestions":"205"},{"ruleId":"178","severity":1,"message":"194","line":21,"column":12,"nodeType":"180","messageId":"181","endLine":21,"endColumn":23},{"ruleId":"182","severity":1,"message":"183","line":26,"column":8,"nodeType":"184","endLine":26,"endColumn":10,"suggestions":"206"},{"ruleId":"182","severity":1,"message":"207","line":22,"column":8,"nodeType":"184","endLine":22,"endColumn":10,"suggestions":"208"},{"ruleId":"182","severity":1,"message":"183","line":32,"column":7,"nodeType":"184","endLine":32,"endColumn":14,"suggestions":"209"},{"ruleId":"178","severity":1,"message":"210","line":10,"column":12,"nodeType":"180","messageId":"181","endLine":10,"endColumn":14},{"ruleId":"178","severity":1,"message":"211","line":10,"column":16,"nodeType":"180","messageId":"181","endLine":10,"endColumn":21},{"ruleId":"182","severity":1,"message":"212","line":17,"column":8,"nodeType":"184","endLine":17,"endColumn":10,"suggestions":"213"},{"ruleId":"178","severity":1,"message":"214","line":1,"column":88,"nodeType":"180","messageId":"181","endLine":1,"endColumn":93},{"ruleId":"178","severity":1,"message":"215","line":20,"column":11,"nodeType":"180","messageId":"181","endLine":20,"endColumn":22},{"ruleId":"178","severity":1,"message":"216","line":1,"column":10,"nodeType":"180","messageId":"181","endLine":1,"endColumn":16},{"ruleId":"178","severity":1,"message":"217","line":1,"column":103,"nodeType":"180","messageId":"181","endLine":1,"endColumn":113},{"ruleId":"178","severity":1,"message":"218","line":23,"column":20,"nodeType":"180","messageId":"181","endLine":23,"endColumn":32},{"ruleId":"178","severity":1,"message":"219","line":3,"column":84,"nodeType":"180","messageId":"181","endLine":3,"endColumn":89},{"ruleId":"189","severity":1,"message":"190","line":27,"column":43,"nodeType":"191","messageId":"192","endLine":27,"endColumn":45},{"ruleId":"220","severity":1,"message":"221","line":28,"column":35,"nodeType":"222","messageId":"223","endLine":28,"endColumn":37},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"@typescript-eslint/no-unused-vars","'setSearchTerm' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["226"],"@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["227"],"'accessToken' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getEventAttendance' and 'getEventInfo'. Either include them or remove the dependency array.",["228"],"'loginPressed' is assigned a value but never used.","'setLoginPressed' is assigned a value but never used.","'interests' is assigned a value but never used.",["229"],"'saveData' is defined but never used.","'handleDelete' is defined but never used.",["230"],"React Hook useEffect has a missing dependency: 'LoadStates'. Either include it or remove the dependency array.",["231"],["232"],"React Hook useEffect has a missing dependency: 'EventContext.event.tags'. Either include it or remove the dependency array.",["233"],["234"],"'to' is assigned a value but never used.","'setTo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formatter'. Either include it or remove the dependency array.",["235"],"'Paper' is defined but never used.","'drawerWidth' is assigned a value but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'ApproveEvent' is defined but never used.","'Label' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"242","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},"Update the dependencies array to be: [searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, fetchData]",{"range":"255","text":"256"},"Update the dependencies array to be: [accessToken, fetchData]",{"range":"257","text":"258"},"Update the dependencies array to be: [getEventAttendance, getEventInfo]",{"range":"259","text":"260"},"Update the dependencies array to be: [fetchData]",{"range":"261","text":"262"},"Update the dependencies array to be: [openNE, open, fetchData]",{"range":"263","text":"264"},"Update the dependencies array to be: [LoadStates]",{"range":"265","text":"266"},{"range":"267","text":"262"},"Update the dependencies array to be: [EventContext.event.tags]",{"range":"268","text":"269"},"Update the dependencies array to be: [Auth0, fetchData]",{"range":"270","text":"271"},"Update the dependencies array to be: [formatter]",{"range":"272","text":"273"},[2683,2758],"[searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, fetchData]",[656,669],"[accessToken, fetchData]",[1117,1119],"[getEventAttendance, getEventInfo]",[1062,1064],"[fetchData]",[1596,1610],"[openNE, open, fetchData]",[1536,1538],"[LoadStates]",[1137,1139],[913,915],"[EventContext.event.tags]",[1414,1421],"[Auth0, fetchData]",[709,711],"[formatter]"]