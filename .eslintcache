[{"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx":"1","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx":"2","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx":"3","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx":"4","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx":"5","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx":"6","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx":"7","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx":"8","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx":"9","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx":"10","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx":"11","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx":"12","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx":"13","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx":"14","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx":"15","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx":"16","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx":"17","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx":"18","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx":"19","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx":"20","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx":"21","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx":"22","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx":"23","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx":"24","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx":"25","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx":"26","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx":"27","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx":"28","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx":"29","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx":"30","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx":"31","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUser.tsx":"32","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/SelectedUserContext.tsx":"33","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/UserTheme.tsx":"34","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/HtmlTooltip.tsx":"35","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/SearchTheme.tsx":"36","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/AntSwitch.tsx":"37"},{"size":1210,"mtime":1615981980255,"results":"38","hashOfConfig":"39"},{"size":399,"mtime":1616079789555,"results":"40","hashOfConfig":"39"},{"size":2443,"mtime":1615994712866,"results":"41","hashOfConfig":"39"},{"size":838,"mtime":1616079789554,"results":"42","hashOfConfig":"39"},{"size":1466,"mtime":1616079789554,"results":"43","hashOfConfig":"39"},{"size":23054,"mtime":1616253641296,"results":"44","hashOfConfig":"39"},{"size":1515,"mtime":1616079789533,"results":"45","hashOfConfig":"39"},{"size":2040,"mtime":1616091229348,"results":"46","hashOfConfig":"39"},{"size":5026,"mtime":1616236507556,"results":"47","hashOfConfig":"39"},{"size":1324,"mtime":1616079789534,"results":"48","hashOfConfig":"39"},{"size":2121,"mtime":1616079789532,"results":"49","hashOfConfig":"39"},{"size":5378,"mtime":1616229792261,"results":"50","hashOfConfig":"39"},{"size":15995,"mtime":1616229937640,"results":"51","hashOfConfig":"39"},{"size":15266,"mtime":1616252609169,"results":"52","hashOfConfig":"39"},{"size":25576,"mtime":1616253082897,"results":"53","hashOfConfig":"39"},{"size":5752,"mtime":1615981980252,"results":"54","hashOfConfig":"39"},{"size":1204,"mtime":1615981980246,"results":"55","hashOfConfig":"39"},{"size":1399,"mtime":1616248167311,"results":"56","hashOfConfig":"39"},{"size":475,"mtime":1616153521383,"results":"57","hashOfConfig":"39"},{"size":466,"mtime":1614962382516,"results":"58","hashOfConfig":"39"},{"size":151,"mtime":1614962382516,"results":"59","hashOfConfig":"39"},{"size":9028,"mtime":1616146209778,"results":"60","hashOfConfig":"39"},{"size":10118,"mtime":1616084913377,"results":"61","hashOfConfig":"39"},{"size":3186,"mtime":1614962382514,"results":"62","hashOfConfig":"39"},{"size":17807,"mtime":1616253620798,"results":"63","hashOfConfig":"39"},{"size":10102,"mtime":1616252527657,"results":"64","hashOfConfig":"39"},{"size":4269,"mtime":1616090559454,"results":"65","hashOfConfig":"39"},{"size":5443,"mtime":1616235491014,"results":"66","hashOfConfig":"39"},{"size":3544,"mtime":1616247129923,"results":"67","hashOfConfig":"39"},{"size":258,"mtime":1615994412957,"results":"68","hashOfConfig":"39"},{"size":1152,"mtime":1616087342944,"results":"69","hashOfConfig":"39"},{"size":18515,"mtime":1616253031095,"results":"70","hashOfConfig":"39"},{"size":1494,"mtime":1616146344723,"results":"71","hashOfConfig":"39"},{"size":1216,"mtime":1616168737083,"results":"72","hashOfConfig":"39"},{"size":314,"mtime":1616227611979,"results":"73","hashOfConfig":"39"},{"size":1185,"mtime":1616250780256,"results":"74","hashOfConfig":"39"},{"size":913,"mtime":1616250751224,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1k7wfi0",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/index.tsx",[],["161","162"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/theme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Home.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/EditEventContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/Auth0Context.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/SearchUsers.tsx",["163","164","165","166","167","168","169","170","171"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Login.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/AdminPanel.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Sidebar.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/WelcomeScreen.tsx",["172"],"import { useAuth0 } from '@auth0/auth0-react';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Auth0Context } from './context/Auth0Context';\nimport Dashboard from './components/Dashboard'\nimport EnrichProfile from './components/EnrichProfile';\nimport EditUserProfile from './components/EditUserProfile';\n\n\nfunction WelcomeScreen() {\n    const Auth0 = useAuth0();\n    const [accessToken, setAccessToken] = useState('')\n    const AuthContext = useContext(Auth0Context)\n\n    useEffect(() => {\n        Auth0.getAccessTokenSilently().then(token => setAccessToken(token));\n    },[Auth0])\n\n    useEffect(() => {\n        fetchData();\n    }, [accessToken])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    return (\n        <>\n            { AuthContext.data.user_metadata === null ? \n                 <EnrichProfile/>\n                : AuthContext.edit === false ?\n                 <Dashboard/>\n                :\n                 <EditUserProfile/>\n            }\n        </>\n    )}\n\n\nexport default WelcomeScreen","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/Events.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ViewEventEntity.tsx",["173","174"],"import { useAuth0 } from '@auth0/auth0-react';\nimport { Avatar, Box, createStyles, Grid, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext';\nimport EventAttendance from '../../models/EventAttendance';\nimport { CSVLink } from \"react-csv\";\nimport { Button, Dialog, DialogContent, DialogTitle, IconButton } from '@material-ui/core'\nimport MailIcon from '@material-ui/icons/Mail';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport SendEmail from '../SendEmail';\nimport events from '../../assets/events.svg'; \nimport Moment from 'react-moment';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport React from 'react';\n\nfunction ViewEventEntity(props : any) {\n\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n    const Auth0 = useAuth0();\n    const [eventAttendance,setEventAttendance ] = useState<EventAttendance>(); \n    const headers = [ { label:'Name',key:'name'},{label:'Email Address',key:'email'},{label:'Expertise',key:'user_metadata.expertise'}, {label:'Interests',key:'user_metadata.interest' },];\n    const [open, setOpen] = useState(false);\n\n    useEffect(() => {\n        getEventInfo(); \n        getEventAttendance(); \n    }, [])\n\n    const handleOpen = () => {\n        setOpen(true);        \n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    async function getEventInfo(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${props.match.params.event_id}`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        EventContext.setEvent(await response.json()); \n    }\n\n    async function getEventAttendance(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/EventAttendance/${props.match.params.event_id}`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        setEventAttendance(await response.json()); \n    }\n\n    const useStyles = makeStyles((theme: Theme) =>\n        createStyles({\n            root: {\n                display: 'flex',\n                minHeight : '100vh', \n                backgroundImage: `url(${events})`, \n                backgroundRepeat : \"no-repeat\",\n                backgroundSize: '40%', \n                backgroundPosition : 'right bottom',\n                opacity : '0.9'\n            },\n            large: {\n                width: theme.spacing(20),\n                height: theme.spacing(20),\n            },\n            glass : {\n                backgroundColor: 'rgba(255,255,255,0.9)',  \n            }\n            }),\n        );\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root}>\n        <p>Event ID : {EventContext.event.id} </p>\n            <Grid\n             container\n             spacing={0}\n             direction=\"column\"\n             alignItems=\"center\"\n             justify=\"center\"\n             style={{ minHeight: '100vh' }}\n             >\n            <Grid item xs={6}>\n              <Box className={classes.glass} p={1} border={3} borderRadius={4}>\n                <Typography>{EventContext.event.title}</Typography>\n                <Typography>Start Time -  <Moment format=\"DD/MM/YYYY HH:mm\">{EventContext.event.dateTime}</Moment></Typography>\n                <Typography>Finish Time - <Moment format=\"DD/MM/YYYY HH:mm\">{EventContext.event.finishedDateTime}</Moment> </Typography>\n                <Typography> Tags - {EventContext.event.tags}</Typography>\n                <Typography variant=\"body2\">{EventContext.event.url}</Typography>\n                <Typography variant=\"body2\"> Is DISCUS : {EventContext.event.isDISCUS.toString()}</Typography>  \n                <Typography variant=\"h4\"> Attendees</Typography>   \n                {eventAttendance?.users.map (e => \n                <Grid container>  \n                <Avatar alt=\"Cindy Baker\" src={e.picture} />\n                <Typography>{e.name}</Typography>\n                </Grid>\n                )}\n                <Box>\n                    Total users {eventAttendance?.total}\n                </Box>\n\n                <Button onClick={handleOpen}><MailIcon/>Email Users</Button>\n                {eventAttendance ? <CSVLink filename={`${EventContext.event.title}.csv`} headers = {headers} data={eventAttendance.users}><GetAppIcon/></CSVLink>  : \"\"}\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"id\">\n                    <Box display=\"flex\" alignItems=\"center\">\n                    <Box flexGrow={1}> <Typography variant=\"h4\">Send Emails</Typography></Box>\n                    <Box>\n                    <IconButton onClick={handleClose}> <CancelIcon /> </IconButton>\n                    </Box>\n                    </Box>\n                    </DialogTitle>\n                        <DialogContent>\n                            <SendEmail/>\n                        </DialogContent>\n                </Dialog>\n\n            </Box>\n              \n            </Grid>  \n\n            </Grid> \n        </Grid>\n    )\n}\n\nexport default ViewEventEntity\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/ViewUser.tsx",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import { Avatar, Box, Button, Chip, createStyles, Dialog, DialogContent, DialogTitle, FormControl, Grid, Hidden, InputLabel, makeStyles, MenuItem, Select, TextField, Theme, Typography } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react'\nimport Auth0user from '../models/Auth0user';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Autocomplete, AutocompleteChangeReason } from '@material-ui/lab';\nimport { Auth0Context } from '../context/Auth0Context'\nimport IsAvailable from './IsAvailable';\nimport Loading from '../config/Loading';\nimport EmailIcon from '@material-ui/icons/Email';\nimport SchoolIconScout from '../assets/school.svg';\nimport CareerStageIconScout from '../assets/briefcase.svg'; \nimport PersonIcon from '@material-ui/icons/Person';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport SchoolIcon from '@material-ui/icons/School';\nimport uosLogo from '../assets/logo.svg'; \nimport EditUser from './EditUser';\nimport { SelectedUserContext } from '../context/SelectedUserContext';\nimport UserTheme from '../themes/UserTheme';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nfunction ViewUser(props : any) {\n\n    const [loginPressed, setLoginPressed] = useState(false);\n    const user_id = props.match.params.user_id; \n    const [editMode, setEditMode] = useState(false);\n    const [interests, setInterests] = useState<string[]>([])\n    const UserContext = useContext(SelectedUserContext); \n    const [openDelete, setOpenDelete] = useState(false); \n\n    useEffect(() => {\n        fetchData();\n    }, [])\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/${user_id}`);\n        UserContext.setData(await response.json());\n    }\n\n    function changeEdit(){\n        if (UserContext.data !== undefined){\n            setInterests(UserContext.data?.user_metadata.interest)\n        }\n        setEditMode(true); \n    }\n\n    function Cancel(){\n        setEditMode(false); \n    }\n\n    async function saveData(e : any){\n        e.preventDefault();\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/User/`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"POST\", \n            body: JSON.stringify(UserContext.data),\n        })\n        if(response.ok){\n            alert(\"Success\"); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n\n    function addtoState(value : { Subject : string}[], reason : AutocompleteChangeReason){\n        let newTags : string [] = []; \n        setInterests(newTags); \n        setInterests(value.map ( x => x.Subject)); \n    }\n    \n    function openDeleteDialog(){\n        setOpenDelete(true); \n    }\n\n    function handleCloseDelete(){\n        setOpenDelete(false); \n    }\n    async function handleDelete(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Delete/${UserContext.data.user_id}`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"DELETE\", \n        })\n        if(response.ok){\n            \n            alert(\"Deleted User\"); \n            handleCloseDelete();\n        }else{\n            console.error(\"Failed\");\n        }\n    }\n\n    const classes = UserTheme();\n\n    \n    return (\n        <>\n        {editMode ? <EditUser id={UserContext.data?.user_id}/> : \n            <>\n            {UserContext.data ? \n                              <>\n                              <Box my={4}>\n                              </Box>\n                              <Hidden xsDown>\n                                  <Box my={7}>\n                                  </Box>\n                              </Hidden>\n                              <div className={classes.root}>\n                                  <Grid container justify=\"center\" className={classes.centerMobile}>\n                                  <Grid item xs={12} lg={9}>\n                                      <Box borderRadius={5} className={classes.glass}>\n                                      <Grid container className={classes.centerMobile}>\n                                      <Grid item lg={4} xs={9}>\n                                          <Grid container justify = \"center\">\n                                              <Box m={2}>\n                                                  <Box className=\"small\" borderRadius=\"borderRadius\">\n                                                  <Avatar alt=\"Profile Picture\" className={classes.large} src={UserContext.data ? UserContext.data.picture : \"\"}/>\n                                                  </Box>\n                                              </Box>\n                                              <Hidden only={['md', 'lg', 'xl', 'sm']}>\n                                              <Button onClick={changeEdit}> <EditIcon/> </Button>\n                                              </Hidden>\n                                          </Grid>\n                  \n                                      </Grid>\n                  \n                                      <Grid item lg={8} xs={8} className={classes.centerMobile}>\n                                          <Box borderRadius={2}>\n                                          <Grid container className={classes.centerMobile}>\n                                          <Grid item xs={11} className={classes.centerMobile}>\n                                          <Grid container className={classes.centerMobile}>\n                                          <Box my={1}>\n                                              <Typography variant=\"h4\"> {UserContext.data.name} </Typography>\n                                          </Box>\n                                          <Box m={2} >\n                                              {UserContext.data.user_metadata.education.available === 'true' ? <IsAvailable/> : \"\"}\n                                          </Box>\n                                          </Grid>\n                                          \n                  \n                                          </Grid>\n                                          <Hidden xsDown>\n                                              <Grid item lg={1} xs={1}>\n                                                  <Box m={2}><Button onClick={changeEdit}> <EditIcon/> </Button></Box>\n                                              </Grid>\n                                          </Hidden>\n                                          <Grid container className={classes.centerMobile}>\n                                          <div className={classes.centerSVG}>\n                                          {\n                                          UserContext.data.user_metadata.social.sussex === \"\" ? \n                                              <></>\n                                              :\n                                              <a href={UserContext.data.user_metadata.social.sussex} target=\"_blank\" rel=\"noopener noreferrer\">\n                                              <Box mr={2}><img src={uosLogo} alt=\"UoS Logo\"  height='25px' width='30px' /></Box> \n                                          </a>\n                                          }                        \n                              \n                                          {UserContext.data.user_metadata.social.linkedIn === \"\" ?  \n                                              <></> \n                                              :\n                                              <Box mr={2}>\n                                                  <a href={UserContext.data.user_metadata.social.linkedIn} target=\"_blank\" rel=\"noopener noreferrer\"> \n                                                      <LinkedInIcon/>\n                                                  </a>\n                                              </Box>\n                                          }\n                                          <Box my={1}><SchoolIcon/></Box>\n                                          <Box m={1}>{UserContext.data.user_metadata.education.graduationDate.toString().slice(4,15)} </Box>\n                                          </div>\n                                          </Grid>\n                                          </Grid>\n                                          </Box>\n                                      </Grid>\n                                      </Grid>\n                                      <Grid container>\n                                          <Grid item xs={12} lg={4}>\n                                              <Grid container justify=\"center\">\n                                                  <Grid item xs={9}>\n                                                      <Box pb={2}>\n                                                        <Box  m={1} p={3} bgcolor=\"primary.main\" borderRadius=\"borderRadius\" textAlign=\"center\">\n                                                        <Typography>{UserContext.data.user_metadata.events.length} Experience</Typography>\n                                                        </Box>                                                     \n                                                    </Box>\n                                                  </Grid>\n                                              </Grid>\n                                          </Grid>\n                                          <Grid item xs={12} lg={8}>\n                                                  <Box mx={3} p={4} borderRadius={8} bgcolor=\"secondary.main\">\n                                                      <Grid container>\n                                                          <Grid item lg={5} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <img src={CareerStageIconScout} alt=\"School Icon\"  height='25px' width='25px' />\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.user_metadata.education.careerStage}</Typography>\n                                                              </Box>  \n                                                          </Grid>\n                                                          <Grid item lg={7} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <EmailIcon/>\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.email}</Typography>\n                                                              </Box> \n                                                          </Grid>\n                                                          <Grid item lg={5} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <PersonIcon/>\n                                                                  <Box mx={0.5}>\n                                                                      <Typography>{UserContext.data.user_metadata.education.department}</Typography>\n                                                                  </Box>\n                                                              </Box> \n                                                          </Grid>\n                                                          <Grid item lg={7} xs={12}>\n                                                              <Box className={classes.centerSVG}>\n                                                                  <img src={SchoolIconScout} alt=\"School Icon\"  height='25px' width='25px' />\n                                                                  <Box mx={0.5}>\n                                                                  </Box>\n                                                                  <Typography>{UserContext.data.user_metadata.education.school}</Typography>\n                                                              </Box> \n                                                          </Grid>\n                                                      </Grid>\n                                                  </Box>\n                                          </Grid>\n                                      </Grid>\n                                      <Grid container>\n                                          <Grid item xs={11} lg={6}>\n                                              <Box mt={2} className={classes.mobilePadding}>\n                                                  <Typography>Expertise : {UserContext.data.user_metadata.expertise.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                              </Box>\n                                          </Grid>\n                                          <Grid item xs={11} lg={6}>\n                                              <Box mt={2} className={classes.mobilePadding}>\n                                                  <Typography>Interest : {UserContext.data.user_metadata.interest.map(e => <Chip color='primary' style={{backgroundColor:'#24CAC3', margin : 2}} label={e}></Chip>)} </Typography>\n                                              </Box>\n                                          </Grid>\n                                      </Grid>\n                                      </Box>\n                                          <Grid item xs={12}  className={classes.mobilePadding}>\n                                              <Box borderRadius={5} className={classes.glass} my={4} >\n                                                  <Box p={2}>\n                                                      <Typography variant=\"h6\" gutterBottom > Research from {UserContext.data.name}</Typography>\n                                                      <Box bgcolor=\"#FAFAFA\" p={1} borderRadius={3}>\n                                                          <Typography>{UserContext.data.user_metadata.research}</Typography>\n                                                      </Box>\n                                                  </Box>\n                                              </Box>\n                                          </Grid>\n                                          <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={e => openDeleteDialog()}\n                                            startIcon={<DeleteIcon />}\n                                            />\n                                      </Grid>\n                                  </Grid>\n                              </div>\n\n                            <Dialog open={openDelete} onClose={handleCloseDelete} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle>Delete Event the Event</DialogTitle>\n                            <DialogContent>\n                            Are you sure to delete? \n                            </DialogContent>\n                            <Button onClick={() => handleDelete()} color=\"primary\"> Delete Event </Button>\n                            <Button onClick={() => handleCloseDelete()} color=\"primary\"> Cancel </Button>\n                            </Dialog> \n                          </>\n            :\n                <Loading/>\n            }\n            </>\n            }\n        </>\n    )\n}\n\nexport default ViewUser\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/UpcomingEvents.tsx",["193","194","195","196"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUserProfile.tsx",["197","198","199","200","201","202","203","204","205","206","207"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/PastEvents.tsx",["208","209"],"import { Box, Button, Dialog, DialogContent, DialogTitle, Grid, makeStyles, Typography } from '@material-ui/core';\nimport React, {useState, useEffect, useContext} from 'react'\nimport EventEntity from '../../models/EventEntity'; \nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Auth0Context } from '../../context/Auth0Context';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Link } from 'react-router-dom';\nimport EditEvent from './EditEvent'; \nimport { EditEventContext } from '../../context/EditEventContext';\nimport Loading from '../../config/Loading'; \nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport Moment from 'react-moment';\n\nfunction PastEvents() {\n    const [data, setData] = useState<EventEntity[]>([]);\n    const [open, setOpen] = useState(false);\n    const Auth0 = useAuth0();\n    const AuthContext = useContext(Auth0Context);\n    const EventContext = useContext(EditEventContext)\n    const [accessToken, setAccessToken] = useState(''); \n\n    useEffect(() => {\n        fetchData();\n        fetchEventData();\n    }, [])\n\n    async function fetchData(){\n        const token = await Auth0.getAccessTokenSilently(); \n        setAccessToken(token)\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${token}`, \n              'Content-Type': 'application/json',\n            }\n        });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function fetchEventData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Past`);\n        const recieved = await response.json();\n        setData(recieved);\n    }\n\n    const handleOpen = (i : number) => {\n        EventContext.setEvent(data[i]); \n        setOpen(true);        \n    };\n\n    async function deleteEvent(i : number){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${i}`, {\n            method : \"DELETE\"\n        });\n        console.log(response);\n        fetchEventData(); \n    }\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    const useStyles = makeStyles(theme => ({\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n    paper: {\n        overflowY: 'unset',\n    },\n\n    customizedButton: {\n        padding: \"10px\",\n        position: \"absolute\",\n        right: -26,\n        top: -27,\n    }, \n    eventContainer : {\n        backgroundColor : \"yellow\", \n    }, \n    box : {\n        position : \"relative\", \n    }\n\n    }));\n    const classes = useStyles();\n\n    return (\n        <div>\n            {data.length > 0 ? \n            <Grid container>\n            {data?.map ((e,i) => \n            <Grid item xs={12} md={4}>\n                <Box borderRadius=\"borderRadius\" border={2} m={3} py={2} className={classes.box}>              \n                    {AuthContext.data.app_metadata !== null ? \n                    <div className={classes.customizedButton} >\n                        <Button style={{ borderRadius: 50 }}variant=\"contained\" onClick={() => { handleOpen(i)}} color=\"secondary\" type=\"submit\" value=\"Submit\"> <EditIcon/> </Button>\n                        <Button style={{ borderRadius: 50 }} variant=\"contained\" onClick={() => { deleteEvent(e.id)}} color=\"primary\" type=\"submit\" value=\"Submit\"> <DeleteIcon /> </Button>\n                    </div>\n                    : \"\" }\n                        <Grid container>\n                            <Grid item xs={10}>\n                                <Link to={`/events/${e.id}`} style={{ textDecoration: 'none', color : 'black' }}>\n                                    <Grid container>\n                                        <Grid item xs={5}>\n                                            <Box className={classes.eventContainer} borderRadius={3} p={1} mx={2}>\n                                                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n                                                    <Grid item><Typography><Moment format=\"MMMM\">{e.dateTime.toString()}</Moment> </Typography></Grid>\n                                                    <Grid item><Typography><Moment format=\"Do\">{e.dateTime.toString()}</Moment></Typography></Grid>\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n                                        <Grid item xs={7}>\n                                            <Typography gutterBottom>{e.title}</Typography>\n                                            <Grid container>\n                                                <ScheduleIcon/><Typography><Moment format=\"LT\">{e.dateTime.toString()}</Moment></Typography>  -  <Typography><Moment format=\"LT\">{e.finishedDateTime.toString()}</Moment></Typography>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Link> \n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Grid>\n            )} \n                    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                        <DialogTitle id=\"form-dialog-title\">Edit the Event</DialogTitle>\n                        <DialogContent>\n                            <EditEvent dialog={() => setOpen(false)}/>\n                        </DialogContent>\n                    </Dialog> \n\n            </Grid>\n            : <Loading/>  }            \n        </div>\n    )\n}\n\nexport default PastEvents","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/PieChartInterest.tsx",["210","211"],"import React, { useEffect, useState } from 'react'\nimport { ResponsivePie } from '@nivo/pie'\nimport { Box, Typography } from '@material-ui/core';\n\nfunction PieChartInterest() {\n\n    const [PieData, setPieData]= useState([]); \n\n    useEffect(() => {\n        getData();\n    }, [])\n        \n    async function getData(){\n        const getData = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/PieChart/Interest`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        setPieData(await getData.json());  \n    }\n\n\n    return (\n        <ResponsivePie\n            data={PieData}\n            margin={{ top: 40, right: 100, bottom: 80, left: 100 }}\n            innerRadius={0.5}\n            padAngle={0.7}\n            cornerRadius={3}\n            colors={{ scheme: 'nivo' }}\n            borderWidth={1}\n            borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\n            radialLabelsSkipAngle={10}\n            radialLabelsTextColor=\"#333333\"\n            radialLabelsLinkColor={{ from: 'color' }}\n            sliceLabelsSkipAngle={10}\n            sliceLabelsTextColor=\"#333333\"\n        />\n    )\n}\n\nexport default PieChartInterest\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Department.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Points.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/Loading.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/config/TagSystem.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/EditEvent.tsx",["212"],"import DateFnsUtils from '@date-io/date-fns'\nimport { TextField, FormControl, InputLabel, Select, MenuItem, Grid, FormControlLabel, Checkbox, Box, Chip, Button } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useSnackbar } from 'notistack'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { EditEventContext } from '../../context/EditEventContext'; \nimport { AllSubjects } from '../../config/TagSystem'\n\ninterface EditEventProps{\n    dialog : Function\n}\n\nfunction EditEvent(props : EditEventProps) {\n    const EventContext = useContext(EditEventContext)\n    const [tags, setTags] = useState<string[]>([]);\n    const { enqueueSnackbar } = useSnackbar();\n    let mes = \"\"\n\n    useEffect(() => {\n        setTags(EventContext.event.tags.split(',')); \n    }, [])\n\n    function changeTags(value : string | null){\n        mes = \"\"\n        if (value !== null ){\n            if (tags.includes(value)){   \n            }else{\n                setTags(state => [...state, value])\n            }\n        }\n    }\n    async function UpdateEvent(e : any){\n        e.preventDefault();\n    \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n        Alltags = Alltags.slice(0,-1)\n        EventContext.event.tags = Alltags; \n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/${EventContext.event.id}`, {\n            headers : {\"Content-Type\" : \"application/json\" }, \n            method:\"POST\", \n            body: JSON.stringify(EventContext.event),\n        })\n        if(response.ok){\n            enqueueSnackbar('Event has been updated', { variant : \"success\" });\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    function changeChips(e : String){\n        setTags(tags.filter(subject => subject !== e))\n    }\n\n    const handleStartDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, dateTime: date}); \n    };\n\n    const handleFinishDate = (date: Date) => {\n        EventContext.setEvent({...EventContext.event, finishedDateTime : date}); \n    };\n\n    return (\n        <div>\n            <TextField\n                autoFocus\n                variant=\"outlined\" \n                fullWidth\n                defaultValue={EventContext.event.title}\n                onChange={(e) => {EventContext.setEvent({...EventContext.event, title : e.target.value})}}\n                margin=\"normal\" \n                label=\"Title\"\n            />\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n\n                    <Grid container justify=\"space-around\">\n                        <Box p={1}> \n                            <KeyboardDatePicker\n                                disableToolbar\n                                variant=\"inline\"\n                                format=\"MM/dd/yyyy\"\n                                disablePast={true}\n                                margin=\"normal\"\n                                id=\"date-picker-inline\"\n                                label=\"Pick a Date\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change date',\n                                }}/>\n                        </Box>\n\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Pick a Time\"\n                                value={EventContext.event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}/>\n                        </Box>\n\n                    </Grid>\n                </MuiPickersUtilsProvider>\n\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Box m={1}>\n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"MM/dd/yyyy\"\n                        disablePast={true}\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Date\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}/>\n                    </Box>\n                    <Box p={1}>\n                    <KeyboardTimePicker\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        label=\"Pick a Time\"\n                        value={new Date(EventContext.event.finishedDateTime)}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change time',\n                        }}/>\n                    </Box>\n                </Grid>\n            </MuiPickersUtilsProvider>\n\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                    <FormControl variant=\"outlined\">\n                        <InputLabel>Type</InputLabel>\n                        <Select \n                            style={{ minWidth: 220 }}\n                            label=\"Event Type\"\n                            defaultValue={EventContext.event.type}\n                            onChange={(e : React.ChangeEvent<any>) => \n                            {EventContext.setEvent({...EventContext.event, type : e.target.value})}}\n                            >\n                            <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                            <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                            <MenuItem value=\"Networking\">Networking</MenuItem>\n                            <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12} >\n                    <Box m={1}>\n                        <FormControlLabel\n                        control={\n                        <Checkbox \n                        checked={EventContext.event.isDISCUS}\n                        name=\"isDiscus\" \n                        onChange={(e) => {\n                        EventContext.setEvent({...EventContext.event, isDISCUS : e.target.checked})\n                        }}/>}\n                        label=\"Is a DISCUS event\"\n                        /> \n                    </Box>\n                </Grid>\n            </Grid>\n\n\n            <Box my={2}>\n                <TextField\n                    autoFocus\n                    variant=\"outlined\" \n                    defaultValue={EventContext.event.url}\n                    onChange={(e) => {\n                        EventContext.setEvent({...EventContext.event, url : e.target.value})\n                    }}\n                    id=\"name\"\n                    label=\"URL\"\n                    fullWidth/>\n            </Box>\n                <Box my={2}>\n                    <TextField\n                        autoFocus\n                        multiline\n                        rows={5}\n                        variant=\"outlined\" \n                        defaultValue={EventContext.event.description}\n                        onChange={(e) => {EventContext.setEvent({...EventContext.event, description : e.target.value})}}\n                        margin=\"dense\"\n                        label=\"Description\"\n                        fullWidth\n                    />\n                </Box>\n\n                <Box my={3}>\n                    <Autocomplete\n                        fullWidth\n                        onChange={(event, value, reason) => changeTags(value)}\n                        id=\"multiple-limit-tags\"\n                        inputValue={mes}\n                        options={AllSubjects}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => <TextField {...params} label=\"Add interests\" variant=\"outlined\" />}\n                    />\n                        <Box my={3}>\n                            {tags.map( (e) => <Chip label={e} onDelete={() => changeChips(e)} ></Chip>)}\n                        </Box>\n                </Box>\n\n                <Button variant=\"contained\" color=\"secondary\" onClick={UpdateEvent}> save </Button>\n\n        </div>\n    )\n}\n\nexport default EditEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/forms/CreateEvent.tsx",["213"],"import { Box, Button, Checkbox, FormControl, FormControlLabel, Grid, MenuItem, Select } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { InputLabel } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Auth0Context } from '../../../context/Auth0Context';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AllSubjects } from '../../../config/TagSystem';\nimport { useSnackbar } from 'notistack';\n\ninterface CreateEventProps {\n    dialog : Function\n}\n\nfunction CreateEvent(props : CreateEventProps) {\n\n    const Auth0 = useAuth0();    \n    const [event, setEvent] = useState({title:\"\",dateTime: new Date() , finishedDateTime: new Date(), type:\"\", url:\"\", description:\"\",isDISCUS:true, isApproved : false, tags : \"\" }); \n    const [accessToken, setAccessToken] = useState(\"\");\n    const AuthContext = useContext(Auth0Context)\n    const [tags, setTags] = useState<string[]>([])\n    const { enqueueSnackbar } = useSnackbar();\n    const [validated, setValidated] = useState(true); \n\n    useEffect(() => {\n        if(Auth0.isAuthenticated){\n            Auth0.getAccessTokenSilently().then((accessToken => setAccessToken(accessToken)));\n        }\n        fetchData(); \n    },[Auth0]);\n\n\n    async function fetchData(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/Me`, { \n            headers: {\n              'Authorization': `Bearer ${accessToken}`, \n              'Content-Type': 'application/json',\n            }\n           });\n        AuthContext.setData(await response.json());  \n    }\n\n    async function publishEvent(){\n        \n        let Alltags = \"\"; \n        for (var i = 0; i < tags.length; i++) {\n            Alltags = Alltags.concat(tags[i] + \",\");\n        }\n\n        const newEvent = {...event}\n        if(AuthContext.data.app_metadata !== null){\n            newEvent.isApproved = true;\n            setEvent(newEvent)\n        }\n\n        const newEventTags = {...event}\n        newEvent.tags = Alltags.slice(0,-1);\n        setEvent(newEventTags); \n\n\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity`, {\n            method:\"POST\", \n            body: JSON.stringify(newEvent),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\" : `Bearer ${accessToken}`, \n            }\n        })\n        if(response.ok){\n            if (AuthContext.data.app_metadata !== null)\n            {\n                enqueueSnackbar('Event has been created!', { variant : \"success\" });\n            } else \n            {\n                enqueueSnackbar('Event will be published once authorised!', { variant : \"info\" });\n\n            }\n            props.dialog(); \n        }else{\n            console.error(\"Publishing failed\");\n        }\n    }\n\n    const handleStartDate = (date: Date) => {\n        setEvent({...event, dateTime : date})\n    };\n\n    const handleFinishDate = (date: Date) => {\n        setEvent({...event, finishedDateTime : date})\n    };\n\n    return (\n        <>\n        <form noValidate autoComplete=\"off\">\n            <div>\n            <TextField\n                required\n                error={!validated}\n                label=\"Title\"\n                fullWidth={true} \n                variant=\"outlined\"\n                defaultValue=\"\"\n                onChange={(e) => setEvent({...event,title: String(e.target.value)})}\n                helperText={validated ? \"\" : \"Title cannot be blank.\"}\n            />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Box p={1}> \n                        <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"\n                            format=\"yyyy-MM-dd\"\n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            disablePast\n                            label=\"Pick a Start Date\"\n                            value={event.dateTime}\n                            onChange={(e : any) => handleStartDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change date',\n                            }}\n                        />\n                        </Box>\n                        <Box p={1}> \n                            <KeyboardTimePicker\n                                margin=\"normal\"\n                                id=\"time-picker\"\n                                label=\"Start Time\"\n                                value={event.dateTime}\n                                onChange={(e : any) => handleStartDate(e)}\n                                KeyboardButtonProps={{\n                                    'aria-label': 'change time',\n                                }}\n                            />\n                        </Box>\n                    </Grid>\n                </Grid>\n            </MuiPickersUtilsProvider>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n                <Grid container direction=\"row\" alignItems=\"center\">\n                    <Box p={1}> \n                    <KeyboardDatePicker\n                        disableToolbar\n                        variant=\"inline\"\n                        format=\"yyyy-MM-dd\"\n                        disablePast\n                        margin=\"normal\"\n                        id=\"date-picker-inline\"\n                        label=\"Pick a Finish Date\"\n                        value={event.finishedDateTime}\n                        onChange={(e : any) => handleFinishDate(e)}\n                        KeyboardButtonProps={{\n                            'aria-label': 'change date',\n                        }}\n                    />\n                    </Box>\n                    <Box p={1}> \n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"Finish Time\"\n                            value={event.finishedDateTime}\n                            onChange={(e : any) => handleFinishDate(e)}\n                            KeyboardButtonProps={{\n                                'aria-label': 'change time',\n                            }}\n                        />\n                    </Box>\n                </Grid>\n            </Grid>\n            </MuiPickersUtilsProvider>\n\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                    <FormControl variant=\"outlined\">\n                        <InputLabel>Type</InputLabel>\n                        <Select\n                        style={{minWidth: 220}}\n                        onChange={(e) => setEvent({...event,type:String(e.target.value)})}\n                        label=\"Event Type\"\n                        >\n                        <MenuItem value=\"Hackathon\">Hackathon</MenuItem>\n                        <MenuItem value=\"Showcase\">Showcase</MenuItem>\n                        <MenuItem value=\"Networking\">Networking</MenuItem>\n                        <MenuItem value=\"Generic\">Generic</MenuItem>\n                        </Select>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12}>\n                    <Box m={1}>\n                        <FormControlLabel \n                            control={ <Checkbox \n                                    checked={event.isDISCUS} name=\"isDiscus\" \n                                    onChange={(e) => setEvent({...event,isDISCUS:Boolean(e.target.checked)})}\n                                    /> }\n                            label=\"A discus event\"/>\n                   </Box>\n                </Grid>\n            </Grid>\n\n            <Box>\n\n            </Box>\n            <Box my={1}>\n                <TextField \n                    margin=\"normal\" \n                    label=\"Registration\" \n                    variant=\"outlined\" \n                    fullWidth={true}\n                    type=\"text\" \n                    onChange={(e) => setEvent({...event,url:e.target.value})}/>\n            </Box>\n            <Box my={1} >\n                <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Description\"\n                    multiline\n                    fullWidth={true}\n                    rows={4}\n                    onChange={(e) => setEvent({...event,description:String(e.target.value)})}\n                    variant=\"outlined\"/>\n            </Box>\n\n            <Box my={2}>\n                <Autocomplete\n                    multiple\n                    limitTags={5}\n                    id=\"set Interest\"\n                    onChange={(obj,value,reason) => setTags(value)}\n                    options={AllSubjects}\n                    getOptionLabel={(option) => option}\n                    renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Favorites\" />\n                )}\n                />\n            </Box>\n    \n            <Button disabled={AuthContext.data === null} variant=\"contained\" value=\"Submit\" color=\"secondary\" \n                onClick = \n                    { () => {\n                            if (event.title === \"\") \n                            {\n                                setValidated(false);\n                            } \n                            else \n                            {\n                                setValidated(true);\n                                publishEvent(); \n                            }\n                        }\n                    } \n            > Submit </Button>\n        \n        </div>\n        </form>\n        </>\n    );\n}\n\nexport default CreateEvent\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/SendEmail.tsx",["214","215","216"],"import { Box, Button, TextField, Typography } from '@material-ui/core'\nimport React, { useContext, useEffect, useState } from 'react'\nimport SendIcon from '@material-ui/icons/Send';\nimport EmailAddress from '../models/EmailAddress'; \nimport { EditEventContext } from  '../context/EditEventContext'; \nimport SendMail from '../models/SendMail'; \n\nfunction SendEmail() {\n    const EventContext = useContext(EditEventContext)\n    const [to, setTo] = useState(\"\"); \n    const [subject, setSubject] = useState(\"Invitation...\"); \n    const [body, setBody] = useState(\"\"); \n    const [recipents, setrecipents] = useState<EmailAddress[]>(); \n    useEffect(() => {\n        getRecipents(); \n        formatter(); \n    }, [])\n\n    async function formatter(){\n        setBody(`Title = ${EventContext.event.title}\\nURL = ${EventContext.event.url}\\nType = ${EventContext.event.type}\\nStart DateTime = ${EventContext.event.dateTime}\\nFinish DateTime = ${EventContext.event.dateTime}\\nDescription = ${EventContext.event.description}`)\n    }\n\n    async function getRecipents(){\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/GetEmails`, { \n            headers: {\n              'Content-Type': 'application/json',\n            }\n        });\n        setrecipents(await response.json())\n    }\n\n    async function sendEmail(){\n        if (recipents !== undefined){\n            let message; \n            message = \"<center> <img src='http://avantehealth.co.uk/discus.png'  width='100' height='100' /> </center> <br> <br>\" + body.replace(/\\n/g, \"<br />\") \n            const sendObj : SendMail = {\n                \"recipients\" : recipents, \n                \"body\" : message, \n                \"subject\" : subject, \n            }\n\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/SendEmail`, { \n                method:\"POST\", \n                body: JSON.stringify(sendObj),\n                headers: {\n                  'Content-Type': 'application/json',\n                }\n            });\n    \n            if (response.ok){\n                (alert(\"sentt\")); \n            }; \n        }\n    }\n\n    return (\n        <div>\n            <Box m={3}>\n                <Typography> To </Typography>\n                {recipents?.map (e => \n                    <>\n                    <Box m={2}>\n                        <Typography>{e.name}</Typography>\n                    </Box>\n                    </>)\n                }\n                <Box my={5}>\n                    <Typography> Subject </Typography>\n                </Box>\n                    <TextField variant=\"outlined\"  value={subject} onChange={e => setSubject(e.target.value)}></TextField>\n                <Typography > Body </Typography>\n                    <TextField\n                        value={body} \n                        variant=\"outlined\" \n                        multiline\n                        fullWidth={true}\n                        rows={10}\n                        onChange={e => setBody(e.target.value)}>\n                    </TextField>\n                <Button onClick={sendEmail}><SendIcon/></Button>\n            </Box>\n        </div>\n    )\n}\n\nexport default SendEmail\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EnrichProfile.tsx",["217","218","219"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Dashboard.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/Statistics.tsx",["220"],"import { Box, Grid, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react'\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\n\nfunction Statistics() {\n    const [eventsTotal, setEventsTotal] = useState<number>(); \n    const [usersTotal, setUsersTotal] = useState(); \n    const [activeUsers, setActiveUsers] = useState<number>(); \n\n    useEffect(() => {\n        GetStats()\n    }, [])\n\n    async function GetStats(){\n        const events = await fetch(`${process.env.REACT_APP_API_URL}/EventEntity/Count`, { \n                headers: {\n                'Content-Type': 'application/json',\n                }\n            });\n        setEventsTotal(await events.json());  \n\n        const active = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/ActiveUsers`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        setActiveUsers(await active.json());  \n\n        const total = await fetch(`${process.env.REACT_APP_API_URL}/UserSearch/TotalUsers`, { \n            headers: {\n            'Content-Type': 'application/json',\n            }\n        });\n        setUsersTotal(await total.json()); \n    }\n\n    return (\n            <Grid container justify=\"center\" spacing={2}>\n            <Grid item lg={4} xs={12}>\n                <Grid container justify=\"center\">\n                    <Box bgcolor=\"primary.light\" borderRadius={10} p={3} style={{ width : '90%'}}>      \n                        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n                            <Grid item xs={2}>\n                                <EventAvailableIcon style={{ fontSize: 27 }} />\n                            </Grid>\n                            <Grid item xs={10}>\n                                <Typography variant=\"body1\">Hosted Events</Typography>\n                            </Grid>\n                            <Box textAlign=\"center\">\n                                <Typography variant=\"h5\"> {eventsTotal}</Typography>\n                            </Box>\n                        </Grid>\n                    </Box>\n                </Grid>\n            </Grid>\n            <Grid item lg={4} xs={12}>\n            <Grid container justify=\"center\">\n                            <Box bgcolor=\"primary.light\" borderRadius={10} p={3} style={{ width : '90%'}}>      \n                                <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n                                    <Grid item xs={2}>\n                                    <PeopleAltIcon style={{ fontSize: 27 }} />\n                                    </Grid>\n                                    <Grid item xs={10}>\n                                    <Typography variant=\"body1\">Active Users</Typography>\n                                    </Grid>\n                                    <Box textAlign=\"center\">\n                                    <Typography variant=\"h5\"> {eventsTotal}</Typography>\n                                    </Box>\n                                </Grid>\n                            </Box>\n                    </Grid>\n            </Grid>\n            <Grid item lg={4} xs={12}>\n                <Grid container justify=\"center\">\n                        <Box bgcolor=\"primary.light\" borderRadius={10} p={3} style={{ width : '90%'}}>\n                            <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\">\n                                <Grid item xs={2}>\n                                    <PeopleOutlineIcon style={{ fontSize: 27 }} />\n                                </Grid>\n                                <Grid item xs={10}>\n                                <Typography variant=\"body1\">Users Total</Typography>\n                                </Grid>\n                                <Box textAlign=\"center\">\n                                <Typography variant=\"h5\"> {usersTotal}</Typography>\n                                </Box>\n                            </Grid>\n                        </Box>\n                </Grid>\n            </Grid>\n            </Grid>\n    )\n}\n\nexport default Statistics\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/events/ApproveEvents.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/charts/StackedBarChart.tsx",["221","222"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/IsAvailable.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/PieChartExpertise.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/EditUser.tsx",["223","224","225","226"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/context/SelectedUserContext.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/UserTheme.tsx",[],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/HtmlTooltip.tsx",["227"],"import { Theme, Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/styles';\nimport React from 'react'\n\nconst HtmlTooltip = withStyles((theme: Theme) => ({\n    tooltip: {\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n    },\n  }))(Tooltip);\n\nexport default HtmlTooltip\n","/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/themes/SearchTheme.tsx",["228","229","230"],"/Users/nishanfernando/Desktop/DISCUS/DISCUS-SPA/src/components/AntSwitch.tsx",["231"],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":2,"column":165,"nodeType":"238","messageId":"239","endLine":2,"endColumn":175},{"ruleId":"236","severity":1,"message":"240","line":2,"column":203,"nodeType":"238","messageId":"239","endLine":2,"endColumn":208},{"ruleId":"236","severity":1,"message":"241","line":2,"column":222,"nodeType":"238","messageId":"239","endLine":2,"endColumn":232},{"ruleId":"236","severity":1,"message":"242","line":15,"column":8,"nodeType":"238","messageId":"239","endLine":15,"endColumn":13},{"ruleId":"243","severity":1,"message":"244","line":63,"column":7,"nodeType":"245","endLine":63,"endColumn":82,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":136,"column":30,"nodeType":"238","messageId":"249","endLine":136,"endColumn":31},{"ruleId":"247","severity":1,"message":"248","line":153,"column":30,"nodeType":"238","messageId":"249","endLine":153,"endColumn":31},{"ruleId":"247","severity":1,"message":"248","line":157,"column":30,"nodeType":"238","messageId":"249","endLine":157,"endColumn":31},{"ruleId":"250","severity":1,"message":"251","line":223,"column":22,"nodeType":"252","messageId":"253","endLine":223,"endColumn":24},{"ruleId":"243","severity":1,"message":"244","line":20,"column":8,"nodeType":"245","endLine":20,"endColumn":21,"suggestions":"254"},{"ruleId":"236","severity":1,"message":"255","line":19,"column":12,"nodeType":"238","messageId":"239","endLine":19,"endColumn":23},{"ruleId":"243","severity":1,"message":"256","line":28,"column":8,"nodeType":"245","endLine":28,"endColumn":10,"suggestions":"257"},{"ruleId":"236","severity":1,"message":"258","line":1,"column":37,"nodeType":"238","messageId":"239","endLine":1,"endColumn":49},{"ruleId":"236","severity":1,"message":"259","line":1,"column":87,"nodeType":"238","messageId":"239","endLine":1,"endColumn":98},{"ruleId":"236","severity":1,"message":"260","line":1,"column":114,"nodeType":"238","messageId":"239","endLine":1,"endColumn":124},{"ruleId":"236","severity":1,"message":"237","line":1,"column":126,"nodeType":"238","messageId":"239","endLine":1,"endColumn":136},{"ruleId":"236","severity":1,"message":"261","line":1,"column":138,"nodeType":"238","messageId":"239","endLine":1,"endColumn":146},{"ruleId":"236","severity":1,"message":"262","line":1,"column":148,"nodeType":"238","messageId":"239","endLine":1,"endColumn":154},{"ruleId":"236","severity":1,"message":"263","line":1,"column":156,"nodeType":"238","messageId":"239","endLine":1,"endColumn":165},{"ruleId":"236","severity":1,"message":"240","line":1,"column":167,"nodeType":"238","messageId":"239","endLine":1,"endColumn":172},{"ruleId":"236","severity":1,"message":"264","line":3,"column":8,"nodeType":"238","messageId":"239","endLine":3,"endColumn":17},{"ruleId":"236","severity":1,"message":"265","line":5,"column":10,"nodeType":"238","messageId":"239","endLine":5,"endColumn":22},{"ruleId":"236","severity":1,"message":"266","line":6,"column":10,"nodeType":"238","messageId":"239","endLine":6,"endColumn":22},{"ruleId":"236","severity":1,"message":"267","line":23,"column":12,"nodeType":"238","messageId":"239","endLine":23,"endColumn":24},{"ruleId":"236","severity":1,"message":"268","line":23,"column":26,"nodeType":"238","messageId":"239","endLine":23,"endColumn":41},{"ruleId":"236","severity":1,"message":"269","line":26,"column":12,"nodeType":"238","messageId":"239","endLine":26,"endColumn":21},{"ruleId":"243","severity":1,"message":"244","line":32,"column":8,"nodeType":"245","endLine":32,"endColumn":10,"suggestions":"270"},{"ruleId":"236","severity":1,"message":"271","line":46,"column":14,"nodeType":"238","messageId":"239","endLine":46,"endColumn":20},{"ruleId":"236","severity":1,"message":"272","line":50,"column":20,"nodeType":"238","messageId":"239","endLine":50,"endColumn":28},{"ruleId":"236","severity":1,"message":"273","line":66,"column":14,"nodeType":"238","messageId":"239","endLine":66,"endColumn":24},{"ruleId":"236","severity":1,"message":"274","line":1,"column":84,"nodeType":"238","messageId":"239","endLine":1,"endColumn":91},{"ruleId":"243","severity":1,"message":"244","line":40,"column":8,"nodeType":"245","endLine":40,"endColumn":35,"suggestions":"275"},{"ruleId":"243","severity":1,"message":"276","line":44,"column":8,"nodeType":"245","endLine":44,"endColumn":21,"suggestions":"277"},{"ruleId":"250","severity":1,"message":"251","line":91,"column":29,"nodeType":"252","messageId":"253","endLine":91,"endColumn":31},{"ruleId":"236","severity":1,"message":"258","line":1,"column":107,"nodeType":"238","messageId":"239","endLine":1,"endColumn":119},{"ruleId":"236","severity":1,"message":"237","line":1,"column":121,"nodeType":"238","messageId":"239","endLine":1,"endColumn":131},{"ruleId":"236","severity":1,"message":"240","line":1,"column":133,"nodeType":"238","messageId":"239","endLine":1,"endColumn":138},{"ruleId":"236","severity":1,"message":"278","line":1,"column":179,"nodeType":"238","messageId":"239","endLine":1,"endColumn":192},{"ruleId":"236","severity":1,"message":"279","line":40,"column":12,"nodeType":"238","messageId":"239","endLine":40,"endColumn":24},{"ruleId":"236","severity":1,"message":"280","line":40,"column":26,"nodeType":"238","messageId":"239","endLine":40,"endColumn":41},{"ruleId":"236","severity":1,"message":"281","line":41,"column":12,"nodeType":"238","messageId":"239","endLine":41,"endColumn":26},{"ruleId":"236","severity":1,"message":"282","line":41,"column":28,"nodeType":"238","messageId":"239","endLine":41,"endColumn":45},{"ruleId":"236","severity":1,"message":"283","line":42,"column":12,"nodeType":"238","messageId":"239","endLine":42,"endColumn":28},{"ruleId":"236","severity":1,"message":"284","line":42,"column":30,"nodeType":"238","messageId":"239","endLine":42,"endColumn":49},{"ruleId":"243","severity":1,"message":"285","line":47,"column":8,"nodeType":"245","endLine":47,"endColumn":10,"suggestions":"286"},{"ruleId":"236","severity":1,"message":"255","line":21,"column":12,"nodeType":"238","messageId":"239","endLine":21,"endColumn":23},{"ruleId":"243","severity":1,"message":"244","line":26,"column":8,"nodeType":"245","endLine":26,"endColumn":10,"suggestions":"287"},{"ruleId":"236","severity":1,"message":"288","line":3,"column":10,"nodeType":"238","messageId":"239","endLine":3,"endColumn":13},{"ruleId":"236","severity":1,"message":"289","line":3,"column":15,"nodeType":"238","messageId":"239","endLine":3,"endColumn":25},{"ruleId":"243","severity":1,"message":"290","line":22,"column":8,"nodeType":"245","endLine":22,"endColumn":10,"suggestions":"291"},{"ruleId":"243","severity":1,"message":"244","line":32,"column":7,"nodeType":"245","endLine":32,"endColumn":14,"suggestions":"292"},{"ruleId":"236","severity":1,"message":"293","line":10,"column":12,"nodeType":"238","messageId":"239","endLine":10,"endColumn":14},{"ruleId":"236","severity":1,"message":"294","line":10,"column":16,"nodeType":"238","messageId":"239","endLine":10,"endColumn":21},{"ruleId":"243","severity":1,"message":"295","line":17,"column":8,"nodeType":"245","endLine":17,"endColumn":10,"suggestions":"296"},{"ruleId":"236","severity":1,"message":"297","line":3,"column":105,"nodeType":"238","messageId":"239","endLine":3,"endColumn":112},{"ruleId":"236","severity":1,"message":"240","line":3,"column":114,"nodeType":"238","messageId":"239","endLine":3,"endColumn":119},{"ruleId":"236","severity":1,"message":"241","line":3,"column":121,"nodeType":"238","messageId":"239","endLine":3,"endColumn":131},{"ruleId":"236","severity":1,"message":"298","line":10,"column":12,"nodeType":"238","messageId":"239","endLine":10,"endColumn":23},{"ruleId":"236","severity":1,"message":"299","line":3,"column":84,"nodeType":"238","messageId":"239","endLine":3,"endColumn":89},{"ruleId":"250","severity":1,"message":"251","line":26,"column":43,"nodeType":"252","messageId":"253","endLine":26,"endColumn":45},{"ruleId":"236","severity":1,"message":"300","line":22,"column":18,"nodeType":"238","messageId":"239","endLine":22,"endColumn":25},{"ruleId":"236","severity":1,"message":"301","line":27,"column":12,"nodeType":"238","messageId":"239","endLine":27,"endColumn":22},{"ruleId":"236","severity":1,"message":"302","line":33,"column":12,"nodeType":"238","messageId":"239","endLine":33,"endColumn":22},{"ruleId":"236","severity":1,"message":"303","line":33,"column":24,"nodeType":"238","messageId":"239","endLine":33,"endColumn":37},{"ruleId":"236","severity":1,"message":"304","line":3,"column":8,"nodeType":"238","messageId":"239","endLine":3,"endColumn":13},{"ruleId":"236","severity":1,"message":"304","line":1,"column":8,"nodeType":"238","messageId":"239","endLine":1,"endColumn":13},{"ruleId":"236","severity":1,"message":"305","line":3,"column":10,"nodeType":"238","messageId":"239","endLine":3,"endColumn":19},{"ruleId":"236","severity":1,"message":"241","line":3,"column":33,"nodeType":"238","messageId":"239","endLine":3,"endColumn":43},{"ruleId":"236","severity":1,"message":"304","line":2,"column":8,"nodeType":"238","messageId":"239","endLine":2,"endColumn":13},"no-native-reassign",["306"],"no-negated-in-lhs",["307"],"@typescript-eslint/no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'Theme' is defined but never used.","'withStyles' is defined but never used.","'theme' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["308"],"@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["309"],"'accessToken' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getEventAttendance' and 'getEventInfo'. Either include them or remove the dependency array.",["310"],"'createStyles' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'TextField' is defined but never used.","'Auth0user' is defined but never used.","'Autocomplete' is defined but never used.","'Auth0Context' is defined but never used.","'loginPressed' is assigned a value but never used.","'setLoginPressed' is assigned a value but never used.","'interests' is assigned a value but never used.",["311"],"'Cancel' is defined but never used.","'saveData' is defined but never used.","'addtoState' is defined but never used.","'Divider' is defined but never used.",["312"],"React Hook useEffect has a missing dependency: 'fetchEventData'. Either include it or remove the dependency array.",["313"],"'DialogContent' is defined but never used.","'validateName' is assigned a value but never used.","'setValidateName' is assigned a value but never used.","'validateSussex' is assigned a value but never used.","'setValidateSussex' is assigned a value but never used.","'validateLinkedIn' is assigned a value but never used.","'setValidateLinkedIn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'LoadStates'. Either include it or remove the dependency array.",["314"],["315"],"'Box' is defined but never used.","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'EventContext.event.tags'. Either include it or remove the dependency array.",["316"],["317"],"'to' is assigned a value but never used.","'setTo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formatter'. Either include it or remove the dependency array.",["318"],"'Tooltip' is defined but never used.","'activeUsers' is assigned a value but never used.","'Label' is defined but never used.","'setData' is assigned a value but never used.","'department' is assigned a value but never used.","'graduation' is assigned a value but never used.","'setGraduation' is assigned a value but never used.","'React' is defined but never used.","'Accordion' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"325","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, fetchData]",{"range":"340","text":"341"},"Update the dependencies array to be: [accessToken, fetchData]",{"range":"342","text":"343"},"Update the dependencies array to be: [getEventAttendance, getEventInfo]",{"range":"344","text":"345"},"Update the dependencies array to be: [fetchData]",{"range":"346","text":"347"},"Update the dependencies array to be: [accessToken, openNE, open, fetchData]",{"range":"348","text":"349"},"Update the dependencies array to be: [AuthContext, fetchEventData]",{"range":"350","text":"351"},"Update the dependencies array to be: [LoadStates]",{"range":"352","text":"353"},{"range":"354","text":"347"},"Update the dependencies array to be: [EventContext.event.tags]",{"range":"355","text":"356"},"Update the dependencies array to be: [Auth0, fetchData]",{"range":"357","text":"358"},"Update the dependencies array to be: [formatter]",{"range":"359","text":"360"},[2757,2832],"[searchTerm, currPage, DepArray, tagsArray, checked, IncludeAll, CareerStage, fetchData]",[657,670],"[accessToken, fetchData]",[1340,1342],"[getEventAttendance, getEventInfo]",[1574,1576],"[fetchData]",[1869,1896],"[accessToken, openNE, open, fetchData]",[1954,1967],"[AuthContext, fetchEventData]",[2236,2238],"[LoadStates]",[1112,1114],[913,915],"[EventContext.event.tags]",[1457,1464],"[Auth0, fetchData]",[709,711],"[formatter]"]